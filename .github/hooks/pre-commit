#!/bin/bash
# Pre-commit hook to prevent committing sensitive files
# 预提交钩子：阻止提交敏感文件

echo "🔍 Running security checks before commit..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Flag to track if any check fails
HAS_ERRORS=0

# Check for SSH private keys
echo "Checking for SSH private keys..."
if git diff --cached --name-only | grep -E '\.(pem|key|ppk)$|_rsa|_dsa|_ecdsa|_ed25519|_nopass' > /dev/null; then
    echo -e "${RED}❌ ERROR: SSH private key files detected!${NC}"
    echo "The following files match private key patterns:"
    git diff --cached --name-only | grep -E '\.(pem|key|ppk)$|_rsa|_dsa|_ecdsa|_ed25519|_nopass'
    HAS_ERRORS=1
fi

# Check for specific project keys
if git diff --cached --name-only | grep -i 'onlinestore_nopass_ed25519' > /dev/null; then
    echo -e "${RED}❌ ERROR: Project SSH key file detected!${NC}"
    echo "File: onlinestore_nopass_ed25519"
    HAS_ERRORS=1
fi

# Check for .env files with secrets
echo "Checking for .env files..."
if git diff --cached --name-only | grep -E '^\.env$|\.env\.local$|\.env\.production$' | grep -v '.env.example' > /dev/null; then
    echo -e "${YELLOW}⚠️  WARNING: .env files detected!${NC}"
    echo "These files may contain sensitive data:"
    git diff --cached --name-only | grep -E '^\.env$|\.env\.local$|\.env\.production$' | grep -v '.env.example'
    HAS_ERRORS=1
fi

# Check for certificates and tokens
echo "Checking for certificates and token files..."
if git diff --cached --name-only | grep -E '\.(crt|cer|p12|pfx|token|secret)$|-token\.txt$|-secret\.txt$' > /dev/null; then
    echo -e "${RED}❌ ERROR: Certificate or token files detected!${NC}"
    git diff --cached --name-only | grep -E '\.(crt|cer|p12|pfx|token|secret)$|-token\.txt$|-secret\.txt$'
    HAS_ERRORS=1
fi

# Check for common secret patterns in file contents
echo "Scanning file contents for secrets..."
SECRETS_FOUND=0

# Check for AWS keys
if git diff --cached -U0 | grep -E 'AKIA[0-9A-Z]{16}' > /dev/null; then
    echo -e "${RED}❌ ERROR: AWS Access Key detected in file contents!${NC}"
    SECRETS_FOUND=1
fi

# Check for private keys in content
if git diff --cached -U0 | grep -E '-----BEGIN (RSA |DSA |EC |OPENSSH )?PRIVATE KEY-----' > /dev/null; then
    echo -e "${RED}❌ ERROR: Private key content detected in files!${NC}"
    SECRETS_FOUND=1
fi

# Check for common token patterns
if git diff --cached -U0 | grep -iE '(password|passwd|pwd|secret|token|api[_-]?key|auth[_-]?key)\s*[=:]\s*["\047][^"\047]{8,}["\047]' > /dev/null; then
    echo -e "${YELLOW}⚠️  WARNING: Potential credentials detected in file contents!${NC}"
    echo "Please review your changes to ensure no secrets are being committed."
    SECRETS_FOUND=1
fi

if [ $SECRETS_FOUND -eq 1 ]; then
    HAS_ERRORS=1
fi

# Summary
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
if [ $HAS_ERRORS -eq 0 ]; then
    echo -e "${GREEN}✅ Security check passed!${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    exit 0
else
    echo -e "${RED}❌ Security check FAILED!${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    echo "🔧 What to do:"
    echo "   1. Remove sensitive files from staging: git reset HEAD <file>"
    echo "   2. Add them to .gitignore"
    echo "   3. Never commit real credentials to version control"
    echo ""
    echo "💡 Tips:"
    echo "   - Use environment variables for secrets"
    echo "   - Use .env.example as a template"
    echo "   - Store real credentials in secure vaults"
    echo ""
    echo "To bypass this check (NOT RECOMMENDED):"
    echo "   git commit --no-verify"
    echo ""
    exit 1
fi
