# @ai-generated: 基于Claude 4 Sonnet生成的GitHub Actions质量门禁工作流
name: Quality Gate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  quality-gate:
    name: Quality Gate Checks
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        npm install js-yaml
    
    - name: Run ESLint
      run: npm run lint
      continue-on-error: true
    
    - name: Run Quality Gate Checks
      run: node scripts/quality-gate.js
      continue-on-error: false
    
    - name: Upload Quality Gate Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-gate-report-node-${{ matrix.node-version }}
        path: |
          quality-gate-report.json
          .quality-gates.yml
        retention-days: 30
    
    - name: Comment PR with Quality Gate Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const reportPath = 'quality-gate-report.json';
            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              
              let comment = '## 🎯 质量门禁检查报告\n\n';
              comment += `**检查时间**: ${report.timestamp}\n`;
              comment += `**Node.js版本**: ${{ matrix.node-version }}\n\n`;
              
              comment += '### 📊 检查结果\n\n';
              comment += `- ✅ 通过: ${report.summary.passed}\n`;
              comment += `- ⚠️ 警告: ${report.summary.warnings}\n`;
              comment += `- ❌ 失败: ${report.summary.failed}\n`;
              comment += `- 📈 总计: ${report.summary.total}\n\n`;
              
              if (report.details.failed.length > 0) {
                comment += '### ❌ 失败的检查\n\n';
                report.details.failed.forEach(item => {
                  comment += `- **${item.check}**: ${item.message}\n`;
                });
                comment += '\n';
              }
              
              if (report.details.warnings.length > 0) {
                comment += '### ⚠️ 警告\n\n';
                report.details.warnings.forEach(item => {
                  comment += `- **${item.check}**: ${item.message}\n`;
                });
                comment += '\n';
              }
              
              if (report.details.passed.length > 0) {
                comment += '### ✅ 通过的检查\n\n';
                report.details.passed.forEach(item => {
                  comment += `- **${item.check}**: ${item.message}\n`;
                });
              }
              
              const success = report.summary.failed === 0;
              comment += `\n### 🎯 质量门禁: ${success ? '✅ 通过' : '❌ 未通过'}\n`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.error('生成PR评论失败:', error);
          }

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run npm audit
      run: |
        npm audit --audit-level=high --json > npm-audit-report.json || true
        cat npm-audit-report.json
      continue-on-error: true
    
    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-report
        path: npm-audit-report.json
        retention-days: 30

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint with SARIF output
      run: |
        npx eslint js/ --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif || true
      continue-on-error: true
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: eslint-results.sarif
        category: eslint
    
    - name: Generate Code Metrics
      run: |
        echo "# 代码指标报告" > code-metrics.md
        echo "" >> code-metrics.md
        echo "## 文件统计" >> code-metrics.md
        echo "\`\`\`" >> code-metrics.md
        find js/ -name "*.js" | wc -l | xargs echo "JavaScript文件数量:" >> code-metrics.md
        find js/ -name "*.js" -exec wc -l {} + | tail -1 | awk '{print "总代码行数: " $1}' >> code-metrics.md
        echo "\`\`\`" >> code-metrics.md
        echo "" >> code-metrics.md
        echo "## 目录结构" >> code-metrics.md
        echo "\`\`\`" >> code-metrics.md
        tree js/ || find js/ -type d >> code-metrics.md
        echo "\`\`\`" >> code-metrics.md
    
    - name: Upload Code Metrics
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-metrics
        path: code-metrics.md
        retention-days: 30

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run Performance Tests
      run: |
        echo "# 性能测试报告" > performance-report.md
        echo "" >> performance-report.md
        echo "## 文件大小分析" >> performance-report.md
        echo "\`\`\`" >> performance-report.md
        find js/ -name "*.js" -exec ls -lh {} + | awk '{print $5 "\t" $9}' | sort -hr >> performance-report.md
        echo "\`\`\`" >> performance-report.md
        echo "" >> performance-report.md
        echo "## 大文件警告 (>50KB)" >> performance-report.md
        echo "\`\`\`" >> performance-report.md
        find js/ -name "*.js" -size +50k -exec ls -lh {} + | awk '{print $5 "\t" $9}' >> performance-report.md || echo "无大文件" >> performance-report.md
        echo "\`\`\`" >> performance-report.md
    
    - name: Upload Performance Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-report
        path: performance-report.md
        retention-days: 30

  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [quality-gate, security-scan, code-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check Deployment Readiness
      run: |
        echo "🚀 部署就绪性检查"
        echo "✅ 质量门禁: 已通过"
        echo "✅ 安全扫描: 已完成"
        echo "✅ 代码质量: 已分析"
        echo "🎯 项目已准备好部署到生产环境"
    
    - name: Create Deployment Badge
      run: |
        echo '{"schemaVersion": 1, "label": "deployment", "message": "ready", "color": "green"}' > deployment-badge.json
    
    - name: Upload Deployment Badge
      uses: actions/upload-artifact@v4
      with:
        name: deployment-badge
        path: deployment-badge.json
        retention-days: 30