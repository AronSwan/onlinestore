name: Backend CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  WORKING_DIR: backend
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-backend

jobs:
  quality-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: Lint
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run lint

      - name: Type check
        working-directory: ${{ env.WORKING_DIR }}
        run: npx tsc -p tsconfig.json --noEmit

      - name: Security audit
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run security:check:optimized

  unit-tests:
    runs-on: ubuntu-latest
    needs: quality-check
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: Run unit tests
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run test:unit -- --coverage

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: backend/coverage

  integration-tests:
    runs-on: ubuntu-latest
    needs: quality-check
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: Run integration tests
        working-directory: ${{ env.WORKING_DIR }}
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/test
          REDIS_URL: redis://localhost:6379
        run: npm run test:integration

  build-image:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 30
    needs: [unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image ref
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" > image-ref.txt

      - name: Upload image ref
        uses: actions/upload-artifact@v4
        with:
          name: image-ref
          path: image-ref.txt

  security-scan:
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 15
    steps:
      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@v0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-image, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 20
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure KUBECONFIG
        run: |
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
          echo "KUBECONFIG=$PWD/kubeconfig" >> $GITHUB_ENV

      - name: Deploy to staging
        run: |
          sed -i 's|IMAGE_TAG|${{ github.sha }}|g' backend/k8s/staging/*.yaml || true
          kubectl apply -f backend/k8s/staging/
          kubectl rollout status deployment/backend-api -n staging --timeout=300s

  e2e-tests:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && vars.RUN_E2E == 'true'
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      - name: Run E2E smoke or health check
        working-directory: ${{ env.WORKING_DIR }}
        env:
          E2E_BASE_URL: ${{ secrets.STAGING_BASE_URL }}
        shell: bash
        run: |
          set -e
          echo "尝试运行轻量冒烟用例（若存在脚本 test:e2e:smoke）..."
          if node -e "const s=require('./package.json').scripts||{}; if(!s['test:e2e:smoke']) process.exit(1)"; then
            npm run -s test:e2e:smoke || echo 'smoke 失败，继续执行健康检查'
          else
            echo '未发现 test:e2e:smoke 脚本，直接执行健康检查'
          fi
          echo "健康检查：${E2E_BASE_URL}/api/health"
          for i in {1..5}; do
            if curl -fsS "${E2E_BASE_URL}/api/health"; then
              echo "健康检查通过"
              exit 0
            fi
            echo "第 $i 次健康检查失败，5 秒后重试..."
            sleep 5
          done
          echo "健康检查失败"
          exit 1

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 30
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure KUBECONFIG
        run: |
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          echo "KUBECONFIG=$PWD/kubeconfig" >> $GITHUB_ENV

      - name: Deploy to production
        run: |
          sed -i 's|IMAGE_TAG|${{ github.sha }}|g' backend/k8s/production/*.yaml || true
          kubectl apply -f backend/k8s/production/
          kubectl rollout status deployment/backend-api -n production --timeout=600s

      - name: Verify health probe
        run: |
          kubectl run curl-test --image=curlimages/curl:latest --rm -i --restart=Never -- \
            curl -f http://backend-api.production.svc.cluster.local:3000/api/health || exit 1