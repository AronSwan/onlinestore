# AI生成代码来源：基于美团代码审计规范优化的Semgrep配置
# 企业级安全扫描规则配置 v2.0
# 支持多语言：JavaScript, TypeScript, Python, Java, Go, Rust

rules:
  # ========== 安全漏洞检测 ==========
  
  # 硬编码敏感信息检测（增强版）
  - id: hardcoded-secrets-enhanced
    patterns:
      - pattern-either:
          - pattern: $VAR = "$SECRET"
          - pattern: $VAR = '$SECRET'
          - pattern: const $VAR = "$SECRET"
          - pattern: let $VAR = "$SECRET"
          - pattern: var $VAR = "$SECRET"
          - pattern: $VAR := "$SECRET"
    metavariable-regex:
      SECRET: (password|secret|key|token|api_key|private_key|access_token|refresh_token|jwt|bearer|auth|credential).{0,50}
    message: "硬编码敏感信息：$SECRET，应使用环境变量或密钥管理服务"
    languages: [javascript, typescript, python, java, go, rust]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-798: Use of Hard-coded Credentials"
      owasp: "A07:2021 - Identification and Authentication Failures"
      confidence: HIGH
      impact: HIGH
      likelihood: MEDIUM
      
  # SQL注入检测（增强版）
  - id: sql-injection-enhanced
    patterns:
      - pattern-either:
          - pattern: $QUERY = $USER_INPUT + "..."
          - pattern: $QUERY = "..." + $USER_INPUT + "..."
          - pattern: $QUERY = f"...{$USER_INPUT}..."
          - pattern: $QUERY = `...${$USER_INPUT}...`
          - pattern: $DB.query($USER_INPUT)
          - pattern: $DB.execute($USER_INPUT)
          - pattern: $DB.raw($USER_INPUT)
    message: "潜在SQL注入漏洞：用户输入直接拼接到SQL查询中，应使用参数化查询"
    languages: [javascript, typescript, python, java, go]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-89: Improper Neutralization of Special Elements used in an SQL Command"
      owasp: "A03:2021 – Injection"
      confidence: HIGH
      impact: HIGH
      likelihood: HIGH
      
  # XSS漏洞检测
  - id: xss-vulnerability
    patterns:
      - pattern-either:
          - pattern: $ELEMENT.innerHTML = $USER_INPUT
          - pattern: $ELEMENT.outerHTML = $USER_INPUT
          - pattern: document.write($USER_INPUT)
          - pattern: $ELEMENT.insertAdjacentHTML("...", $USER_INPUT)
          - pattern: eval($USER_INPUT)
          - pattern: Function($USER_INPUT)
    message: "潜在XSS漏洞：用户输入直接插入DOM，应进行HTML转义或使用安全的DOM操作方法"
    languages: [javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-79: Improper Neutralization of Input During Web Page Generation"
      owasp: "A03:2021 – Injection"
      confidence: HIGH
      impact: HIGH
      likelihood: MEDIUM
      
  # 命令注入检测
  - id: command-injection
    patterns:
      - pattern-either:
          - pattern: exec($USER_INPUT)
          - pattern: system($USER_INPUT)
          - pattern: shell_exec($USER_INPUT)
          - pattern: os.system($USER_INPUT)
          - pattern: subprocess.call($USER_INPUT)
          - pattern: child_process.exec($USER_INPUT)
    message: "潜在命令注入漏洞：用户输入直接传递给系统命令，应进行输入验证和转义"
    languages: [javascript, typescript, python, java, go]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-78: Improper Neutralization of Special Elements used in an OS Command"
      owasp: "A03:2021 – Injection"
      confidence: HIGH
      impact: HIGH
      likelihood: MEDIUM
      
  # 路径遍历检测
  - id: path-traversal
    patterns:
      - pattern-either:
          - pattern: open($USER_INPUT, ...)
          - pattern: file($USER_INPUT)
          - pattern: readFile($USER_INPUT)
          - pattern: fs.readFile($USER_INPUT, ...)
          - pattern: path.join(..., $USER_INPUT, ...)
    message: "潜在路径遍历漏洞：用户输入直接用于文件路径，应进行路径验证和规范化"
    languages: [javascript, typescript, python, java, go]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-22: Improper Limitation of a Pathname to a Restricted Directory"
      owasp: "A01:2021 – Broken Access Control"
      confidence: MEDIUM
      impact: HIGH
      likelihood: MEDIUM
      
  # ========== 代码质量检测 ==========
  
  # 未使用的变量检测
  - id: unused-variables
    patterns:
      - pattern-either:
          - pattern: let $VAR = ...; 
          - pattern: const $VAR = ...; 
          - pattern: var $VAR = ...; 
    pattern-not-inside:
      - pattern-either:
          - pattern: console.log($VAR)
          - pattern: return $VAR
          - pattern: $VAR(...)
    message: "未使用的变量：$VAR，应删除或使用下划线前缀表示故意未使用"
    languages: [javascript, typescript]
    severity: WARNING
    metadata:
      category: code-quality
      confidence: MEDIUM
      impact: LOW
      likelihood: HIGH
      
  # 空catch块检测
  - id: empty-catch-block
    pattern: |
      try {
        ...
      } catch ($E) {
      }
    message: "空的catch块：应至少记录错误或重新抛出异常"
    languages: [javascript, typescript, java]
    severity: WARNING
    metadata:
      category: code-quality
      confidence: HIGH
      impact: MEDIUM
      likelihood: MEDIUM
      
  # 魔法数字检测
  - id: magic-numbers
    patterns:
      - pattern-either:
          - pattern: $VAR = $NUM
          - pattern: if ($VAR > $NUM)
          - pattern: if ($VAR < $NUM)
          - pattern: if ($VAR === $NUM)
    metavariable-regex:
      NUM: ^[0-9]{2,}$
    pattern-not:
      - pattern: $VAR = 0
      - pattern: $VAR = 1
      - pattern: $VAR = -1
    message: "魔法数字：$NUM，应定义为命名常量以提高代码可读性"
    languages: [javascript, typescript, python, java, go]
    severity: INFO
    metadata:
      category: code-quality
      confidence: MEDIUM
      impact: LOW
      likelihood: HIGH
      
  # ========== 架构规则检测 ==========
  
  # 跨层调用检测（美团规范）
  - id: cross-layer-violation
    patterns:
      - pattern-either:
          - pattern: from src.models import ...
          - pattern: import { ... } from '../models/...'
          - pattern: require('../models/...')
    pattern-inside:
      - pattern-either:
          - pattern-regex: ".*controllers.*"
          - pattern-regex: ".*views.*"
    message: "架构违规：控制器或视图层直接导入模型层，应通过服务层进行调用"
    languages: [javascript, typescript, python]
    severity: ERROR
    metadata:
      category: architecture
      confidence: HIGH
      impact: MEDIUM
      likelihood: MEDIUM
      
  # 循环依赖检测
  - id: circular-dependency
    pattern: |
      import { ... } from '$MODULE'
    pattern-inside:
      - pattern-regex: ".*$MODULE.*"
    message: "潜在循环依赖：模块导入了可能形成循环依赖的模块"
    languages: [javascript, typescript]
    severity: WARNING
    metadata:
      category: architecture
      confidence: MEDIUM
      impact: MEDIUM
      likelihood: LOW
      
  # ========== 性能问题检测 ==========
  
  # 同步文件操作检测
  - id: sync-file-operations
    patterns:
      - pattern-either:
          - pattern: fs.readFileSync(...)
          - pattern: fs.writeFileSync(...)
          - pattern: fs.existsSync(...)
    message: "同步文件操作：在主线程中使用同步文件操作可能阻塞事件循环，建议使用异步版本"
    languages: [javascript, typescript]
    severity: WARNING
    metadata:
      category: performance
      confidence: HIGH
      impact: MEDIUM
      likelihood: MEDIUM
      
  # 内存泄漏风险检测
  - id: memory-leak-risk
    patterns:
      - pattern-either:
          - pattern: setInterval($FUNC, ...)
          - pattern: setTimeout($FUNC, ...)
    pattern-not-inside:
      - pattern: clearInterval(...)
      - pattern: clearTimeout(...)
    message: "内存泄漏风险：定时器未清理，应在适当时机调用clear函数"
    languages: [javascript, typescript]
    severity: WARNING
    metadata:
      category: performance
      confidence: MEDIUM
      impact: MEDIUM
      likelihood: MEDIUM
      
  # ========== 最佳实践检测 ==========
  
  # console.log检测（生产环境）
  - id: console-log-in-production
    patterns:
      - pattern-either:
          - pattern: console.log(...)
          - pattern: console.debug(...)
          - pattern: console.info(...)
    message: "生产代码中的console语句：应使用专业的日志库替代console输出"
    languages: [javascript, typescript]
    severity: INFO
    metadata:
      category: best-practices
      confidence: HIGH
      impact: LOW
      likelihood: HIGH
      
  # TODO/FIXME检测
  - id: todo-fixme-comments
    patterns:
      - pattern-either:
          - pattern-regex: ".*TODO.*"
          - pattern-regex: ".*FIXME.*"
          - pattern-regex: ".*HACK.*"
    message: "待办事项注释：发现TODO/FIXME/HACK注释，应及时处理或创建对应的issue"
    languages: [javascript, typescript, python, java, go, rust]
    severity: INFO
    metadata:
      category: best-practices
      confidence: HIGH
      impact: LOW
      likelihood: HIGH
      
  # 密码复杂度检测
  - id: weak-password-pattern
    patterns:
      - pattern-either:
          - pattern: password = "..."
          - pattern: pwd = "..."
    metavariable-regex:
      password: ^.{1,7}$|^[a-z]+$|^[A-Z]+$|^[0-9]+$|^(password|123456|admin|root)$
    message: "弱密码模式：密码过于简单，应使用强密码策略"
    languages: [javascript, typescript, python, java, go]
    severity: WARNING
    metadata:
      category: security
      confidence: MEDIUM
      impact: HIGH
      likelihood: LOW
