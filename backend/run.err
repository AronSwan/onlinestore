⚠️ 跳过严格配置验证: "DB_DATABASE" is required. "JWT_SECRET" is required. "ENCRYPTION_KEY" is required
⚠️ 跳过严格配置验证: "DB_DATABASE" is required. "JWT_SECRET" is required. "ENCRYPTION_KEY" is required
⚠️ 跳过严格配置验证: "DB_DATABASE" is required. "JWT_SECRET" is required. "ENCRYPTION_KEY" is required
⚠️ 跳过严格配置验证: "DB_DATABASE" is required. "JWT_SECRET" is required. "ENCRYPTION_KEY" is required
⚠️ 跳过严格配置验证: "DB_DATABASE" is required. "JWT_SECRET" is required. "ENCRYPTION_KEY" is required
⚠️ 跳过严格配置验证: "DB_DATABASE" is required. "JWT_SECRET" is required. "ENCRYPTION_KEY" is required
⚠️ 跳过严格配置验证: "DB_DATABASE" is required. "JWT_SECRET" is required. "ENCRYPTION_KEY" is required
⚠️ 跳过严格配置验证: "DB_DATABASE" is required. "JWT_SECRET" is required. "ENCRYPTION_KEY" is required
⚠️ 跳过严格配置验证: "DB_DATABASE" is required. "JWT_SECRET" is required. "ENCRYPTION_KEY" is required
⚠️ 跳过严格配置验证: "DB_DATABASE" is required. "JWT_SECRET" is required. "ENCRYPTION_KEY" is required
⚠️ 本地开发跳过配置验证（SKIP_CONFIG_VALIDATION=true）
@opentelemetry/instrumentation-express Module express has been loaded before @opentelemetry/instrumentation-express so it might not work, please initialize it before requiring express
@opentelemetry/instrumentation-ioredis Module ioredis has been loaded before @opentelemetry/instrumentation-ioredis so it might not work, please initialize it before requiring ioredis
@opentelemetry/instrumentation-kafkajs Module kafkajs has been loaded before @opentelemetry/instrumentation-kafkajs so it might not work, please initialize it before requiring kafkajs
@opentelemetry/instrumentation-nestjs-core Module @nestjs/core has been loaded before @opentelemetry/instrumentation-nestjs-core so it might not work, please initialize it before requiring @nestjs/core
@opentelemetry/instrumentation-router Module router has been loaded before @opentelemetry/instrumentation-router so it might not work, please initialize it before requiring router
@opentelemetry/instrumentation-winston Module winston has been loaded before @opentelemetry/instrumentation-winston so it might not work, please initialize it before requiring winston
@opentelemetry/instrumentation-winston Module winston has been loaded before @opentelemetry/instrumentation-winston so it might not work, please initialize it before requiring winston
[31m[Nest] 9116  - [39m2025/10/07 17:57:32 [31m  ERROR[39m [38;5;3m[ExceptionHandler] [39mUnknownDependenciesException [Error]: Nest can't resolve dependencies of the RedisHealthService (?). Please make sure that the argument Redis at index [0] is available in the RedisModule context.

Potential solutions:
- Is RedisModule a valid NestJS module?
- If Redis is a provider, is it part of the current RedisModule?
- If Redis is exported from a separate @Module, is that module imported within RedisModule?
  @Module({
    imports: [ /* the Module containing Redis */ ]
  })

    at Injector.lookupComponentInParentModules [90m(D:\onlinestore\backend\[39mnode_modules\[4m@nestjs\core[24m\injector\injector.js:286:19[90m)[39m
[90m    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at async resolveParam [90m(D:\onlinestore\backend\[39mnode_modules\[4m@nestjs\core[24m\injector\injector.js:141:38[90m)[39m
    at async Promise.all (index 0)
    at async Injector.resolveConstructorParams [90m(D:\onlinestore\backend\[39mnode_modules\[4m@nestjs\core[24m\injector\injector.js:169:27[90m)[39m
    at async Injector.loadInstance [90m(D:\onlinestore\backend\[39mnode_modules\[4m@nestjs\core[24m\injector\injector.js:75:13[90m)[39m
    at async Injector.loadProvider [90m(D:\onlinestore\backend\[39mnode_modules\[4m@nestjs\core[24m\injector\injector.js:103:9[90m)[39m
    at async [90mD:\onlinestore\backend\[39mnode_modules\[4m@nestjs\core[24m\injector\instance-loader.js:56:13
    at async Promise.all (index 3)
    at async InstanceLoader.createInstancesOfProviders [90m(D:\onlinestore\backend\[39mnode_modules\[4m@nestjs\core[24m\injector\instance-loader.js:55:9[90m)[39m {
  type: [32m'RedisHealthService'[39m,
  context: {
    index: [33m0[39m,
    dependencies: [
      [class Redis extends Commander] {
        Cluster: [36m[Getter][39m,
        Command: [36m[Getter][39m,
        defaultOptions: {
          port: [33m6379[39m,
          host: [32m'localhost'[39m,
          family: [33m4[39m,
          connectTimeout: [33m10000[39m,
          disconnectTimeout: [33m2000[39m,
          retryStrategy: [36m[Function: retryStrategy][39m,
          keepAlive: [33m0[39m,
          noDelay: [33mtrue[39m,
          connectionName: [1mnull[22m,
          disableClientInfo: [33mfalse[39m,
          clientInfoTag: [90mundefined[39m,
          sentinels: [1mnull[22m,
          name: [1mnull[22m,
          role: [32m'master'[39m,
          sentinelRetryStrategy: [36m[Function: sentinelRetryStrategy][39m,
          sentinelReconnectStrategy: [36m[Function: sentinelReconnectStrategy][39m,
          natMap: [1mnull[22m,
          enableTLSForSentinelMode: [33mfalse[39m,
          updateSentinels: [33mtrue[39m,
          failoverDetector: [33mfalse[39m,
          username: [1mnull[22m,
          password: [1mnull[22m,
          db: [33m0[39m,
          enableOfflineQueue: [33mtrue[39m,
          enableReadyCheck: [33mtrue[39m,
          autoResubscribe: [33mtrue[39m,
          autoResendUnfulfilledCommands: [33mtrue[39m,
          lazyConnect: [33mfalse[39m,
          keyPrefix: [32m''[39m,
          reconnectOnError: [1mnull[22m,
          readOnly: [33mfalse[39m,
          stringNumbers: [33mfalse[39m,
          maxRetriesPerRequest: [33m20[39m,
          maxLoadingRetryTime: [33m10000[39m,
          enableAutoPipelining: [33mfalse[39m,
          autoPipeliningIgnoredCommands: [],
          sentinelMaxConnections: [33m10[39m
        },
        default: [36m[Getter][39m,
        Redis: [36m[Getter][39m,
        ScanStream: [36m[Getter][39m,
        Pipeline: [36m[Getter][39m,
        AbstractConnector: [36m[Getter][39m,
        SentinelConnector: [36m[Getter][39m,
        SentinelIterator: [36m[Getter][39m,
        ReplyError: [36m[class ReplyError extends RedisError][39m,
        print: [36m[Function: print][39m
      }
    ],
    name: [class Redis extends Commander] {
      Cluster: [36m[Getter][39m,
      Command: [36m[Getter][39m,
      defaultOptions: {
        port: [33m6379[39m,
        host: [32m'localhost'[39m,
        family: [33m4[39m,
        connectTimeout: [33m10000[39m,
        disconnectTimeout: [33m2000[39m,
        retryStrategy: [36m[Function: retryStrategy][39m,
        keepAlive: [33m0[39m,
        noDelay: [33mtrue[39m,
        connectionName: [1mnull[22m,
        disableClientInfo: [33mfalse[39m,
        clientInfoTag: [90mundefined[39m,
        sentinels: [1mnull[22m,
        name: [1mnull[22m,
        role: [32m'master'[39m,
        sentinelRetryStrategy: [36m[Function: sentinelRetryStrategy][39m,
        sentinelReconnectStrategy: [36m[Function: sentinelReconnectStrategy][39m,
        natMap: [1mnull[22m,
        enableTLSForSentinelMode: [33mfalse[39m,
        updateSentinels: [33mtrue[39m,
        failoverDetector: [33mfalse[39m,
        username: [1mnull[22m,
        password: [1mnull[22m,
        db: [33m0[39m,
        enableOfflineQueue: [33mtrue[39m,
        enableReadyCheck: [33mtrue[39m,
        autoResubscribe: [33mtrue[39m,
        autoResendUnfulfilledCommands: [33mtrue[39m,
        lazyConnect: [33mfalse[39m,
        keyPrefix: [32m''[39m,
        reconnectOnError: [1mnull[22m,
        readOnly: [33mfalse[39m,
        stringNumbers: [33mfalse[39m,
        maxRetriesPerRequest: [33m20[39m,
        maxLoadingRetryTime: [33m10000[39m,
        enableAutoPipelining: [33mfalse[39m,
        autoPipeliningIgnoredCommands: [],
        sentinelMaxConnections: [33m10[39m
      },
      default: [36m[Getter][39m,
      Redis: [36m[Getter][39m,
      ScanStream: [36m[Getter][39m,
      Pipeline: [36m[Getter][39m,
      AbstractConnector: [36m[Getter][39m,
      SentinelConnector: [36m[Getter][39m,
      SentinelIterator: [36m[Getter][39m,
      ReplyError: [36m[class ReplyError extends RedisError][39m,
      print: [36m[Function: print][39m
    }
  },
  metadata: {
    id: [32m'66e16f832a3abb52386d9'[39m
  },
  moduleRef: {
    id: [32m'f9d5179d854c6a7451854'[39m
  }
}
