name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: [ 'backend/**' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'backend/**' ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: caddy-shopping-backend

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Lint check
      run: npm run lint

    - name: Format check
      run: npm run format:check

    - name: Type check
      run: npm run build

    - name: Security audit
      run: npm audit --audit-level=moderate

  # 单元测试和覆盖率
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test123
          MYSQL_DATABASE: caddy_shopping_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Wait for services
      run: |
        sleep 10
        npm run test:db:setup

    - name: Run unit tests
      run: npm run test:cov
      env:
        NODE_ENV: test
        DATABASE_HOST: localhost
        DATABASE_PORT: 3306
        DATABASE_USERNAME: root
        DATABASE_PASSWORD: test123
        DATABASE_NAME: caddy_shopping_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

    - name: Coverage threshold check
      run: |
        COVERAGE=$(npm run test:coverage:check | grep -o '[0-9]*\.[0-9]*%' | head -1 | sed 's/%//')
        if (( $(echo "$COVERAGE < 70" | bc -l) )); then
          echo "Coverage $COVERAGE% is below 70% threshold"
          exit 1
        fi

  # 集成测试
  integration-test:
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    defaults:
      run:
        working-directory: ./backend
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test123
          MYSQL_DATABASE: caddy_shopping_test
        ports:
          - 3306:3306

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run database migrations
      run: npm run migration:run
      env:
        NODE_ENV: test
        DATABASE_HOST: localhost
        DATABASE_PORT: 3306
        DATABASE_USERNAME: root
        DATABASE_PASSWORD: test123
        DATABASE_NAME: caddy_shopping_test

    - name: Run integration tests
      run: npm run test:e2e
      env:
        NODE_ENV: test
        DATABASE_HOST: localhost
        DATABASE_PORT: 3306
        DATABASE_USERNAME: root
        DATABASE_PASSWORD: test123
        DATABASE_NAME: caddy_shopping_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    needs: [code-quality]
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=backend/package.json

    - name: Run OWASP dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'caddy-shopping-backend'
        path: './backend'
        format: 'JSON'

    - name: Upload OWASP results
      uses: actions/upload-artifact@v3
      with:
        name: owasp-report
        path: reports/

  # 性能测试
  performance-test:
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./backend
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test123
          MYSQL_DATABASE: caddy_shopping_perf
        ports:
          - 3306:3306

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Setup performance test environment
      run: |
        npm run migration:run
        npm run seed:performance
      env:
        NODE_ENV: test
        DATABASE_HOST: localhost
        DATABASE_PORT: 3306
        DATABASE_USERNAME: root
        DATABASE_PASSWORD: test123
        DATABASE_NAME: caddy_shopping_perf

    - name: Run performance tests
      run: npm run test:performance
      env:
        NODE_ENV: test
        DATABASE_HOST: localhost
        DATABASE_PORT: 3306
        DATABASE_USERNAME: root
        DATABASE_PASSWORD: test123
        DATABASE_NAME: caddy_shopping_perf
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: ./backend/performance-reports/

  # 构建和推送Docker镜像
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, integration-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}

  # 部署到staging环境
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # 这里添加实际的部署脚本
        # kubectl apply -f k8s/staging/
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # npm run test:smoke -- --baseUrl=${{ secrets.STAGING_URL }}

  # 部署到生产环境
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # 这里添加实际的部署脚本
        # kubectl apply -f k8s/production/
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Run smoke tests
      run: |
        echo "Running smoke tests on production..."
        # npm run test:smoke -- --baseUrl=${{ secrets.PRODUCTION_URL }}

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # 清理旧的镜像
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Delete old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}
        package-type: 'container'
        min-versions-to-keep: 5
        delete-only-untagged-versions: true