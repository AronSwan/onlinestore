export const redisMock = {
  createClient: jest.fn(() => ({
    connect: jest.fn().mockResolvedValue(undefined),
    disconnect: jest.fn().mockResolvedValue(undefined),
    isOpen: true,
    get: jest.fn().mockResolvedValue(null),
    set: jest.fn().mockResolvedValue('OK'),
    del: jest.fn().mockResolvedValue(1),
    exists: jest.fn().mockResolvedValue(0),
    keys: jest.fn().mockResolvedValue([]),
    flushdb: jest.fn().mockResolvedValue('OK'),
    ping: jest.fn().mockResolvedValue('PONG'),
    hget: jest.fn().mockResolvedValue(null),
    hset: jest.fn().mockResolvedValue(1),
    hdel: jest.fn().mockResolvedValue(1),
    hexists: jest.fn().mockResolvedValue(0),
    hgetall: jest.fn().mockResolvedValue({}),
    hkeys: jest.fn().mockResolvedValue([]),
    hvals: jest.fn().mockResolvedValue([]),
    hlen: jest.fn().mockResolvedValue(0),
    incr: jest.fn().mockResolvedValue(1),
    decr: jest.fn().mockResolvedValue(-1),
    incrby: jest.fn().mockResolvedValue(1),
    decrby: jest.fn().mockResolvedValue(-1),
    expire: jest.fn().mockResolvedValue(1),
    ttl: jest.fn().mockResolvedValue(-1),
    lpush: jest.fn().mockResolvedValue(1),
    rpush: jest.fn().mockResolvedValue(1),
    lpop: jest.fn().mockResolvedValue(null),
    rpop: jest.fn().mockResolvedValue(null),
    llen: jest.fn().mockResolvedValue(0),
    lrange: jest.fn().mockResolvedValue([]),
    ltrim: jest.fn().mockResolvedValue('OK'),
    lindex: jest.fn().mockResolvedValue(null),
    lset: jest.fn().mockResolvedValue('OK'),
    sadd: jest.fn().mockResolvedValue(1),
    srem: jest.fn().mockResolvedValue(1),
    sismember: jest.fn().mockResolvedValue(0),
    smembers: jest.fn().mockResolvedValue([]),
    scard: jest.fn().mockResolvedValue(0),
    sinter: jest.fn().mockResolvedValue([]),
    sunion: jest.fn().mockResolvedValue([]),
    sdiff: jest.fn().mockResolvedValue([]),
    zadd: jest.fn().mockResolvedValue(1),
    zrem: jest.fn().mockResolvedValue(1),
    zscore: jest.fn().mockResolvedValue(null),
    zincrby: jest.fn().mockResolvedValue(1),
    zrank: jest.fn().mockResolvedValue(null),
    zrevrank: jest.fn().mockResolvedValue(null),
    zrange: jest.fn().mockResolvedValue([]),
    zrevrange: jest.fn().mockResolvedValue([]),
    zcard: jest.fn().mockResolvedValue(0),
    zcount: jest.fn().mockResolvedValue(0),
    zrangebyscore: jest.fn().mockResolvedValue([]),
    zremrangebyscore: jest.fn().mockResolvedValue(0),
    zremrangebyrank: jest.fn().mockResolvedValue(0),
    xadd: jest.fn().mockResolvedValue('1234567891234-0'),
    xrange: jest.fn().mockResolvedValue([]),
    xrevrange: jest.fn().mockResolvedValue([]),
    xread: jest.fn().mockResolvedValue([]),
    xreadgroup: jest.fn().mockResolvedValue([]),
    xgroup: jest.fn().mockResolvedValue('OK'),
    xack: jest.fn().mockResolvedValue(1),
    xclaim: jest.fn().mockResolvedValue([]),
    xdel: jest.fn().mockResolvedValue(1),
    xtrim: jest.fn().mockResolvedValue(0),
    xlen: jest.fn().mockResolvedValue(0),
    xinfo: jest.fn().mockResolvedValue({}),
    xpending: jest.fn().mockResolvedValue([]),
    xautoclaim: jest.fn().mockResolvedValue([]),
  })),
};

export default redisMock;
