/**
 * 统一错误码定义
 * 基于 HTTP 状态码 + 业务模块 + 具体错误的三级编码体系
 * 格式: {HTTP状态码}{模块代码}{错误序号}
 *
 * 模块代码:
 * - 01: 用户模块 (User)
 * - 02: 产品模块 (Product)
 * - 03: 订单模块 (Order)
 * - 04: 支付模块 (Payment)
 * - 05: 购物车模块 (Cart)
 * - 06: 认证模块 (Auth)
 * - 07: 地址模块 (Address)
 * - 08: 系统模块 (System)
 * - 09: 第三方服务 (External)
 */

export const ERROR_CODES = {
  // ========== 通用错误 (400xxx) ==========
  VALIDATION_ERROR: '40000001',
  INVALID_PARAMETER: '40000002',
  MISSING_PARAMETER: '40000003',
  INVALID_FORMAT: '40000004',
  BUSINESS_RULE_VIOLATION: '40000005',

  // ========== 认证授权错误 (401xxx, 403xxx) ==========
  // 401 - 未认证
  UNAUTHORIZED: '40106001',
  INVALID_TOKEN: '40106002',
  TOKEN_EXPIRED: '40106003',
  TOKEN_MALFORMED: '40106004',
  LOGIN_REQUIRED: '40106005',

  // 403 - 权限不足
  FORBIDDEN: '40306001',
  PERMISSION_DENIED: '40306002',
  ROLE_INSUFFICIENT: '40306003',
  RESOURCE_ACCESS_DENIED: '40306004',
  OPERATION_NOT_ALLOWED: '40306005',

  // ========== 用户模块错误 (404xxx, 409xxx) ==========
  // 404 - 用户不存在
  USER_NOT_FOUND: '40401001',
  USER_PROFILE_NOT_FOUND: '40401002',
  USER_ADDRESS_NOT_FOUND: '40401003',

  // 409 - 用户冲突
  USER_ALREADY_EXISTS: '40901001',
  EMAIL_ALREADY_EXISTS: '40901002',
  PHONE_ALREADY_EXISTS: '40901003',
  USERNAME_ALREADY_EXISTS: '40901004',

  // 400 - 用户业务错误
  INVALID_CREDENTIALS: '40001001',
  PASSWORD_TOO_WEAK: '40001002',
  EMAIL_NOT_VERIFIED: '40001003',
  ACCOUNT_LOCKED: '40001004',
  ACCOUNT_DISABLED: '40001005',

  // ========== 产品模块错误 (404xxx, 400xxx) ==========
  // 404 - 产品不存在
  PRODUCT_NOT_FOUND: '40402001',
  PRODUCT_CATEGORY_NOT_FOUND: '40402002',
  PRODUCT_VARIANT_NOT_FOUND: '40402003',

  // 400 - 产品业务错误
  PRODUCT_OUT_OF_STOCK: '40002001',
  PRODUCT_INSUFFICIENT_STOCK: '40002002',
  INSUFFICIENT_STOCK: '40002002', // 别名
  PRODUCT_DISCONTINUED: '40002003',
  PRODUCT_PRICE_CHANGED: '40002004',
  INVALID_PRODUCT_QUANTITY: '40002005',

  // ========== 订单模块错误 (404xxx, 400xxx, 409xxx) ==========
  // 404 - 订单不存在
  ORDER_NOT_FOUND: '40403001',
  ORDER_ITEM_NOT_FOUND: '40403002',

  // 400 - 订单业务错误
  ORDER_CANNOT_BE_CANCELLED: '40003001',
  ORDER_CANCELLED: '40003001', // 别名
  ORDER_CANNOT_BE_MODIFIED: '40003002',
  ORDER_ALREADY_PAID: '40003003',
  ORDER_EXPIRED: '40003004',
  INVALID_ORDER_STATUS: '40003005',
  ORDER_AMOUNT_MISMATCH: '40003006',

  // 409 - 订单冲突
  ORDER_STATUS_CONFLICT: '40903001',
  ORDER_CONCURRENT_MODIFICATION: '40903002',

  // ========== 支付模块错误 (404xxx, 400xxx, 409xxx) ==========
  // 404 - 支付不存在
  PAYMENT_NOT_FOUND: '40404001',
  PAYMENT_METHOD_NOT_FOUND: '40404002',

  // 400 - 支付业务错误
  PAYMENT_FAILED: '40004001',
  PAYMENT_AMOUNT_INVALID: '40004002',
  PAYMENT_METHOD_DISABLED: '40004003',
  PAYMENT_EXPIRED: '40004004',
  PAYMENT_TIMEOUT: '40004004', // 别名
  PAYMENT_ALREADY_PROCESSED: '40004005',
  REFUND_AMOUNT_EXCEEDS: '40004006',
  REFUND_NOT_ALLOWED: '40004007',
  REFUND_FAILED: '40004008',

  // 409 - 支付冲突
  PAYMENT_DUPLICATE: '40904001',
  PAYMENT_STATUS_CONFLICT: '40904002',

  // ========== 购物车模块错误 (404xxx, 400xxx) ==========
  // 404 - 购物车不存在
  CART_NOT_FOUND: '40405001',
  CART_ITEM_NOT_FOUND: '40405002',

  // 400 - 购物车业务错误
  CART_EMPTY: '40005001',
  CART_ITEM_QUANTITY_INVALID: '40005002',
  CART_ITEM_PRICE_CHANGED: '40005003',
  CART_EXPIRED: '40005004',

  // ========== 地址模块错误 (404xxx, 400xxx) ==========
  // 404 - 地址不存在
  ADDRESS_NOT_FOUND: '40407001',

  // 400 - 地址业务错误
  INVALID_ADDRESS_FORMAT: '40007001',
  ADDRESS_OUT_OF_DELIVERY_RANGE: '40007002',

  // ========== 系统错误 (500xxx) ==========
  INTERNAL_SERVER_ERROR: '50008001',
  DATABASE_ERROR: '50008002',
  CACHE_ERROR: '50008003',
  NETWORK_ERROR: '50008004',
  SERVICE_UNAVAILABLE: '50308001',
  TIMEOUT_ERROR: '50408001',

  // ========== 第三方服务错误 (502xxx, 503xxx) ==========
  EXTERNAL_SERVICE_ERROR: '50209001',
  PAYMENT_GATEWAY_ERROR: '50209002',
  SMS_SERVICE_ERROR: '50209003',
  EMAIL_SERVICE_ERROR: '50209004',
  LOGISTICS_SERVICE_ERROR: '50209005',

  EXTERNAL_SERVICE_UNAVAILABLE: '50309001',
  PAYMENT_GATEWAY_UNAVAILABLE: '50309002',
  SMS_SERVICE_UNAVAILABLE: '50309003',
  EMAIL_SERVICE_UNAVAILABLE: '50309004',

  // ========== 限流和配额错误 (429xxx) ==========
  RATE_LIMIT_EXCEEDED: '42900001',
  API_QUOTA_EXCEEDED: '42900002',
  CONCURRENT_LIMIT_EXCEEDED: '42900003',
  REQUEST_TOO_FREQUENT: '42900004',
} as const;

/**
 * 错误码类型定义
 */
export type ErrorCode = (typeof ERROR_CODES)[keyof typeof ERROR_CODES];

/**
 * 错误码到HTTP状态码的映射
 */
export const ERROR_CODE_TO_HTTP_STATUS: Record<string, number> = {
  // 400 错误
  [ERROR_CODES.VALIDATION_ERROR]: 400,
  [ERROR_CODES.INVALID_PARAMETER]: 400,
  [ERROR_CODES.MISSING_PARAMETER]: 400,
  [ERROR_CODES.INVALID_FORMAT]: 400,
  [ERROR_CODES.BUSINESS_RULE_VIOLATION]: 400,

  // 401 错误
  [ERROR_CODES.UNAUTHORIZED]: 401,
  [ERROR_CODES.INVALID_TOKEN]: 401,
  [ERROR_CODES.TOKEN_EXPIRED]: 401,
  [ERROR_CODES.TOKEN_MALFORMED]: 401,
  [ERROR_CODES.LOGIN_REQUIRED]: 401,

  // 403 错误
  [ERROR_CODES.FORBIDDEN]: 403,
  [ERROR_CODES.PERMISSION_DENIED]: 403,
  [ERROR_CODES.ROLE_INSUFFICIENT]: 403,
  [ERROR_CODES.RESOURCE_ACCESS_DENIED]: 403,
  [ERROR_CODES.OPERATION_NOT_ALLOWED]: 403,

  // 404 错误
  [ERROR_CODES.USER_NOT_FOUND]: 404,
  [ERROR_CODES.PRODUCT_NOT_FOUND]: 404,
  [ERROR_CODES.ORDER_NOT_FOUND]: 404,
  [ERROR_CODES.PAYMENT_NOT_FOUND]: 404,
  [ERROR_CODES.CART_NOT_FOUND]: 404,
  [ERROR_CODES.ADDRESS_NOT_FOUND]: 404,

  // 409 错误
  [ERROR_CODES.USER_ALREADY_EXISTS]: 409,
  [ERROR_CODES.EMAIL_ALREADY_EXISTS]: 409,
  [ERROR_CODES.ORDER_STATUS_CONFLICT]: 409,
  [ERROR_CODES.PAYMENT_DUPLICATE]: 409,

  // 429 错误
  [ERROR_CODES.RATE_LIMIT_EXCEEDED]: 429,
  [ERROR_CODES.API_QUOTA_EXCEEDED]: 429,
  [ERROR_CODES.CONCURRENT_LIMIT_EXCEEDED]: 429,
  [ERROR_CODES.REQUEST_TOO_FREQUENT]: 429,

  // 500 错误
  [ERROR_CODES.INTERNAL_SERVER_ERROR]: 500,
  [ERROR_CODES.DATABASE_ERROR]: 500,
  [ERROR_CODES.CACHE_ERROR]: 500,
  [ERROR_CODES.NETWORK_ERROR]: 500,

  // 502 错误
  [ERROR_CODES.EXTERNAL_SERVICE_ERROR]: 502,
  [ERROR_CODES.PAYMENT_GATEWAY_ERROR]: 502,

  // 503 错误
  [ERROR_CODES.SERVICE_UNAVAILABLE]: 503,
  [ERROR_CODES.EXTERNAL_SERVICE_UNAVAILABLE]: 503,

  // 504 错误
  [ERROR_CODES.TIMEOUT_ERROR]: 504,
};

/**
 * 获取错误码对应的HTTP状态码
 */
export function getHttpStatusFromErrorCode(errorCode: string): number {
  return ERROR_CODE_TO_HTTP_STATUS[errorCode] || 500;
}

/**
 * 错误码分类
 */
export const ERROR_CATEGORIES = {
  VALIDATION: 'validation',
  AUTHENTICATION: 'authentication',
  AUTHORIZATION: 'authorization',
  BUSINESS: 'business',
  SYSTEM: 'system',
  EXTERNAL: 'external',
  RATE_LIMIT: 'rate_limit',
} as const;

/**
 * 根据错误码获取错误分类
 */
export function getErrorCategory(errorCode: string): string {
  const code = errorCode.substring(0, 3);

  switch (code) {
    case '400':
      if (errorCode.includes('06')) return ERROR_CATEGORIES.AUTHENTICATION;
      return ERROR_CATEGORIES.VALIDATION;
    case '401':
      return ERROR_CATEGORIES.AUTHENTICATION;
    case '403':
      return ERROR_CATEGORIES.AUTHORIZATION;
    case '404':
    case '409':
      return ERROR_CATEGORIES.BUSINESS;
    case '429':
      return ERROR_CATEGORIES.RATE_LIMIT;
    case '500':
    case '504':
      return ERROR_CATEGORIES.SYSTEM;
    case '502':
    case '503':
      return ERROR_CATEGORIES.EXTERNAL;
    default:
      return ERROR_CATEGORIES.SYSTEM;
  }
}
