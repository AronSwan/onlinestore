# 后端服务优化版 Dockerfile
# 针对构建速度和镜像大小进行优化

# 构建阶段：安装依赖并进行编译
FROM node:20-alpine AS builder

# 安装构建依赖
RUN apk add --no-cache python3 make g++

# 设置工作目录
WORKDIR /app

# 复制依赖文件
# 先复制package文件，利用Docker层缓存
COPY package*.json ./
COPY tsconfig*.json ./
COPY nest-cli.json ./

# 配置npm使用国内镜像源加速
RUN npm config set registry https://registry.npmmirror.com

# 安装依赖（使用npm install处理不同步的锁文件）
# 仅安装生产依赖
RUN npm install --omit=dev && npm cache clean --force

# 创建一个临时节点安装devDependencies
FROM node:20-alpine AS dev-builder

RUN apk add --no-cache python3 make g++
WORKDIR /app

# 复制依赖文件
COPY package*.json ./
COPY tsconfig*.json ./
COPY nest-cli.json ./

# 配置npm使用国内镜像源加速
RUN npm config set registry https://registry.npmmirror.com

# 安装全部依赖
RUN npm install && npm cache clean --force

# 复制源代码
COPY src/ ./src/

# 构建应用
RUN npm run build

# 运行时阶段：精简镜像
FROM node:20-alpine AS runtime

# 安装运行时依赖
RUN apk add --no-cache dumb-init curl

# 创建非root用户
RUN addgroup -g 1001 -S nodejs && adduser -S nestjs -u 1001

# 设置工作目录
WORKDIR /app

# 从生产依赖阶段复制node_modules
COPY --from=builder --chown=nestjs:nodejs /app/node_modules ./node_modules

# 从构建阶段复制构建产物
COPY --from=dev-builder --chown=nestjs:nodejs /app/dist ./dist

# 复制package文件
COPY --from=dev-builder --chown=nestjs:nodejs /app/package*.json ./

# 创建必要的目录
RUN mkdir -p /app/logs /app/uploads /app/data && chown -R nestjs:nodejs /app

# 切换到非root用户
USER nestjs

# 暴露端口
EXPOSE 3000

# 设置健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# 使用dumb-init作为PID 1
ENTRYPOINT ["dumb-init", "--"]

# 启动应用
CMD ["node", "dist/src/main.js"]