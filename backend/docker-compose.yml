# 后端优化Docker配置文件
# 集成所有服务，使用OpenObserve作为统一监控方案
services:
  # 后端主服务
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shopping-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-3000}
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - EMAIL_VERIFIER_API_URL=http://email-verifier:8080
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost}
      # OpenObserve配置
      - OPENOBSERVE_URL=http://openobserve:5080
      - OPENOBSERVE_USERNAME=${ZO_ROOT_USER_EMAIL}
      - OPENOBSERVE_PASSWORD=${ZO_ROOT_USER_PASSWORD}
      # RedPanda配置
      - REDPANDA_BROKERS=redpanda:9092
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    networks:
      - backend-network
    depends_on:
      - postgres
      - redis
      - email-verifier
      - openobserve
      - redpanda
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: backend-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-shopping_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
      - ./logs/postgres:/var/log/postgresql
    networks:
      - backend-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-shopping_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: backend-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Email Verifier 微服务
  email-verifier:
    build:
      context: ./docker/email-verifier
      dockerfile: Dockerfile
    container_name: backend-email-verifier
    restart: unless-stopped
    environment:
      - PORT=8080
      - HOST=0.0.0.0
      - ENABLE_SMTP_CHECK=false
      - AUTO_UPDATE_DISPOSABLE=true
      - LOG_LEVEL=info
    volumes:
      - email_verifier_data:/app/data
    networks:
      - backend-network
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # OpenObserve 统一日志和指标收集
  openobserve:
    image: public.ecr.aws/zinclabs/openobserve:latest
    container_name: backend-openobserve
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    environment:
      - ZO_ROOT_USER_EMAIL=${ZO_ROOT_USER_EMAIL}
      - ZO_ROOT_USER_PASSWORD=${ZO_ROOT_USER_PASSWORD}
      - ZO_DATA_DIR=${ZO_DATA_DIR:-/data}
      - ZO_META_DIR=${ZO_META_DIR:-/meta}
      - ZO_FILE_DATA_DIR=${ZO_FILE_DATA_DIR:-/files}
      - ZO_COMPRESSION=${ZO_COMPRESSION:-gzip}
      - ZO_MEMORY_CACHE_ENABLED=${ZO_MEMORY_CACHE_ENABLED:-true}
      - ZO_MEMORY_CACHE_MAX_SIZE=${ZO_MEMORY_CACHE_MAX_SIZE:-2048}
      - ZO_METRICS_ENABLED=${ZO_METRICS_ENABLED:-true}
      - ZO_TRACING_ENABLED=${ZO_TRACING_ENABLED:-true}
      - ZO_DEFAULT_ORG=${ZO_DEFAULT_ORG:-default}
      - ZO_DISABLE_LOGIN=${ZO_DISABLE_LOGIN:-false}
      - ZO_AUTH_DISABLED=${ZO_AUTH_DISABLED:-false}
      - ZO_COMPRESSION_LEVEL=${ZO_COMPRESSION_LEVEL:-6}
      - ZO_QUERY_CACHE_ENABLED=${ZO_QUERY_CACHE_ENABLED:-true}
      - ZO_QUERY_CACHE_TTL=${ZO_QUERY_CACHE_TTL:-600}
      - ZO_MAX_FILE_SIZE=${ZO_MAX_FILE_SIZE:-268435456}
      - ZO_MEMORY_MERGE_INTERVAL=${ZO_MEMORY_MERGE_INTERVAL:-300}
      - ZO_DATA_RETENTION_DAYS=${ZO_DATA_RETENTION_DAYS:-90}
      - ZO_WAL_MEMORY_MODE=${ZO_WAL_MEMORY_MODE:-true}
      - ZO_WAL_MEMORY_MAX_SIZE=${ZO_WAL_MEMORY_MAX_SIZE:-1073741824}
    volumes:
      - openobserve_data:/data
      - openobserve_meta:/meta
      - openobserve_files:/files
      - ./logs/openobserve:/var/log/openobserve
    ports:
      - "5080:5080"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5080/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # RedPanda 消息队列
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v24.2.9
    container_name: backend-redpanda
    restart: unless-stopped
    command:
      - redpanda
      - start
      - --overprovisioned
      - --smp=1
      - --memory=1G
      - --reserve-memory=0M
      - --node-id=0
      - --check=false
      - --kafka-addr=PLAINTEXT://0.0.0.0:9092
      - --advertise-kafka-addr=PLAINTEXT://redpanda:9092
      - --rpc-addr=0.0.0.0:33145
      - --advertise-rpc-addr=localhost:33145
    ports:
      - "9092:9092"
      - "9644:9644"
    networks:
      - backend-network
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9644/v1/status/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # RedPanda Console 管理界面
  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:v2.6.1
    container_name: backend-redpanda-console
    restart: unless-stopped
    environment:
      - KAFKA_BROKERS=redpanda:9092
    ports:
      - "8081:8080"
    networks:
      - backend-network
    depends_on:
      - redpanda
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Node Exporter 系统监控
  node-exporter:
    image: prom/node-exporter:latest
    container_name: backend-node-exporter
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.cpu.info'
      - '--collector.meminfo'
      - '--collector.diskstats'
      - '--collector.netdev'
      - '--collector.filesystem'
      - '--no-collector.ipvs'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - backend-network
    ports:
      - "9100:9100"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 支付服务 Gopay 微服务
  gopay-service:
    build:
      context: ./src/payment/microservices/gopay-service
      dockerfile: Dockerfile
    container_name: backend-gopay-service
    restart: unless-stopped
    environment:
      - PORT=8080
      - ALIPAY_APP_ID=${ALIPAY_APP_ID}
      - ALIPAY_PRIVATE_KEY=${ALIPAY_PRIVATE_KEY}
      - ALIPAY_PUBLIC_KEY=${ALIPAY_PUBLIC_KEY}
      - ALIPAY_SANDBOX=${ALIPAY_SANDBOX:-true}
      - WECHAT_APP_ID=${WECHAT_APP_ID}
      - WECHAT_MCH_ID=${WECHAT_MCH_ID}
      - WECHAT_API_KEY=${WECHAT_API_KEY}
      - WECHAT_SANDBOX=${WECHAT_SANDBOX:-true}
      # 监控配置 - 集成到OpenObserve
      - OPENOBSERVE_URL=http://openobserve:5080
      - METRICS_ENABLED=true
    volumes:
      - ./src/payment/microservices/gopay-service/.env:/root/.env:ro
      - ./logs/payment:/var/log/gopay
    networks:
      - backend-network
    ports:
      - "8082:8080"
    depends_on:
      - redis
      - openobserve
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - payment

  # 加密货币支付网关
  crypto-gateway:
    image: nginx:alpine
    container_name: backend-crypto-gateway
    restart: unless-stopped
    volumes:
      - ./src/payment/crypto-gateway-mock.conf:/etc/nginx/conf.d/default.conf:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - backend-network
    ports:
      - "8083:80"
    profiles:
      - payment

  # 可选：TiDB 数据库集群
  tidb-pd:
    image: pingcap/pd:v7.5.0
    container_name: backend-tidb-pd
    restart: unless-stopped
    command:
      - --name=pd
      - --client-urls=http://0.0.0.0:2379
      - --peer-urls=http://0.0.0.0:2380
      - --advertise-client-urls=http://tidb-pd:2379
      - --advertise-peer-urls=http://tidb-pd:2380
      - --initial-cluster=pd=http://tidb-pd:2380
      - --data-dir=/data/pd
    ports:
      - "2379:2379"
    volumes:
      - tidb_pd_data:/data
    networks:
      - backend-network
    profiles:
      - tidb

  tidb-tikv:
    image: pingcap/tikv:v7.5.0
    container_name: backend-tidb-tikv
    restart: unless-stopped
    command:
      - --addr=0.0.0.0:20160
      - --advertise-addr=tidb-tikv:20160
      - --data-dir=/data/tikv
      - --pd=tidb-pd:2379
    depends_on:
      - tidb-pd
    networks:
      - backend-network
    volumes:
      - tidb_tikv_data:/data
    profiles:
      - tidb

  tidb:
    image: pingcap/tidb:v7.5.0
    container_name: backend-tidb
    restart: unless-stopped
    command:
      - --store=tikv
      - --path=tidb-pd:2379
      - --advertise-address=tidb
      - -L
      - warn
    ports:
      - "4000:4000"
      - "10080:10080"
    depends_on:
      - tidb-pd
      - tidb-tikv
    networks:
      - backend-network
    profiles:
      - tidb

# 网络配置 - 直接定义在主配置文件中
networks:
  backend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1

# 卷配置 - 直接定义在主配置文件中
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  email_verifier_data:
    driver: local
  openobserve_data:
    driver: local
  openobserve_meta:
    driver: local
  openobserve_files:
    driver: local
  redpanda_data:
    driver: local
  tidb_pd_data:
    driver: local
  tidb_tikv_data:
    driver: local