{"numFailedTestSuites":12,"numFailedTests":23,"numPassedTestSuites":31,"numPassedTests":641,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":5,"numTodoTests":0,"numTotalTestSuites":43,"numTotalTests":664,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1760120561136,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["QueryBus","execute"],"duration":35,"failureDetails":[],"failureMessages":[],"fullName":"QueryBus execute 应该成功执行查询","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"应该成功执行查询"},{"ancestorTitles":["QueryBus","execute"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"QueryBus execute 应该在没有注册处理器时返回错误","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"应该在没有注册处理器时返回错误"},{"ancestorTitles":["QueryBus","execute"],"duration":47,"failureDetails":[],"failureMessages":[],"fullName":"QueryBus execute 应该正确处理处理器异常","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"应该正确处理处理器异常"},{"ancestorTitles":["QueryBus","executeWithCache"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"QueryBus executeWithCache 应该使用缓存执行查询","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"应该使用缓存执行查询"},{"ancestorTitles":["QueryBus","executeWithCache"],"duration":1153,"failureDetails":[],"failureMessages":[],"fullName":"QueryBus executeWithCache 应该在缓存过期时重新执行查询","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"应该在缓存过期时重新执行查询"},{"ancestorTitles":["QueryBus","middlewares"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"QueryBus middlewares 应该在执行查询时调用中间件","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"应该在执行查询时调用中间件"},{"ancestorTitles":["QueryBus","middlewares"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"QueryBus middlewares 应该返回添加的中间件列表","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"应该返回添加的中间件列表"},{"ancestorTitles":["QueryBus","prefetch"],"duration":24,"failureDetails":[],"failureMessages":[],"fullName":"QueryBus prefetch 应该预加载查询","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该预加载查询"},{"ancestorTitles":["QueryBus","invalidateCache"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"QueryBus invalidateCache 应该使查询缓存失效","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"应该使查询缓存失效"},{"ancestorTitles":["QueryBus","register"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"QueryBus register 应该成功注册查询处理器","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该成功注册查询处理器"},{"ancestorTitles":["QueryBus","register"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"QueryBus register 应该覆盖已注册的处理器","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该覆盖已注册的处理器"},{"ancestorTitles":["QueryBus","setQueryCache"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"QueryBus setQueryCache 应该设置查询缓存服务","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该设置查询缓存服务"},{"ancestorTitles":["QueryBus","getCacheStats"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"QueryBus getCacheStats 应该返回缓存统计信息","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"应该返回缓存统计信息"},{"ancestorTitles":["QueryBus","SWR 交互"],"duration":1118,"failureDetails":[],"failureMessages":[],"fullName":"QueryBus SWR 交互 缓存过期时应返回旧值并触发后台刷新","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"缓存过期时应返回旧值并触发后台刷新"},{"ancestorTitles":["QueryBus","SWR 交互"],"duration":14,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeUndefined\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m\"users:detail\"\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeUndefined\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m\"users:detail\"\u001b[39m\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\cqrs\\bus\\query.bus.spec.ts:369:40)\n    at Promise.then.completed (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"QueryBus SWR 交互 SWR 标签构建：cache_key_prefix 与 domain 由环境变量控制","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"failed","title":"SWR 标签构建：cache_key_prefix 与 domain 由环境变量控制"},{"ancestorTitles":["QueryBus","SWR 交互"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"QueryBus SWR 交互 prefetch 应通过 SWR 获取并缓存","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"prefetch 应通过 SWR 获取并缓存"},{"ancestorTitles":["QueryBus","cleanupExpiredCache"],"duration":1111,"failureDetails":[],"failureMessages":[],"fullName":"QueryBus cleanupExpiredCache 应该清理过期的缓存","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该清理过期的缓存"}],"endTime":1760120567669,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueryBus › SWR 交互 › SWR 标签构建：cache_key_prefix 与 domain 由环境变量控制\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeUndefined\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m\"users:detail\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 367 |\u001b[39m       process\u001b[33m.\u001b[39menv\u001b[33m.\u001b[39m\u001b[33mCQRS_SWR_ENABLE_DOMAIN_LABEL\u001b[39m \u001b[33m=\u001b[39m \u001b[32m'0'\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 368 |\u001b[39m       \u001b[36mconst\u001b[39m labels2 \u001b[33m=\u001b[39m qb\u001b[33m.\u001b[39mbuildSWRLabels(\u001b[32m'GetUsersQuery'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'GetUsersHandler'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'users:detail:1'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 369 |\u001b[39m       expect(labels2\u001b[33m.\u001b[39mcache_key_prefix)\u001b[33m.\u001b[39mtoBeUndefined()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 370 |\u001b[39m       expect(labels2\u001b[33m.\u001b[39mdomain)\u001b[33m.\u001b[39mtoBeUndefined()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 371 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 372 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mcqrs/bus/query.bus.spec.ts\u001b[39m\u001b[0m\u001b[2m:369:40)\u001b[22m\u001b[2m\u001b[22m\n","name":"D:\\onlinestore\\backend\\src\\cqrs\\bus\\query.bus.spec.ts","startTime":1760120561713,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["ProductsService","Service Initialization"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Service Initialization should be defined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be defined"},{"ancestorTitles":["ProductsService","Service Initialization"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Service Initialization should have all dependencies injected","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should have all dependencies injected"},{"ancestorTitles":["ProductsService","Create Product"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Create Product should successfully create a new product","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should successfully create a new product"},{"ancestorTitles":["ProductsService","Create Product"],"duration":89,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Create Product should throw NotFoundException when category does not exist","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw NotFoundException when category does not exist"},{"ancestorTitles":["ProductsService","Create Product"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Create Product should handle cache deletion errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle cache deletion errors gracefully"},{"ancestorTitles":["ProductsService","Create Product"],"duration":69,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Create Product should handle event publishing errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle event publishing errors gracefully"},{"ancestorTitles":["ProductsService","Find Product By ID"],"duration":31,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Find Product By ID should return cached product when available","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return cached product when available"},{"ancestorTitles":["ProductsService","Find Product By ID"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Find Product By ID should fetch from database when not cached","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should fetch from database when not cached"},{"ancestorTitles":["ProductsService","Find Product By ID"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Find Product By ID should return null when product does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null when product does not exist"},{"ancestorTitles":["ProductsService","Search Products"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Search Products should use search engine when keyword is provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use search engine when keyword is provided"},{"ancestorTitles":["ProductsService","Search Products"],"duration":33,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Search Products should fallback to database search when search engine fails","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should fallback to database search when search engine fails"},{"ancestorTitles":["ProductsService","Search Products"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Search Products should use database search when no keyword is provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use database search when no keyword is provided"},{"ancestorTitles":["ProductsService","Search Products"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Search Products should return empty result when search finds no products","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty result when search finds no products"},{"ancestorTitles":["ProductsService","Get Popular Products"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Get Popular Products should return cached popular products when available","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return cached popular products when available"},{"ancestorTitles":["ProductsService","Get Popular Products"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Get Popular Products should fetch from database when not cached","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should fetch from database when not cached"},{"ancestorTitles":["ProductsService","Update Product"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Update Product should successfully update product","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should successfully update product"},{"ancestorTitles":["ProductsService","Update Product"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Update Product should throw NotFoundException when product does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw NotFoundException when product does not exist"},{"ancestorTitles":["ProductsService","Update Product"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Update Product should throw NotFoundException when new category does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw NotFoundException when new category does not exist"},{"ancestorTitles":["ProductsService","Delete Product"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Delete Product should successfully delete product","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should successfully delete product"},{"ancestorTitles":["ProductsService","Delete Product"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Delete Product should throw NotFoundException when product does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw NotFoundException when product does not exist"},{"ancestorTitles":["ProductsService","Increment Views"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Increment Views should successfully increment product views","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should successfully increment product views"},{"ancestorTitles":["ProductsService","Update Stock"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Update Stock should successfully update product stock","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should successfully update product stock"},{"ancestorTitles":["ProductsService","Get Statistics"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Get Statistics should return product statistics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return product statistics"},{"ancestorTitles":["ProductsService","Find All Products"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Find All Products should return cached products when available","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return cached products when available"},{"ancestorTitles":["ProductsService","Find All Products"],"duration":10,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalled\u001b[2m()\u001b[22m\n\nExpected number of calls: >= \u001b[32m1\u001b[39m\nReceived number of calls:    \u001b[31m0\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalled\u001b[2m()\u001b[22m\n\nExpected number of calls: >= \u001b[32m1\u001b[39m\nReceived number of calls:    \u001b[31m0\u001b[39m\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\products\\products.service.spec.ts:696:48)"],"fullName":"ProductsService Find All Products should fetch from database when not cached","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should fetch from database when not cached"},{"ancestorTitles":["ProductsService","Find By Category"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Find By Category should return cached products when available","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return cached products when available"},{"ancestorTitles":["ProductsService","Find By Category"],"duration":14,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalled\u001b[2m()\u001b[22m\n\nExpected number of calls: >= \u001b[32m1\u001b[39m\nReceived number of calls:    \u001b[31m0\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalled\u001b[2m()\u001b[22m\n\nExpected number of calls: >= \u001b[32m1\u001b[39m\nReceived number of calls:    \u001b[31m0\u001b[39m\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\products\\products.service.spec.ts:737:40)"],"fullName":"ProductsService Find By Category should fetch from database when not cached","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should fetch from database when not cached"},{"ancestorTitles":["ProductsService","Get Categories"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Get Categories should return cached categories when available","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return cached categories when available"},{"ancestorTitles":["ProductsService","Get Categories"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Get Categories should fetch from database when not cached","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should fetch from database when not cached"},{"ancestorTitles":["ProductsService","Reindex All Products"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Reindex All Products should successfully reindex all products","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should successfully reindex all products"},{"ancestorTitles":["ProductsService","Reindex All Products"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Reindex All Products should throw error when reindexing fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when reindexing fails"},{"ancestorTitles":["ProductsService","Get Search Engine Status"],"duration":22,"failureDetails":[{"matcherResult":{"actual":{"status":"healthy","uptime":0},"expected":{"status":"healthy","uptime":3600},"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  - 1\u001b[39m\n\u001b[31m+ Received  + 1\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"status\": \"healthy\",\u001b[22m\n\u001b[32m-   \"uptime\": 3600,\u001b[39m\n\u001b[31m+   \"uptime\": 0,\u001b[39m\n\u001b[2m  }\u001b[22m","name":"toEqual","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  - 1\u001b[39m\n\u001b[31m+ Received  + 1\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"status\": \"healthy\",\u001b[22m\n\u001b[32m-   \"uptime\": 3600,\u001b[39m\n\u001b[31m+   \"uptime\": 0,\u001b[39m\n\u001b[2m  }\u001b[22m\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\products\\products.service.spec.ts:835:22)"],"fullName":"ProductsService Get Search Engine Status should return search engine status","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return search engine status"},{"ancestorTitles":["ProductsService","Get Search Engine Status"],"duration":48,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected substring: \u001b[32m\"Status error\"\u001b[39m\nReceived message:   \u001b[31m\"\"\u001b[39m\n\n    \u001b[0m \u001b[90m 877 |\u001b[39m       console\u001b[33m.\u001b[39merror(\u001b[32m'获取搜索引擎状态失败:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\n     \u001b[90m 878 |\u001b[39m       \u001b[90m// 测试期望为抛出 Error()，不带特定消息\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 879 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m()\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 880 |\u001b[39m     }\n     \u001b[90m 881 |\u001b[39m   }\n     \u001b[90m 882 |\u001b[39m\u001b[0m\n\n      \u001b[2mat ProductsService.getSearchEngineStatus (\u001b[22msrc/products/products.service.ts\u001b[2m:879:13)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/products/products.service.spec.ts\u001b[2m:842:7)\u001b[22m","pass":false},"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected substring: \u001b[32m\"Status error\"\u001b[39m\nReceived message:   \u001b[31m\"\"\u001b[39m\n\n    \u001b[0m \u001b[90m 877 |\u001b[39m       console\u001b[33m.\u001b[39merror(\u001b[32m'获取搜索引擎状态失败:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\n     \u001b[90m 878 |\u001b[39m       \u001b[90m// 测试期望为抛出 Error()，不带特定消息\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 879 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m()\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 880 |\u001b[39m     }\n     \u001b[90m 881 |\u001b[39m   }\n     \u001b[90m 882 |\u001b[39m\u001b[0m\n\n      \u001b[2mat ProductsService.getSearchEngineStatus (\u001b[22msrc/products/products.service.ts\u001b[2m:879:13)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/products/products.service.spec.ts\u001b[2m:842:7)\u001b[22m"}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected substring: \u001b[32m\"Status error\"\u001b[39m\nReceived message:   \u001b[31m\"\"\u001b[39m\n\n    \u001b[0m \u001b[90m 877 |\u001b[39m       console\u001b[33m.\u001b[39merror(\u001b[32m'获取搜索引擎状态失败:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\n     \u001b[90m 878 |\u001b[39m       \u001b[90m// 测试期望为抛出 Error()，不带特定消息\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 879 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m()\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 880 |\u001b[39m     }\n     \u001b[90m 881 |\u001b[39m   }\n     \u001b[90m 882 |\u001b[39m\u001b[0m\n\n      \u001b[2mat ProductsService.getSearchEngineStatus (\u001b[22msrc/products/products.service.ts\u001b[2m:879:13)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/products/products.service.spec.ts\u001b[2m:842:7)\u001b[22m\n    at Object.toThrow (D:\\onlinestore\\backend\\node_modules\\expect\\build\\index.js:218:22)\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\products\\products.service.spec.ts:842:61)\n    at Promise.then.completed (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"ProductsService Get Search Engine Status should throw error when getting status fails","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw error when getting status fails"},{"ancestorTitles":["ProductsService","Integration Scenarios"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Integration Scenarios should handle complete product lifecycle","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle complete product lifecycle"},{"ancestorTitles":["ProductsService","Integration Scenarios"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Integration Scenarios should handle cache invalidation across operations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle cache invalidation across operations"},{"ancestorTitles":["ProductsService","Error Handling"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Error Handling should handle cache errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle cache errors gracefully"},{"ancestorTitles":["ProductsService","Error Handling"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Error Handling should handle database errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle database errors gracefully"},{"ancestorTitles":["ProductsService","Error Handling"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Error Handling should handle search engine errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle search engine errors gracefully"},{"ancestorTitles":["ProductsService","Performance Monitoring"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Performance Monitoring should record cache hit metrics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record cache hit metrics"},{"ancestorTitles":["ProductsService","Performance Monitoring"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Performance Monitoring should record cache miss metrics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record cache miss metrics"},{"ancestorTitles":["ProductsService","Performance Monitoring"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"ProductsService Performance Monitoring should record database query metrics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record database query metrics"}],"endTime":1760120570632,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mProductsService › Find All Products › should fetch from database when not cached\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalled\u001b[2m()\u001b[22m\n\n    Expected number of calls: >= \u001b[32m1\u001b[39m\n    Received number of calls:    \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 694 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 695 |\u001b[39m       expect(result)\u001b[33m.\u001b[39mtoEqual({ products\u001b[33m:\u001b[39m [mockProduct]\u001b[33m,\u001b[39m total\u001b[33m:\u001b[39m \u001b[35m1\u001b[39m })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 696 |\u001b[39m       expect(mockQueryBuilder\u001b[33m.\u001b[39mgetManyAndCount)\u001b[33m.\u001b[39mtoHaveBeenCalled()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 697 |\u001b[39m       expect(mockCacheManager\u001b[33m.\u001b[39m\u001b[36mset\u001b[39m)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[22m\n\u001b[2m     \u001b[90m 698 |\u001b[39m         \u001b[32m'caddy_shopping:products:list:1:20:测试'\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 699 |\u001b[39m         { products\u001b[33m:\u001b[39m [mockProduct]\u001b[33m,\u001b[39m total\u001b[33m:\u001b[39m \u001b[35m1\u001b[39m }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mproducts/products.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:696:48)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mProductsService › Find By Category › should fetch from database when not cached\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalled\u001b[2m()\u001b[22m\n\n    Expected number of calls: >= \u001b[32m1\u001b[39m\n    Received number of calls:    \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 735 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 736 |\u001b[39m       expect(result)\u001b[33m.\u001b[39mtoEqual([mockProduct])\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 737 |\u001b[39m       expect(mockQueryBuilder\u001b[33m.\u001b[39mgetMany)\u001b[33m.\u001b[39mtoHaveBeenCalled()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 738 |\u001b[39m       expect(mockCacheManager\u001b[33m.\u001b[39m\u001b[36mset\u001b[39m)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[22m\n\u001b[2m     \u001b[90m 739 |\u001b[39m         \u001b[32m'caddy_shopping:products:category:测试分类:10'\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 740 |\u001b[39m         [mockProduct]\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mproducts/products.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:737:40)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mProductsService › Get Search Engine Status › should return search engine status\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    \u001b[32m- Expected  - 1\u001b[39m\n    \u001b[31m+ Received  + 1\u001b[39m\n\n    \u001b[2m  Object {\u001b[22m\n    \u001b[2m    \"status\": \"healthy\",\u001b[22m\n    \u001b[32m-   \"uptime\": 3600,\u001b[39m\n    \u001b[31m+   \"uptime\": 0,\u001b[39m\n    \u001b[2m  }\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 833 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m service\u001b[33m.\u001b[39mgetSearchEngineStatus()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 834 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 835 |\u001b[39m       expect(result)\u001b[33m.\u001b[39mtoEqual(status)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 836 |\u001b[39m       expect(mockSearchManagerService\u001b[33m.\u001b[39mgetStatus)\u001b[33m.\u001b[39mtoHaveBeenCalled()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 837 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 838 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mproducts/products.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:835:22)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mProductsService › Get Search Engine Status › should throw error when getting status fails\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected substring: \u001b[32m\"Status error\"\u001b[39m\n    Received message:   \u001b[31m\"\"\u001b[39m\n\n        \u001b[0m \u001b[90m 877 |\u001b[39m       console\u001b[33m.\u001b[39merror(\u001b[32m'获取搜索引擎状态失败:'\u001b[39m\u001b[33m,\u001b[39m error)\u001b[33m;\u001b[39m\n         \u001b[90m 878 |\u001b[39m       \u001b[90m// 测试期望为抛出 Error()，不带特定消息\u001b[39m\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 879 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m()\u001b[33m;\u001b[39m\n         \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 880 |\u001b[39m     }\n         \u001b[90m 881 |\u001b[39m   }\n         \u001b[90m 882 |\u001b[39m\u001b[0m\n\n          \u001b[2mat ProductsService.getSearchEngineStatus (\u001b[22msrc/products/products.service.ts\u001b[2m:879:13)\u001b[22m\n          \u001b[2mat Object.<anonymous> (\u001b[22msrc/products/products.service.spec.ts\u001b[2m:842:7)\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 840 |\u001b[39m       mockSearchManagerService\u001b[33m.\u001b[39mgetStatus\u001b[33m.\u001b[39mmockRejectedValue(\u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m'Status error'\u001b[39m))\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 841 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 842 |\u001b[39m       \u001b[36mawait\u001b[39m expect(service\u001b[33m.\u001b[39mgetSearchEngineStatus())\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[32m'Status error'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 843 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 844 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 845 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toThrow (\u001b[22m\u001b[2m../node_modules/expect/build/index.js\u001b[2m:218:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mproducts/products.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:842:61)\u001b[22m\u001b[2m\u001b[22m\n","name":"D:\\onlinestore\\backend\\src\\products\\products.service.spec.ts","startTime":1760120567726,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["PaymentService","基础功能测试"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"PaymentService 基础功能测试 should be defined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be defined"},{"ancestorTitles":["PaymentService","基础功能测试"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"PaymentService 基础功能测试 should get payment status successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get payment status successfully"},{"ancestorTitles":["PaymentService","基础功能测试"],"duration":51,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"支付记录不存在\"\u001b[39m\n\n    \u001b[0m \u001b[90m 130 |\u001b[39m\n     \u001b[90m 131 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mpayment) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 132 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'支付记录不存在'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 133 |\u001b[39m     }\n     \u001b[90m 134 |\u001b[39m\n     \u001b[90m 135 |\u001b[39m     \u001b[90m// 如果支付状态为处理中，尝试主动查询第三方状态\u001b[39m\u001b[0m\n\n      \u001b[2mat PaymentService.getPaymentStatus (\u001b[22msrc/payment/payment.service.ts\u001b[2m:132:13)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:188:7)\u001b[22m","pass":false},"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"支付记录不存在\"\u001b[39m\n\n    \u001b[0m \u001b[90m 130 |\u001b[39m\n     \u001b[90m 131 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mpayment) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 132 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'支付记录不存在'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 133 |\u001b[39m     }\n     \u001b[90m 134 |\u001b[39m\n     \u001b[90m 135 |\u001b[39m     \u001b[90m// 如果支付状态为处理中，尝试主动查询第三方状态\u001b[39m\u001b[0m\n\n      \u001b[2mat PaymentService.getPaymentStatus (\u001b[22msrc/payment/payment.service.ts\u001b[2m:132:13)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:188:7)\u001b[22m"}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"支付记录不存在\"\u001b[39m\n\n    \u001b[0m \u001b[90m 130 |\u001b[39m\n     \u001b[90m 131 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mpayment) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 132 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'支付记录不存在'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 133 |\u001b[39m     }\n     \u001b[90m 134 |\u001b[39m\n     \u001b[90m 135 |\u001b[39m     \u001b[90m// 如果支付状态为处理中，尝试主动查询第三方状态\u001b[39m\u001b[0m\n\n      \u001b[2mat PaymentService.getPaymentStatus (\u001b[22msrc/payment/payment.service.ts\u001b[2m:132:13)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:188:7)\u001b[22m\n    at Object.toThrow (D:\\onlinestore\\backend\\node_modules\\expect\\build\\index.js:218:22)\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\payment\\payment.service.spec.ts:188:70)\n    at Promise.then.completed (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"PaymentService 基础功能测试 should throw error when payment not found","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw error when payment not found"},{"ancestorTitles":["PaymentService","支付创建测试"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"PaymentService 支付创建测试 should create payment successfully","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should create payment successfully"},{"ancestorTitles":["PaymentService","支付创建测试"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"PaymentService 支付创建测试 should rollback transaction on error","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should rollback transaction on error"},{"ancestorTitles":["PaymentService","支付创建测试"],"duration":24,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"支付金额必须大于0\"\u001b[39m\n\n    \u001b[0m \u001b[90m 252 |\u001b[39m     }\n     \u001b[90m 253 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mdto\u001b[33m.\u001b[39mamount \u001b[33m||\u001b[39m dto\u001b[33m.\u001b[39mamount \u001b[33m<=\u001b[39m \u001b[35m0\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 254 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'支付金额必须大于0'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 255 |\u001b[39m     }\n     \u001b[90m 256 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mdto\u001b[33m.\u001b[39mmethod) {\n     \u001b[90m 257 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'支付方式不能为空'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat PaymentService.validateCreatePaymentDto (\u001b[22msrc/payment/payment.service.ts\u001b[2m:254:13)\u001b[22m\n      \u001b[2mat PaymentService.createPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:73:10)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:279:28)\u001b[22m","pass":false},"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"支付金额必须大于0\"\u001b[39m\n\n    \u001b[0m \u001b[90m 252 |\u001b[39m     }\n     \u001b[90m 253 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mdto\u001b[33m.\u001b[39mamount \u001b[33m||\u001b[39m dto\u001b[33m.\u001b[39mamount \u001b[33m<=\u001b[39m \u001b[35m0\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 254 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'支付金额必须大于0'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 255 |\u001b[39m     }\n     \u001b[90m 256 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mdto\u001b[33m.\u001b[39mmethod) {\n     \u001b[90m 257 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'支付方式不能为空'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat PaymentService.validateCreatePaymentDto (\u001b[22msrc/payment/payment.service.ts\u001b[2m:254:13)\u001b[22m\n      \u001b[2mat PaymentService.createPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:73:10)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:279:28)\u001b[22m"}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"支付金额必须大于0\"\u001b[39m\n\n    \u001b[0m \u001b[90m 252 |\u001b[39m     }\n     \u001b[90m 253 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mdto\u001b[33m.\u001b[39mamount \u001b[33m||\u001b[39m dto\u001b[33m.\u001b[39mamount \u001b[33m<=\u001b[39m \u001b[35m0\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 254 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'支付金额必须大于0'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 255 |\u001b[39m     }\n     \u001b[90m 256 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mdto\u001b[33m.\u001b[39mmethod) {\n     \u001b[90m 257 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'支付方式不能为空'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat PaymentService.validateCreatePaymentDto (\u001b[22msrc/payment/payment.service.ts\u001b[2m:254:13)\u001b[22m\n      \u001b[2mat PaymentService.createPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:73:10)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:279:28)\u001b[22m\n    at Object.toThrow (D:\\onlinestore\\backend\\node_modules\\expect\\build\\index.js:218:22)\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\payment\\payment.service.spec.ts:279:69)\n    at Promise.then.completed (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"PaymentService 支付创建测试 should validate payment amount","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should validate payment amount"},{"ancestorTitles":["PaymentService","支付创建测试"],"duration":24,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"不支持的支付方式: invalid-method\"\u001b[39m\n\n    \u001b[0m \u001b[90m 295 |\u001b[39m     \u001b[36mconst\u001b[39m strategy \u001b[33m=\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mpaymentStrategies\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(method\u001b[33m.\u001b[39mtoString())\u001b[33m;\u001b[39m\n     \u001b[90m 296 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mstrategy) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 297 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m`不支持的支付方式: ${method}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 298 |\u001b[39m     }\n     \u001b[90m 299 |\u001b[39m     \u001b[36mreturn\u001b[39m strategy\u001b[33m;\u001b[39m\n     \u001b[90m 300 |\u001b[39m   }\u001b[0m\n\n      \u001b[2mat PaymentService.getPaymentStrategy (\u001b[22msrc/payment/payment.service.ts\u001b[2m:297:13)\u001b[22m\n      \u001b[2mat PaymentService.createPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:94:29)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:288:7)\u001b[22m","pass":false},"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"不支持的支付方式: invalid-method\"\u001b[39m\n\n    \u001b[0m \u001b[90m 295 |\u001b[39m     \u001b[36mconst\u001b[39m strategy \u001b[33m=\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mpaymentStrategies\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(method\u001b[33m.\u001b[39mtoString())\u001b[33m;\u001b[39m\n     \u001b[90m 296 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mstrategy) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 297 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m`不支持的支付方式: ${method}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 298 |\u001b[39m     }\n     \u001b[90m 299 |\u001b[39m     \u001b[36mreturn\u001b[39m strategy\u001b[33m;\u001b[39m\n     \u001b[90m 300 |\u001b[39m   }\u001b[0m\n\n      \u001b[2mat PaymentService.getPaymentStrategy (\u001b[22msrc/payment/payment.service.ts\u001b[2m:297:13)\u001b[22m\n      \u001b[2mat PaymentService.createPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:94:29)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:288:7)\u001b[22m"}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"不支持的支付方式: invalid-method\"\u001b[39m\n\n    \u001b[0m \u001b[90m 295 |\u001b[39m     \u001b[36mconst\u001b[39m strategy \u001b[33m=\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mpaymentStrategies\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(method\u001b[33m.\u001b[39mtoString())\u001b[33m;\u001b[39m\n     \u001b[90m 296 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mstrategy) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 297 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m`不支持的支付方式: ${method}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 298 |\u001b[39m     }\n     \u001b[90m 299 |\u001b[39m     \u001b[36mreturn\u001b[39m strategy\u001b[33m;\u001b[39m\n     \u001b[90m 300 |\u001b[39m   }\u001b[0m\n\n      \u001b[2mat PaymentService.getPaymentStrategy (\u001b[22msrc/payment/payment.service.ts\u001b[2m:297:13)\u001b[22m\n      \u001b[2mat PaymentService.createPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:94:29)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:288:7)\u001b[22m\n    at Object.toThrow (D:\\onlinestore\\backend\\node_modules\\expect\\build\\index.js:218:22)\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\payment\\payment.service.spec.ts:288:69)\n    at Promise.then.completed (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"PaymentService 支付创建测试 should validate payment method","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should validate payment method"},{"ancestorTitles":["PaymentService","支付创建测试"],"duration":16,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"不支持的支付方式: invalid_method\"\u001b[39m\n\n    \u001b[0m \u001b[90m 295 |\u001b[39m     \u001b[36mconst\u001b[39m strategy \u001b[33m=\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mpaymentStrategies\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(method\u001b[33m.\u001b[39mtoString())\u001b[33m;\u001b[39m\n     \u001b[90m 296 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mstrategy) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 297 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m`不支持的支付方式: ${method}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 298 |\u001b[39m     }\n     \u001b[90m 299 |\u001b[39m     \u001b[36mreturn\u001b[39m strategy\u001b[33m;\u001b[39m\n     \u001b[90m 300 |\u001b[39m   }\u001b[0m\n\n      \u001b[2mat PaymentService.getPaymentStrategy (\u001b[22msrc/payment/payment.service.ts\u001b[2m:297:13)\u001b[22m\n      \u001b[2mat PaymentService.createPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:94:29)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:306:7)\u001b[22m","pass":false},"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"不支持的支付方式: invalid_method\"\u001b[39m\n\n    \u001b[0m \u001b[90m 295 |\u001b[39m     \u001b[36mconst\u001b[39m strategy \u001b[33m=\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mpaymentStrategies\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(method\u001b[33m.\u001b[39mtoString())\u001b[33m;\u001b[39m\n     \u001b[90m 296 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mstrategy) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 297 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m`不支持的支付方式: ${method}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 298 |\u001b[39m     }\n     \u001b[90m 299 |\u001b[39m     \u001b[36mreturn\u001b[39m strategy\u001b[33m;\u001b[39m\n     \u001b[90m 300 |\u001b[39m   }\u001b[0m\n\n      \u001b[2mat PaymentService.getPaymentStrategy (\u001b[22msrc/payment/payment.service.ts\u001b[2m:297:13)\u001b[22m\n      \u001b[2mat PaymentService.createPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:94:29)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:306:7)\u001b[22m"}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"不支持的支付方式: invalid_method\"\u001b[39m\n\n    \u001b[0m \u001b[90m 295 |\u001b[39m     \u001b[36mconst\u001b[39m strategy \u001b[33m=\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mpaymentStrategies\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(method\u001b[33m.\u001b[39mtoString())\u001b[33m;\u001b[39m\n     \u001b[90m 296 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mstrategy) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 297 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m`不支持的支付方式: ${method}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 298 |\u001b[39m     }\n     \u001b[90m 299 |\u001b[39m     \u001b[36mreturn\u001b[39m strategy\u001b[33m;\u001b[39m\n     \u001b[90m 300 |\u001b[39m   }\u001b[0m\n\n      \u001b[2mat PaymentService.getPaymentStrategy (\u001b[22msrc/payment/payment.service.ts\u001b[2m:297:13)\u001b[22m\n      \u001b[2mat PaymentService.createPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:94:29)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:306:7)\u001b[22m\n    at Object.toThrow (D:\\onlinestore\\backend\\node_modules\\expect\\build\\index.js:218:22)\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\payment\\payment.service.spec.ts:306:69)\n    at Promise.then.completed (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"PaymentService 支付创建测试 should handle strategy creation failure","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle strategy creation failure"},{"ancestorTitles":["PaymentService","支付回调处理测试"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"PaymentService 支付回调处理测试 should handle successful payment callback","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle successful payment callback"},{"ancestorTitles":["PaymentService","支付回调处理测试"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"PaymentService 支付回调处理测试 should handle callback for non-existent payment","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle callback for non-existent payment"},{"ancestorTitles":["PaymentService","支付查询测试"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"PaymentService 支付查询测试 should query payment successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should query payment successfully"},{"ancestorTitles":["PaymentService","退款功能测试"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"PaymentService 退款功能测试 should create refund successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create refund successfully"},{"ancestorTitles":["PaymentService","退款功能测试"],"duration":11,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"只有成功的支付才能退款\"\u001b[39m\n\n    \u001b[0m \u001b[90m 417 |\u001b[39m   \u001b[36mprivate\u001b[39m validateRefundEligibility(payment\u001b[33m:\u001b[39m \u001b[33mPayment\u001b[39m\u001b[33m,\u001b[39m amount\u001b[33m:\u001b[39m number)\u001b[33m:\u001b[39m \u001b[36mvoid\u001b[39m {\n     \u001b[90m 418 |\u001b[39m     \u001b[36mif\u001b[39m (payment\u001b[33m.\u001b[39mstatus \u001b[33m!==\u001b[39m \u001b[33mPaymentStatus\u001b[39m\u001b[33m.\u001b[39m\u001b[33mSUCCESS\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 419 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'只有成功的支付才能退款'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 420 |\u001b[39m     }\n     \u001b[90m 421 |\u001b[39m\n     \u001b[90m 422 |\u001b[39m     \u001b[36mconst\u001b[39m totalRefunded \u001b[33m=\u001b[39m payment\u001b[33m.\u001b[39mrefundedAmount \u001b[33m||\u001b[39m \u001b[35m0\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat PaymentService.validateRefundEligibility (\u001b[22msrc/payment/payment.service.ts\u001b[2m:419:13)\u001b[22m\n      \u001b[2mat PaymentService.refundPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:185:10)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:531:7)\u001b[22m","pass":false},"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"只有成功的支付才能退款\"\u001b[39m\n\n    \u001b[0m \u001b[90m 417 |\u001b[39m   \u001b[36mprivate\u001b[39m validateRefundEligibility(payment\u001b[33m:\u001b[39m \u001b[33mPayment\u001b[39m\u001b[33m,\u001b[39m amount\u001b[33m:\u001b[39m number)\u001b[33m:\u001b[39m \u001b[36mvoid\u001b[39m {\n     \u001b[90m 418 |\u001b[39m     \u001b[36mif\u001b[39m (payment\u001b[33m.\u001b[39mstatus \u001b[33m!==\u001b[39m \u001b[33mPaymentStatus\u001b[39m\u001b[33m.\u001b[39m\u001b[33mSUCCESS\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 419 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'只有成功的支付才能退款'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 420 |\u001b[39m     }\n     \u001b[90m 421 |\u001b[39m\n     \u001b[90m 422 |\u001b[39m     \u001b[36mconst\u001b[39m totalRefunded \u001b[33m=\u001b[39m payment\u001b[33m.\u001b[39mrefundedAmount \u001b[33m||\u001b[39m \u001b[35m0\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat PaymentService.validateRefundEligibility (\u001b[22msrc/payment/payment.service.ts\u001b[2m:419:13)\u001b[22m\n      \u001b[2mat PaymentService.refundPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:185:10)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:531:7)\u001b[22m"}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"只有成功的支付才能退款\"\u001b[39m\n\n    \u001b[0m \u001b[90m 417 |\u001b[39m   \u001b[36mprivate\u001b[39m validateRefundEligibility(payment\u001b[33m:\u001b[39m \u001b[33mPayment\u001b[39m\u001b[33m,\u001b[39m amount\u001b[33m:\u001b[39m number)\u001b[33m:\u001b[39m \u001b[36mvoid\u001b[39m {\n     \u001b[90m 418 |\u001b[39m     \u001b[36mif\u001b[39m (payment\u001b[33m.\u001b[39mstatus \u001b[33m!==\u001b[39m \u001b[33mPaymentStatus\u001b[39m\u001b[33m.\u001b[39m\u001b[33mSUCCESS\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 419 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'只有成功的支付才能退款'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 420 |\u001b[39m     }\n     \u001b[90m 421 |\u001b[39m\n     \u001b[90m 422 |\u001b[39m     \u001b[36mconst\u001b[39m totalRefunded \u001b[33m=\u001b[39m payment\u001b[33m.\u001b[39mrefundedAmount \u001b[33m||\u001b[39m \u001b[35m0\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat PaymentService.validateRefundEligibility (\u001b[22msrc/payment/payment.service.ts\u001b[2m:419:13)\u001b[22m\n      \u001b[2mat PaymentService.refundPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:185:10)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:531:7)\u001b[22m\n    at Object.toThrow (D:\\onlinestore\\backend\\node_modules\\expect\\build\\index.js:218:22)\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\payment\\payment.service.spec.ts:531:69)\n    at Promise.then.completed (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"PaymentService 退款功能测试 should reject refund for unpaid payment","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should reject refund for unpaid payment"},{"ancestorTitles":["PaymentService","退款功能测试"],"duration":20,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"退款金额不能超过可退款金额\"\u001b[39m\n\n    \u001b[0m \u001b[90m 422 |\u001b[39m     \u001b[36mconst\u001b[39m totalRefunded \u001b[33m=\u001b[39m payment\u001b[33m.\u001b[39mrefundedAmount \u001b[33m||\u001b[39m \u001b[35m0\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 423 |\u001b[39m     \u001b[36mif\u001b[39m (amount \u001b[33m>\u001b[39m payment\u001b[33m.\u001b[39mamount \u001b[33m-\u001b[39m totalRefunded) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 424 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'退款金额不能超过可退款金额'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 425 |\u001b[39m     }\n     \u001b[90m 426 |\u001b[39m   }\n     \u001b[90m 427 |\u001b[39m\u001b[0m\n\n      \u001b[2mat PaymentService.validateRefundEligibility (\u001b[22msrc/payment/payment.service.ts\u001b[2m:424:13)\u001b[22m\n      \u001b[2mat PaymentService.refundPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:185:10)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:561:7)\u001b[22m","pass":false},"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"退款金额不能超过可退款金额\"\u001b[39m\n\n    \u001b[0m \u001b[90m 422 |\u001b[39m     \u001b[36mconst\u001b[39m totalRefunded \u001b[33m=\u001b[39m payment\u001b[33m.\u001b[39mrefundedAmount \u001b[33m||\u001b[39m \u001b[35m0\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 423 |\u001b[39m     \u001b[36mif\u001b[39m (amount \u001b[33m>\u001b[39m payment\u001b[33m.\u001b[39mamount \u001b[33m-\u001b[39m totalRefunded) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 424 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'退款金额不能超过可退款金额'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 425 |\u001b[39m     }\n     \u001b[90m 426 |\u001b[39m   }\n     \u001b[90m 427 |\u001b[39m\u001b[0m\n\n      \u001b[2mat PaymentService.validateRefundEligibility (\u001b[22msrc/payment/payment.service.ts\u001b[2m:424:13)\u001b[22m\n      \u001b[2mat PaymentService.refundPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:185:10)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:561:7)\u001b[22m"}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"退款金额不能超过可退款金额\"\u001b[39m\n\n    \u001b[0m \u001b[90m 422 |\u001b[39m     \u001b[36mconst\u001b[39m totalRefunded \u001b[33m=\u001b[39m payment\u001b[33m.\u001b[39mrefundedAmount \u001b[33m||\u001b[39m \u001b[35m0\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 423 |\u001b[39m     \u001b[36mif\u001b[39m (amount \u001b[33m>\u001b[39m payment\u001b[33m.\u001b[39mamount \u001b[33m-\u001b[39m totalRefunded) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 424 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'退款金额不能超过可退款金额'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 425 |\u001b[39m     }\n     \u001b[90m 426 |\u001b[39m   }\n     \u001b[90m 427 |\u001b[39m\u001b[0m\n\n      \u001b[2mat PaymentService.validateRefundEligibility (\u001b[22msrc/payment/payment.service.ts\u001b[2m:424:13)\u001b[22m\n      \u001b[2mat PaymentService.refundPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:185:10)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:561:7)\u001b[22m\n    at Object.toThrow (D:\\onlinestore\\backend\\node_modules\\expect\\build\\index.js:218:22)\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\payment\\payment.service.spec.ts:561:70)\n    at Promise.then.completed (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"PaymentService 退款功能测试 should reject refund amount exceeding payment amount","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should reject refund amount exceeding payment amount"},{"ancestorTitles":["PaymentService","批量查询测试"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"PaymentService 批量查询测试 should batch get payment status","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should batch get payment status"},{"ancestorTitles":["PaymentService","批量查询测试"],"duration":12,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"批量查询数量不能超过100个\"\u001b[39m\n\n    \u001b[0m \u001b[90m 216 |\u001b[39m\n     \u001b[90m 217 |\u001b[39m     \u001b[36mif\u001b[39m (paymentIds\u001b[33m.\u001b[39mlength \u001b[33m>\u001b[39m \u001b[35m100\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 218 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'批量查询数量不能超过100个'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 219 |\u001b[39m     }\n     \u001b[90m 220 |\u001b[39m\n     \u001b[90m 221 |\u001b[39m     \u001b[36mconst\u001b[39m payments \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mpaymentRepository\u001b[33m.\u001b[39mfind({\u001b[0m\n\n      \u001b[2mat PaymentService.batchGetPaymentStatus (\u001b[22msrc/payment/payment.service.ts\u001b[2m:218:13)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:604:28)\u001b[22m","pass":false},"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"批量查询数量不能超过100个\"\u001b[39m\n\n    \u001b[0m \u001b[90m 216 |\u001b[39m\n     \u001b[90m 217 |\u001b[39m     \u001b[36mif\u001b[39m (paymentIds\u001b[33m.\u001b[39mlength \u001b[33m>\u001b[39m \u001b[35m100\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 218 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'批量查询数量不能超过100个'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 219 |\u001b[39m     }\n     \u001b[90m 220 |\u001b[39m\n     \u001b[90m 221 |\u001b[39m     \u001b[36mconst\u001b[39m payments \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mpaymentRepository\u001b[33m.\u001b[39mfind({\u001b[0m\n\n      \u001b[2mat PaymentService.batchGetPaymentStatus (\u001b[22msrc/payment/payment.service.ts\u001b[2m:218:13)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:604:28)\u001b[22m"}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"Bad Request\"\u001b[39m\nReceived message: \u001b[31m\"批量查询数量不能超过100个\"\u001b[39m\n\n    \u001b[0m \u001b[90m 216 |\u001b[39m\n     \u001b[90m 217 |\u001b[39m     \u001b[36mif\u001b[39m (paymentIds\u001b[33m.\u001b[39mlength \u001b[33m>\u001b[39m \u001b[35m100\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 218 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'批量查询数量不能超过100个'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 219 |\u001b[39m     }\n     \u001b[90m 220 |\u001b[39m\n     \u001b[90m 221 |\u001b[39m     \u001b[36mconst\u001b[39m payments \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mpaymentRepository\u001b[33m.\u001b[39mfind({\u001b[0m\n\n      \u001b[2mat PaymentService.batchGetPaymentStatus (\u001b[22msrc/payment/payment.service.ts\u001b[2m:218:13)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:604:28)\u001b[22m\n    at Object.toThrow (D:\\onlinestore\\backend\\node_modules\\expect\\build\\index.js:218:22)\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\payment\\payment.service.spec.ts:604:71)\n    at Promise.then.completed (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"PaymentService 批量查询测试 should reject batch query with too many IDs","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should reject batch query with too many IDs"},{"ancestorTitles":["PaymentService","订单支付记录查询测试"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"PaymentService 订单支付记录查询测试 should get order payments","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get order payments"},{"ancestorTitles":["PaymentService","错误处理测试"],"duration":15,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"\"\u001b[39m\nReceived message: \u001b[31m\"Database connection failed\"\u001b[39m\n\n    \u001b[0m \u001b[90m 645 |\u001b[39m   describe(\u001b[32m'错误处理测试'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n     \u001b[90m 646 |\u001b[39m     it(\u001b[32m'should handle database connection errors'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 647 |\u001b[39m       mockPaymentRepository\u001b[33m.\u001b[39mfindOne\u001b[33m.\u001b[39mmockRejectedValue(\u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m'Database connection failed'\u001b[39m))\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 648 |\u001b[39m\n     \u001b[90m 649 |\u001b[39m       \u001b[36mawait\u001b[39m expect(service\u001b[33m.\u001b[39mgetPaymentStatus(\u001b[32m'PAY_123'\u001b[39m))\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m())\u001b[33m;\u001b[39m\n     \u001b[90m 650 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:647:55)\u001b[22m","pass":false},"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"\"\u001b[39m\nReceived message: \u001b[31m\"Database connection failed\"\u001b[39m\n\n    \u001b[0m \u001b[90m 645 |\u001b[39m   describe(\u001b[32m'错误处理测试'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n     \u001b[90m 646 |\u001b[39m     it(\u001b[32m'should handle database connection errors'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 647 |\u001b[39m       mockPaymentRepository\u001b[33m.\u001b[39mfindOne\u001b[33m.\u001b[39mmockRejectedValue(\u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m'Database connection failed'\u001b[39m))\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 648 |\u001b[39m\n     \u001b[90m 649 |\u001b[39m       \u001b[36mawait\u001b[39m expect(service\u001b[33m.\u001b[39mgetPaymentStatus(\u001b[32m'PAY_123'\u001b[39m))\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m())\u001b[33m;\u001b[39m\n     \u001b[90m 650 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:647:55)\u001b[22m"}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"\"\u001b[39m\nReceived message: \u001b[31m\"Database connection failed\"\u001b[39m\n\n    \u001b[0m \u001b[90m 645 |\u001b[39m   describe(\u001b[32m'错误处理测试'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n     \u001b[90m 646 |\u001b[39m     it(\u001b[32m'should handle database connection errors'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 647 |\u001b[39m       mockPaymentRepository\u001b[33m.\u001b[39mfindOne\u001b[33m.\u001b[39mmockRejectedValue(\u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m'Database connection failed'\u001b[39m))\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 648 |\u001b[39m\n     \u001b[90m 649 |\u001b[39m       \u001b[36mawait\u001b[39m expect(service\u001b[33m.\u001b[39mgetPaymentStatus(\u001b[32m'PAY_123'\u001b[39m))\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m())\u001b[33m;\u001b[39m\n     \u001b[90m 650 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:647:55)\u001b[22m\n    at Object.toThrow (D:\\onlinestore\\backend\\node_modules\\expect\\build\\index.js:218:22)\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\payment\\payment.service.spec.ts:649:65)\n    at Promise.then.completed (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"PaymentService 错误处理测试 should handle database connection errors","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle database connection errors"},{"ancestorTitles":["PaymentService","错误处理测试"],"duration":22,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"\"\u001b[39m\nReceived message: \u001b[31m\"Cannot read properties of undefined (reading 'connect')\"\u001b[39m\n\n    \u001b[0m \u001b[90m 661 |\u001b[39m       \u001b[90m// 模拟数据库连接错误\u001b[39m\n     \u001b[90m 662 |\u001b[39m       mockDataSource\u001b[33m.\u001b[39mcreateQueryRunner\u001b[33m.\u001b[39mmockImplementation(() \u001b[33m=>\u001b[39m {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 663 |\u001b[39m         \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m\"Cannot read properties of undefined (reading 'connect')\"\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 664 |\u001b[39m       })\u001b[33m;\u001b[39m\n     \u001b[90m 665 |\u001b[39m\n     \u001b[90m 666 |\u001b[39m       \u001b[36mawait\u001b[39m expect(service\u001b[33m.\u001b[39mcreatePayment(createPaymentDto))\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m())\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:663:15)\u001b[22m\n      \u001b[2mat PaymentService.createPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:88:41)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:666:28)\u001b[22m","pass":false},"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"\"\u001b[39m\nReceived message: \u001b[31m\"Cannot read properties of undefined (reading 'connect')\"\u001b[39m\n\n    \u001b[0m \u001b[90m 661 |\u001b[39m       \u001b[90m// 模拟数据库连接错误\u001b[39m\n     \u001b[90m 662 |\u001b[39m       mockDataSource\u001b[33m.\u001b[39mcreateQueryRunner\u001b[33m.\u001b[39mmockImplementation(() \u001b[33m=>\u001b[39m {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 663 |\u001b[39m         \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m\"Cannot read properties of undefined (reading 'connect')\"\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 664 |\u001b[39m       })\u001b[33m;\u001b[39m\n     \u001b[90m 665 |\u001b[39m\n     \u001b[90m 666 |\u001b[39m       \u001b[36mawait\u001b[39m expect(service\u001b[33m.\u001b[39mcreatePayment(createPaymentDto))\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m())\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:663:15)\u001b[22m\n      \u001b[2mat PaymentService.createPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:88:41)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:666:28)\u001b[22m"}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected message: \u001b[32m\"\"\u001b[39m\nReceived message: \u001b[31m\"Cannot read properties of undefined (reading 'connect')\"\u001b[39m\n\n    \u001b[0m \u001b[90m 661 |\u001b[39m       \u001b[90m// 模拟数据库连接错误\u001b[39m\n     \u001b[90m 662 |\u001b[39m       mockDataSource\u001b[33m.\u001b[39mcreateQueryRunner\u001b[33m.\u001b[39mmockImplementation(() \u001b[33m=>\u001b[39m {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 663 |\u001b[39m         \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m\"Cannot read properties of undefined (reading 'connect')\"\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 664 |\u001b[39m       })\u001b[33m;\u001b[39m\n     \u001b[90m 665 |\u001b[39m\n     \u001b[90m 666 |\u001b[39m       \u001b[36mawait\u001b[39m expect(service\u001b[33m.\u001b[39mcreatePayment(createPaymentDto))\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m())\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:663:15)\u001b[22m\n      \u001b[2mat PaymentService.createPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:88:41)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:666:28)\u001b[22m\n    at Object.toThrow (D:\\onlinestore\\backend\\node_modules\\expect\\build\\index.js:218:22)\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\payment\\payment.service.spec.ts:666:69)\n    at Promise.then.completed (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"PaymentService 错误处理测试 should handle strategy not found error","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle strategy not found error"}],"endTime":1760120571796,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPaymentService › 基础功能测试 › should throw error when payment not found\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected message: \u001b[32m\"Bad Request\"\u001b[39m\n    Received message: \u001b[31m\"支付记录不存在\"\u001b[39m\n\n        \u001b[0m \u001b[90m 130 |\u001b[39m\n         \u001b[90m 131 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mpayment) {\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 132 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'支付记录不存在'\u001b[39m)\u001b[33m;\u001b[39m\n         \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 133 |\u001b[39m     }\n         \u001b[90m 134 |\u001b[39m\n         \u001b[90m 135 |\u001b[39m     \u001b[90m// 如果支付状态为处理中，尝试主动查询第三方状态\u001b[39m\u001b[0m\n\n          \u001b[2mat PaymentService.getPaymentStatus (\u001b[22msrc/payment/payment.service.ts\u001b[2m:132:13)\u001b[22m\n          \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:188:7)\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 186 |\u001b[39m       mockPaymentRepository\u001b[33m.\u001b[39mfindOne\u001b[33m.\u001b[39mmockResolvedValue(\u001b[36mnull\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 187 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 188 |\u001b[39m       \u001b[36mawait\u001b[39m expect(service\u001b[33m.\u001b[39mgetPaymentStatus(\u001b[32m'NON_EXISTENT'\u001b[39m))\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                                                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 189 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 190 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 191 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toThrow (\u001b[22m\u001b[2m../node_modules/expect/build/index.js\u001b[2m:218:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mpayment/payment.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:188:70)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPaymentService › 支付创建测试 › should validate payment amount\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected message: \u001b[32m\"Bad Request\"\u001b[39m\n    Received message: \u001b[31m\"支付金额必须大于0\"\u001b[39m\n\n        \u001b[0m \u001b[90m 252 |\u001b[39m     }\n         \u001b[90m 253 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mdto\u001b[33m.\u001b[39mamount \u001b[33m||\u001b[39m dto\u001b[33m.\u001b[39mamount \u001b[33m<=\u001b[39m \u001b[35m0\u001b[39m) {\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 254 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'支付金额必须大于0'\u001b[39m)\u001b[33m;\u001b[39m\n         \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 255 |\u001b[39m     }\n         \u001b[90m 256 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mdto\u001b[33m.\u001b[39mmethod) {\n         \u001b[90m 257 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'支付方式不能为空'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\n          \u001b[2mat PaymentService.validateCreatePaymentDto (\u001b[22msrc/payment/payment.service.ts\u001b[2m:254:13)\u001b[22m\n          \u001b[2mat PaymentService.createPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:73:10)\u001b[22m\n          \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:279:28)\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 277 |\u001b[39m       }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 278 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 279 |\u001b[39m       \u001b[36mawait\u001b[39m expect(service\u001b[33m.\u001b[39mcreatePayment(invalidAmountDto))\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 280 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 281 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 282 |\u001b[39m     it(\u001b[32m'should validate payment method'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toThrow (\u001b[22m\u001b[2m../node_modules/expect/build/index.js\u001b[2m:218:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mpayment/payment.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:279:69)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPaymentService › 支付创建测试 › should validate payment method\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected message: \u001b[32m\"Bad Request\"\u001b[39m\n    Received message: \u001b[31m\"不支持的支付方式: invalid-method\"\u001b[39m\n\n        \u001b[0m \u001b[90m 295 |\u001b[39m     \u001b[36mconst\u001b[39m strategy \u001b[33m=\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mpaymentStrategies\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(method\u001b[33m.\u001b[39mtoString())\u001b[33m;\u001b[39m\n         \u001b[90m 296 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mstrategy) {\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 297 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m`不支持的支付方式: ${method}`\u001b[39m)\u001b[33m;\u001b[39m\n         \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 298 |\u001b[39m     }\n         \u001b[90m 299 |\u001b[39m     \u001b[36mreturn\u001b[39m strategy\u001b[33m;\u001b[39m\n         \u001b[90m 300 |\u001b[39m   }\u001b[0m\n\n          \u001b[2mat PaymentService.getPaymentStrategy (\u001b[22msrc/payment/payment.service.ts\u001b[2m:297:13)\u001b[22m\n          \u001b[2mat PaymentService.createPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:94:29)\u001b[22m\n          \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:288:7)\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 286 |\u001b[39m       }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 287 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 288 |\u001b[39m       \u001b[36mawait\u001b[39m expect(service\u001b[33m.\u001b[39mcreatePayment(invalidMethodDto))\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 289 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 290 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 291 |\u001b[39m     it(\u001b[32m'should handle strategy creation failure'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toThrow (\u001b[22m\u001b[2m../node_modules/expect/build/index.js\u001b[2m:218:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mpayment/payment.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:288:69)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPaymentService › 支付创建测试 › should handle strategy creation failure\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected message: \u001b[32m\"Bad Request\"\u001b[39m\n    Received message: \u001b[31m\"不支持的支付方式: invalid_method\"\u001b[39m\n\n        \u001b[0m \u001b[90m 295 |\u001b[39m     \u001b[36mconst\u001b[39m strategy \u001b[33m=\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mpaymentStrategies\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(method\u001b[33m.\u001b[39mtoString())\u001b[33m;\u001b[39m\n         \u001b[90m 296 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mstrategy) {\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 297 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m`不支持的支付方式: ${method}`\u001b[39m)\u001b[33m;\u001b[39m\n         \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 298 |\u001b[39m     }\n         \u001b[90m 299 |\u001b[39m     \u001b[36mreturn\u001b[39m strategy\u001b[33m;\u001b[39m\n         \u001b[90m 300 |\u001b[39m   }\u001b[0m\n\n          \u001b[2mat PaymentService.getPaymentStrategy (\u001b[22msrc/payment/payment.service.ts\u001b[2m:297:13)\u001b[22m\n          \u001b[2mat PaymentService.createPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:94:29)\u001b[22m\n          \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:306:7)\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 304 |\u001b[39m       (mockQueryRunner\u001b[33m.\u001b[39mrelease \u001b[36mas\u001b[39m jest\u001b[33m.\u001b[39m\u001b[33mMock\u001b[39m)\u001b[33m.\u001b[39mmockResolvedValue(undefined)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 305 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 306 |\u001b[39m       \u001b[36mawait\u001b[39m expect(service\u001b[33m.\u001b[39mcreatePayment(invalidMethodDto))\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 307 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 308 |\u001b[39m       \u001b[90m// 验证事务回滚\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 309 |\u001b[39m       expect(mockQueryRunner\u001b[33m.\u001b[39mrollbackTransaction)\u001b[33m.\u001b[39mtoHaveBeenCalled()\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toThrow (\u001b[22m\u001b[2m../node_modules/expect/build/index.js\u001b[2m:218:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mpayment/payment.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:306:69)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPaymentService › 退款功能测试 › should reject refund for unpaid payment\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected message: \u001b[32m\"Bad Request\"\u001b[39m\n    Received message: \u001b[31m\"只有成功的支付才能退款\"\u001b[39m\n\n        \u001b[0m \u001b[90m 417 |\u001b[39m   \u001b[36mprivate\u001b[39m validateRefundEligibility(payment\u001b[33m:\u001b[39m \u001b[33mPayment\u001b[39m\u001b[33m,\u001b[39m amount\u001b[33m:\u001b[39m number)\u001b[33m:\u001b[39m \u001b[36mvoid\u001b[39m {\n         \u001b[90m 418 |\u001b[39m     \u001b[36mif\u001b[39m (payment\u001b[33m.\u001b[39mstatus \u001b[33m!==\u001b[39m \u001b[33mPaymentStatus\u001b[39m\u001b[33m.\u001b[39m\u001b[33mSUCCESS\u001b[39m) {\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 419 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'只有成功的支付才能退款'\u001b[39m)\u001b[33m;\u001b[39m\n         \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 420 |\u001b[39m     }\n         \u001b[90m 421 |\u001b[39m\n         \u001b[90m 422 |\u001b[39m     \u001b[36mconst\u001b[39m totalRefunded \u001b[33m=\u001b[39m payment\u001b[33m.\u001b[39mrefundedAmount \u001b[33m||\u001b[39m \u001b[35m0\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\n          \u001b[2mat PaymentService.validateRefundEligibility (\u001b[22msrc/payment/payment.service.ts\u001b[2m:419:13)\u001b[22m\n          \u001b[2mat PaymentService.refundPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:185:10)\u001b[22m\n          \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:531:7)\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 529 |\u001b[39m       mockPaymentRepository\u001b[33m.\u001b[39mfindOne\u001b[33m.\u001b[39mmockResolvedValue(mockPayment)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 530 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 531 |\u001b[39m       \u001b[36mawait\u001b[39m expect(service\u001b[33m.\u001b[39mrefundPayment(\u001b[32m'PAY_123'\u001b[39m\u001b[33m,\u001b[39m \u001b[35m99.99\u001b[39m))\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 532 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 533 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 534 |\u001b[39m     it(\u001b[32m'should reject refund amount exceeding payment amount'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toThrow (\u001b[22m\u001b[2m../node_modules/expect/build/index.js\u001b[2m:218:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mpayment/payment.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:531:69)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPaymentService › 退款功能测试 › should reject refund amount exceeding payment amount\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected message: \u001b[32m\"Bad Request\"\u001b[39m\n    Received message: \u001b[31m\"退款金额不能超过可退款金额\"\u001b[39m\n\n        \u001b[0m \u001b[90m 422 |\u001b[39m     \u001b[36mconst\u001b[39m totalRefunded \u001b[33m=\u001b[39m payment\u001b[33m.\u001b[39mrefundedAmount \u001b[33m||\u001b[39m \u001b[35m0\u001b[39m\u001b[33m;\u001b[39m\n         \u001b[90m 423 |\u001b[39m     \u001b[36mif\u001b[39m (amount \u001b[33m>\u001b[39m payment\u001b[33m.\u001b[39mamount \u001b[33m-\u001b[39m totalRefunded) {\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 424 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'退款金额不能超过可退款金额'\u001b[39m)\u001b[33m;\u001b[39m\n         \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 425 |\u001b[39m     }\n         \u001b[90m 426 |\u001b[39m   }\n         \u001b[90m 427 |\u001b[39m\u001b[0m\n\n          \u001b[2mat PaymentService.validateRefundEligibility (\u001b[22msrc/payment/payment.service.ts\u001b[2m:424:13)\u001b[22m\n          \u001b[2mat PaymentService.refundPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:185:10)\u001b[22m\n          \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:561:7)\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 559 |\u001b[39m       mockPaymentRepository\u001b[33m.\u001b[39mfindOne\u001b[33m.\u001b[39mmockResolvedValue(mockPayment)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 560 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 561 |\u001b[39m       \u001b[36mawait\u001b[39m expect(service\u001b[33m.\u001b[39mrefundPayment(\u001b[32m'PAY_123'\u001b[39m\u001b[33m,\u001b[39m \u001b[35m299.99\u001b[39m))\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                                                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 562 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 563 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 564 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toThrow (\u001b[22m\u001b[2m../node_modules/expect/build/index.js\u001b[2m:218:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mpayment/payment.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:561:70)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPaymentService › 批量查询测试 › should reject batch query with too many IDs\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected message: \u001b[32m\"Bad Request\"\u001b[39m\n    Received message: \u001b[31m\"批量查询数量不能超过100个\"\u001b[39m\n\n        \u001b[0m \u001b[90m 216 |\u001b[39m\n         \u001b[90m 217 |\u001b[39m     \u001b[36mif\u001b[39m (paymentIds\u001b[33m.\u001b[39mlength \u001b[33m>\u001b[39m \u001b[35m100\u001b[39m) {\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 218 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m(\u001b[32m'批量查询数量不能超过100个'\u001b[39m)\u001b[33m;\u001b[39m\n         \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 219 |\u001b[39m     }\n         \u001b[90m 220 |\u001b[39m\n         \u001b[90m 221 |\u001b[39m     \u001b[36mconst\u001b[39m payments \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mpaymentRepository\u001b[33m.\u001b[39mfind({\u001b[0m\n\n          \u001b[2mat PaymentService.batchGetPaymentStatus (\u001b[22msrc/payment/payment.service.ts\u001b[2m:218:13)\u001b[22m\n          \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:604:28)\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 602 |\u001b[39m       \u001b[36mconst\u001b[39m paymentIds \u001b[33m=\u001b[39m \u001b[33mArray\u001b[39m\u001b[33m.\u001b[39m\u001b[36mfrom\u001b[39m({ length\u001b[33m:\u001b[39m \u001b[35m101\u001b[39m }\u001b[33m,\u001b[39m (_\u001b[33m,\u001b[39m i) \u001b[33m=>\u001b[39m \u001b[32m`PAY_${i}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 603 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 604 |\u001b[39m       \u001b[36mawait\u001b[39m expect(service\u001b[33m.\u001b[39mbatchGetPaymentStatus(paymentIds))\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[36mnew\u001b[39m \u001b[33mBadRequestException\u001b[39m())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 605 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 606 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 607 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toThrow (\u001b[22m\u001b[2m../node_modules/expect/build/index.js\u001b[2m:218:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mpayment/payment.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:604:71)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPaymentService › 错误处理测试 › should handle database connection errors\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected message: \u001b[32m\"\"\u001b[39m\n    Received message: \u001b[31m\"Database connection failed\"\u001b[39m\n\n        \u001b[0m \u001b[90m 645 |\u001b[39m   describe(\u001b[32m'错误处理测试'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n         \u001b[90m 646 |\u001b[39m     it(\u001b[32m'should handle database connection errors'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 647 |\u001b[39m       mockPaymentRepository\u001b[33m.\u001b[39mfindOne\u001b[33m.\u001b[39mmockRejectedValue(\u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m'Database connection failed'\u001b[39m))\u001b[33m;\u001b[39m\n         \u001b[90m     |\u001b[39m                                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 648 |\u001b[39m\n         \u001b[90m 649 |\u001b[39m       \u001b[36mawait\u001b[39m expect(service\u001b[33m.\u001b[39mgetPaymentStatus(\u001b[32m'PAY_123'\u001b[39m))\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m())\u001b[33m;\u001b[39m\n         \u001b[90m 650 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\n\n          \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:647:55)\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 647 |\u001b[39m       mockPaymentRepository\u001b[33m.\u001b[39mfindOne\u001b[33m.\u001b[39mmockRejectedValue(\u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m'Database connection failed'\u001b[39m))\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 648 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 649 |\u001b[39m       \u001b[36mawait\u001b[39m expect(service\u001b[33m.\u001b[39mgetPaymentStatus(\u001b[32m'PAY_123'\u001b[39m))\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 650 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 651 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 652 |\u001b[39m     it(\u001b[32m'should handle strategy not found error'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toThrow (\u001b[22m\u001b[2m../node_modules/expect/build/index.js\u001b[2m:218:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mpayment/payment.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:649:65)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPaymentService › 错误处理测试 › should handle strategy not found error\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected message: \u001b[32m\"\"\u001b[39m\n    Received message: \u001b[31m\"Cannot read properties of undefined (reading 'connect')\"\u001b[39m\n\n        \u001b[0m \u001b[90m 661 |\u001b[39m       \u001b[90m// 模拟数据库连接错误\u001b[39m\n         \u001b[90m 662 |\u001b[39m       mockDataSource\u001b[33m.\u001b[39mcreateQueryRunner\u001b[33m.\u001b[39mmockImplementation(() \u001b[33m=>\u001b[39m {\n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 663 |\u001b[39m         \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m\"Cannot read properties of undefined (reading 'connect')\"\u001b[39m)\u001b[33m;\u001b[39m\n         \u001b[90m     |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 664 |\u001b[39m       })\u001b[33m;\u001b[39m\n         \u001b[90m 665 |\u001b[39m\n         \u001b[90m 666 |\u001b[39m       \u001b[36mawait\u001b[39m expect(service\u001b[33m.\u001b[39mcreatePayment(createPaymentDto))\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m())\u001b[33m;\u001b[39m\u001b[0m\n\n          \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:663:15)\u001b[22m\n          \u001b[2mat PaymentService.createPayment (\u001b[22msrc/payment/payment.service.ts\u001b[2m:88:41)\u001b[22m\n          \u001b[2mat Object.<anonymous> (\u001b[22msrc/payment/payment.service.spec.ts\u001b[2m:666:28)\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 664 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 665 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 666 |\u001b[39m       \u001b[36mawait\u001b[39m expect(service\u001b[33m.\u001b[39mcreatePayment(createPaymentDto))\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m())\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 667 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 668 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 669 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toThrow (\u001b[22m\u001b[2m../node_modules/expect/build/index.js\u001b[2m:218:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mpayment/payment.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:666:69)\u001b[22m\u001b[2m\u001b[22m\n","name":"D:\\onlinestore\\backend\\src\\payment\\payment.service.spec.ts","startTime":1760120570694,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["MonitoringController"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringController should be defined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be defined"},{"ancestorTitles":["MonitoringController","healthCheck"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringController healthCheck should return health status with 200 when status is ok","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return health status with 200 when status is ok"},{"ancestorTitles":["MonitoringController","healthCheck"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringController healthCheck should return health status with 200 when status is degraded","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return health status with 200 when status is degraded"},{"ancestorTitles":["MonitoringController","healthCheck"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringController healthCheck should return health status with 503 when status is critical","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return health status with 503 when status is critical"},{"ancestorTitles":["MonitoringController","getMetrics"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringController getMetrics should return current metrics","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return current metrics"},{"ancestorTitles":["MonitoringController","getMetricsSummary"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringController getMetricsSummary should return metrics summary","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return metrics summary"},{"ancestorTitles":["MonitoringController","getMetricsByCategory"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringController getMetricsByCategory should return metrics for http category","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return metrics for http category"},{"ancestorTitles":["MonitoringController","getMetricsByCategory"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringController getMetricsByCategory should return metrics for database category","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return metrics for database category"},{"ancestorTitles":["MonitoringController","getMetricsByCategory"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringController getMetricsByCategory should return metrics for cache category","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return metrics for cache category"},{"ancestorTitles":["MonitoringController","getMetricsByCategory"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringController getMetricsByCategory should return metrics for connections category","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return metrics for connections category"},{"ancestorTitles":["MonitoringController","getMetricsHistory"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringController getMetricsHistory should return metrics history for day period by default","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return metrics history for day period by default"},{"ancestorTitles":["MonitoringController","getMetricsHistory"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringController getMetricsHistory should return metrics history for hour period","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return metrics history for hour period"},{"ancestorTitles":["MonitoringController","getMetricsHistory"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringController getMetricsHistory should return metrics history for week period","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return metrics history for week period"},{"ancestorTitles":["MonitoringController","generatePerformanceReport"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringController generatePerformanceReport should generate performance report","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate performance report"},{"ancestorTitles":["MonitoringController","getApplicationStatus"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringController getApplicationStatus should return application status","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return application status"},{"ancestorTitles":["MonitoringController","getSystemInfo"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringController getSystemInfo should return system info","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return system info"},{"ancestorTitles":["MonitoringController","getAuditLogs"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringController getAuditLogs should return audit logs","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return audit logs"},{"ancestorTitles":["MonitoringController","getSecurityEvents"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringController getSecurityEvents should return security events","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return security events"},{"ancestorTitles":["MonitoringController","getPrometheusMetrics"],"duration":6,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32m\"Content-Type\"\u001b[39m, \u001b[32m\"text/plain\"\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32m\"Content-Type\"\u001b[39m, \u001b[32m\"text/plain\"\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\monitoring\\monitoring.controller.spec.ts:500:32)\n    at Promise.then.completed (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"MonitoringController getPrometheusMetrics should return Prometheus format metrics","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return Prometheus format metrics"}],"endTime":1760120573321,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mMonitoringController › getPrometheusMetrics › should return Prometheus format metrics\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32m\"Content-Type\"\u001b[39m, \u001b[32m\"text/plain\"\u001b[39m\n\n    Number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 498 |\u001b[39m       controller\u001b[33m.\u001b[39mgetPrometheusMetrics(mockResponse)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 499 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 500 |\u001b[39m       expect(mockResponse\u001b[33m.\u001b[39m\u001b[36mset\u001b[39m)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[32m'Content-Type'\u001b[39m\u001b[33m,\u001b[39m \u001b[32m'text/plain'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 501 |\u001b[39m       expect(mockResponse\u001b[33m.\u001b[39msend)\u001b[33m.\u001b[39mtoHaveBeenCalled()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 502 |\u001b[39m       \u001b[22m\n\u001b[2m     \u001b[90m 503 |\u001b[39m       \u001b[36mconst\u001b[39m sentData \u001b[33m=\u001b[39m mockResponse\u001b[33m.\u001b[39msend\u001b[33m.\u001b[39mmock\u001b[33m.\u001b[39mcalls[\u001b[35m0\u001b[39m][\u001b[35m0\u001b[39m]\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mmonitoring/monitoring.controller.spec.ts\u001b[39m\u001b[0m\u001b[2m:500:32)\u001b[22m\u001b[2m\u001b[22m\n","name":"D:\\onlinestore\\backend\\src\\monitoring\\monitoring.controller.spec.ts","startTime":1760120571875,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["MonitoringService"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService should be defined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be defined"},{"ancestorTitles":["MonitoringService","recordApiCall"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService recordApiCall should record API call metrics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record API call metrics"},{"ancestorTitles":["MonitoringService","recordApiCall"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService recordApiCall should log slow requests","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log slow requests"},{"ancestorTitles":["MonitoringService","getMetrics"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService getMetrics should return current metrics","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return current metrics"},{"ancestorTitles":["MonitoringService","getMetrics"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService getMetrics should calculate average response time correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate average response time correctly"},{"ancestorTitles":["MonitoringService","getMetrics"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService getMetrics should calculate error rate correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate error rate correctly"},{"ancestorTitles":["MonitoringService","healthCheck"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService healthCheck should return healthy status when metrics are good","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return healthy status when metrics are good"},{"ancestorTitles":["MonitoringService","healthCheck"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService healthCheck should return degraded status when error rate is high","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return degraded status when error rate is high"},{"ancestorTitles":["MonitoringService","healthCheck"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService healthCheck should return critical status when memory usage is high","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return critical status when memory usage is high"},{"ancestorTitles":["MonitoringService","healthCheck"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService healthCheck should return critical status when CPU load is high","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return critical status when CPU load is high"},{"ancestorTitles":["MonitoringService","observeDbQuery"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService observeDbQuery should record database query metrics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record database query metrics"},{"ancestorTitles":["MonitoringService","recordCacheHit"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService recordCacheHit should record cache hit","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record cache hit"},{"ancestorTitles":["MonitoringService","recordCacheMiss"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService recordCacheMiss should record cache miss","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record cache miss"},{"ancestorTitles":["MonitoringService","incrementActiveConnections"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService incrementActiveConnections should increment active connections","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should increment active connections"},{"ancestorTitles":["MonitoringService","decrementActiveConnections"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService decrementActiveConnections should decrement active connections","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should decrement active connections"},{"ancestorTitles":["MonitoringService","generatePerformanceReport"],"duration":7,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveProperty\u001b[2m(\u001b[22m\u001b[32mpath\u001b[39m\u001b[2m)\u001b[22m\n\nExpected path: \u001b[32m\"daily\"\u001b[39m\nReceived path: \u001b[31m[]\u001b[39m\n\nReceived value: \u001b[31m{\"generatedAt\": \"2025-10-10T18:22:54.101Z\", \"message\": \"No metrics data available for the selected period\", \"period\": \"daily\", \"status\": \"no_data\"}\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveProperty\u001b[2m(\u001b[22m\u001b[32mpath\u001b[39m\u001b[2m)\u001b[22m\n\nExpected path: \u001b[32m\"daily\"\u001b[39m\nReceived path: \u001b[31m[]\u001b[39m\n\nReceived value: \u001b[31m{\"generatedAt\": \"2025-10-10T18:22:54.101Z\", \"message\": \"No metrics data available for the selected period\", \"period\": \"daily\", \"status\": \"no_data\"}\u001b[39m\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\monitoring\\monitoring.service.spec.ts:256:22)"],"fullName":"MonitoringService generatePerformanceReport should generate performance report","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"failed","title":"should generate performance report"},{"ancestorTitles":["MonitoringService","generatePerformanceReport"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService generatePerformanceReport should return no_data status when no metrics are available","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return no_data status when no metrics are available"},{"ancestorTitles":["MonitoringService","getMetricsHistory"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService getMetricsHistory should get metrics history for day period by default","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get metrics history for day period by default"},{"ancestorTitles":["MonitoringService","getMetricsHistory"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService getMetricsHistory should get metrics history for hour period","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get metrics history for hour period"},{"ancestorTitles":["MonitoringService","getMetricsHistory"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService getMetricsHistory should get metrics history for week period","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get metrics history for week period"},{"ancestorTitles":["MonitoringService","getApplicationStatus"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService getApplicationStatus should return application status","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should return application status"},{"ancestorTitles":["MonitoringService","logAuditLog"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService logAuditLog should log audit event","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should log audit event"},{"ancestorTitles":["MonitoringService","logSecurityEvent"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"MonitoringService logSecurityEvent should log security event","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should log security event"}],"endTime":1760120574196,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mMonitoringService › generatePerformanceReport › should generate performance report\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoHaveProperty\u001b[2m(\u001b[22m\u001b[32mpath\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected path: \u001b[32m\"daily\"\u001b[39m\n    Received path: \u001b[31m[]\u001b[39m\n\n    Received value: \u001b[31m{\"generatedAt\": \"2025-10-10T18:22:54.101Z\", \"message\": \"No metrics data available for the selected period\", \"period\": \"daily\", \"status\": \"no_data\"}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 254 |\u001b[39m       expect(report)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m'period'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 255 |\u001b[39m       expect(report)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m'generatedAt'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 256 |\u001b[39m       expect(report)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m'daily'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 257 |\u001b[39m       expect(report)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m'weekly'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 258 |\u001b[39m       expect(report)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m'detailed'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 259 |\u001b[39m       expect(report)\u001b[33m.\u001b[39mtoHaveProperty(\u001b[32m'recommendations'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mmonitoring/monitoring.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:256:22)\u001b[22m\u001b[2m\u001b[22m\n","name":"D:\\onlinestore\\backend\\src\\monitoring\\monitoring.service.spec.ts","startTime":1760120573371,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["GlobalExceptionFilter"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"GlobalExceptionFilter should be defined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be defined"},{"ancestorTitles":["GlobalExceptionFilter","catch"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"GlobalExceptionFilter catch should handle EnhancedBusinessException","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle EnhancedBusinessException"},{"ancestorTitles":["GlobalExceptionFilter","catch"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"GlobalExceptionFilter catch should handle HttpException with object response","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle HttpException with object response"},{"ancestorTitles":["GlobalExceptionFilter","catch"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"GlobalExceptionFilter catch should handle HttpException with string response","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle HttpException with string response"},{"ancestorTitles":["GlobalExceptionFilter","catch"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"GlobalExceptionFilter catch should handle unknown exceptions","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle unknown exceptions"},{"ancestorTitles":["GlobalExceptionFilter","catch"],"duration":41,"failureDetails":[],"failureMessages":[],"fullName":"GlobalExceptionFilter catch should map HTTP status codes to error codes correctly","invocations":1,"location":null,"numPassingAsserts":20,"retryReasons":[],"status":"passed","title":"should map HTTP status codes to error codes correctly"},{"ancestorTitles":["GlobalExceptionFilter","catch"],"duration":17,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"category\": \"business\"}\u001b[39m\nReceived: \u001b[31m{\"category\": \"validation\", \"errorCode\": \"40401001\", \"message\": \"Test error\", \"requestId\": undefined, \"success\": false, \"timestamp\": \"2021-01-01T00:00:00.000Z\"}\u001b[39m\n\nNumber of calls: \u001b[31m1\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"category\": \"business\"}\u001b[39m\nReceived: \u001b[31m{\"category\": \"validation\", \"errorCode\": \"40401001\", \"message\": \"Test error\", \"requestId\": undefined, \"success\": false, \"timestamp\": \"2021-01-01T00:00:00.000Z\"}\u001b[39m\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at D:\\onlinestore\\backend\\src\\common\\filters\\global-exception.filter.spec.ts:162:35\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\common\\filters\\global-exception.filter.spec.ts:159:17)\n    at Promise.then.completed (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"GlobalExceptionFilter catch should categorize errors correctly","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should categorize errors correctly"}],"endTime":1760120574741,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mGlobalExceptionFilter › catch › should categorize errors correctly\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32mObjectContaining {\"category\": \"business\"}\u001b[39m\n    Received: \u001b[31m{\"category\": \"validation\", \"errorCode\": \"40401001\", \"message\": \"Test error\", \"requestId\": undefined, \"success\": false, \"timestamp\": \"2021-01-01T00:00:00.000Z\"}\u001b[39m\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 160 |\u001b[39m         \u001b[36mconst\u001b[39m exception \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mHttpException\u001b[39m(\u001b[32m'Test error'\u001b[39m\u001b[33m,\u001b[39m status)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 161 |\u001b[39m         filter\u001b[33m.\u001b[39m\u001b[36mcatch\u001b[39m(exception\u001b[33m,\u001b[39m mockArgumentsHost)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 162 |\u001b[39m         expect(mockResponse\u001b[33m.\u001b[39mjson)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 163 |\u001b[39m           expect\u001b[33m.\u001b[39mobjectContaining({\u001b[22m\n\u001b[2m     \u001b[90m 164 |\u001b[39m             category\u001b[33m:\u001b[39m expectedCategory\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 165 |\u001b[39m           })\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mcommon/filters/global-exception.filter.spec.ts\u001b[39m\u001b[0m\u001b[2m:162:35\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m          at Array.forEach (<anonymous>)\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mcommon/filters/global-exception.filter.spec.ts\u001b[39m\u001b[0m\u001b[2m:159:17)\u001b[22m\u001b[2m\u001b[22m\n","name":"D:\\onlinestore\\backend\\src\\common\\filters\\global-exception.filter.spec.ts","startTime":1760120574266,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["LogAnalyticsService"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"LogAnalyticsService should be defined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be defined"},{"ancestorTitles":["LogAnalyticsService","getLogStats"],"duration":11,"failureDetails":[{"matcherResult":{"actual":{"total":0,"stats":[],"aggregations":{}},"expected":{"total":100,"stats":[{"level":"INFO","category":"USER","count":50,"unique_users":20},{"level":"INFO","category":"ORDER","count":30,"unique_users":15}],"aggregations":{}},"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  - 15\u001b[39m\n\u001b[31m+ Received  +  2\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"aggregations\": Object {},\u001b[22m\n\u001b[32m-   \"stats\": Array [\u001b[39m\n\u001b[32m-     Object {\u001b[39m\n\u001b[32m-       \"category\": \"USER\",\u001b[39m\n\u001b[32m-       \"count\": 50,\u001b[39m\n\u001b[32m-       \"level\": \"INFO\",\u001b[39m\n\u001b[32m-       \"unique_users\": 20,\u001b[39m\n\u001b[32m-     },\u001b[39m\n\u001b[32m-     Object {\u001b[39m\n\u001b[32m-       \"category\": \"ORDER\",\u001b[39m\n\u001b[32m-       \"count\": 30,\u001b[39m\n\u001b[32m-       \"level\": \"INFO\",\u001b[39m\n\u001b[32m-       \"unique_users\": 15,\u001b[39m\n\u001b[32m-     },\u001b[39m\n\u001b[32m-   ],\u001b[39m\n\u001b[32m-   \"total\": 100,\u001b[39m\n\u001b[31m+   \"stats\": Array [],\u001b[39m\n\u001b[31m+   \"total\": 0,\u001b[39m\n\u001b[2m  }\u001b[22m","name":"toEqual","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  - 15\u001b[39m\n\u001b[31m+ Received  +  2\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"aggregations\": Object {},\u001b[22m\n\u001b[32m-   \"stats\": Array [\u001b[39m\n\u001b[32m-     Object {\u001b[39m\n\u001b[32m-       \"category\": \"USER\",\u001b[39m\n\u001b[32m-       \"count\": 50,\u001b[39m\n\u001b[32m-       \"level\": \"INFO\",\u001b[39m\n\u001b[32m-       \"unique_users\": 20,\u001b[39m\n\u001b[32m-     },\u001b[39m\n\u001b[32m-     Object {\u001b[39m\n\u001b[32m-       \"category\": \"ORDER\",\u001b[39m\n\u001b[32m-       \"count\": 30,\u001b[39m\n\u001b[32m-       \"level\": \"INFO\",\u001b[39m\n\u001b[32m-       \"unique_users\": 15,\u001b[39m\n\u001b[32m-     },\u001b[39m\n\u001b[32m-   ],\u001b[39m\n\u001b[32m-   \"total\": 100,\u001b[39m\n\u001b[31m+   \"stats\": Array [],\u001b[39m\n\u001b[31m+   \"total\": 0,\u001b[39m\n\u001b[2m  }\u001b[22m\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\logging\\log-analytics.service.spec.ts:112:22)"],"fullName":"LogAnalyticsService getLogStats should return log stats successfully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should return log stats successfully"},{"ancestorTitles":["LogAnalyticsService","getLogStats"],"duration":6,"failureDetails":[{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m()\u001b[22m\n\nReceived promise resolved instead of rejected\nResolved to value: \u001b[31m{\"aggregations\": {}, \"stats\": [], \"total\": 0}\u001b[39m"}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m()\u001b[22m\n\nReceived promise resolved instead of rejected\nResolved to value: \u001b[31m{\"aggregations\": {}, \"stats\": [], \"total\": 0}\u001b[39m\n    at expect (D:\\onlinestore\\backend\\node_modules\\expect\\build\\index.js:113:15)\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\logging\\log-analytics.service.spec.ts:160:13)\n    at Promise.then.completed (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (D:\\onlinestore\\backend\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (D:\\onlinestore\\backend\\node_modules\\jest-runner\\build\\runTest.js:444:34)"],"fullName":"LogAnalyticsService getLogStats should throw error when request fails","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should throw error when request fails"},{"ancestorTitles":["LogAnalyticsService","getUserBehaviorAnalytics"],"duration":22,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n  \u001b[2m\"http://localhost:5080/api/test-org/_search\"\u001b[22m,\n  \u001b[2m{\"query\": \"\u001b[22m\n\u001b[2m      SELECT \u001b[22m\n\u001b[2m        eventType,\u001b[22m\n\u001b[2m        COUNT(*) as count,\u001b[22m\n\u001b[2m        COUNT(DISTINCT sessionId) as unique_sessions,\u001b[22m\n\u001b[2m        COUNT(DISTINCT userId) as unique_users\u001b[22m\n\u001b[2m      FROM user-behavior \u001b[22m\n\u001b[2m      WHERE timestamp >= '2023-01-01T00:00:00Z' AND timestamp <= '2023-01-02T00:00:00Z' AND userId = 'user123'\u001b[22m\n\u001b[2m      GROUP BY eventType\u001b[22m\n\u001b[2m      ORDER BY count DESC\u001b[22m\n\u001b[2m    \"}\u001b[22m,\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"headers\": Object {\u001b[22m\n\u001b[2m      \"Authorization\": \"Bearer test-token\",\u001b[22m\n\u001b[2m      \"Content-Type\": \"application/json\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[31m+   \"timeout\": 30000,\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n  \u001b[2m\"http://localhost:5080/api/test-org/_search\"\u001b[22m,\n  \u001b[2m{\"query\": \"\u001b[22m\n\u001b[2m      SELECT \u001b[22m\n\u001b[2m        eventType,\u001b[22m\n\u001b[2m        COUNT(*) as count,\u001b[22m\n\u001b[2m        COUNT(DISTINCT sessionId) as unique_sessions,\u001b[22m\n\u001b[2m        COUNT(DISTINCT userId) as unique_users\u001b[22m\n\u001b[2m      FROM user-behavior \u001b[22m\n\u001b[2m      WHERE timestamp >= '2023-01-01T00:00:00Z' AND timestamp <= '2023-01-02T00:00:00Z' AND userId = 'user123'\u001b[22m\n\u001b[2m      GROUP BY eventType\u001b[22m\n\u001b[2m      ORDER BY count DESC\u001b[22m\n\u001b[2m    \"}\u001b[22m,\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"headers\": Object {\u001b[22m\n\u001b[2m      \"Authorization\": \"Bearer test-token\",\u001b[22m\n\u001b[2m      \"Content-Type\": \"application/json\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[31m+   \"timeout\": 30000,\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\logging\\log-analytics.service.spec.ts:219:36)"],"fullName":"LogAnalyticsService getUserBehaviorAnalytics should return user behavior analytics successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return user behavior analytics successfully"},{"ancestorTitles":["LogAnalyticsService","detectAnomalousPatterns"],"duration":13,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n  \u001b[2m\"http://localhost:5080/api/test-org/_search\"\u001b[22m,\n  \u001b[2m{\"query\": \"\u001b[22m\n\u001b[2m      SELECT \u001b[22m\n\u001b[2m        level,\u001b[22m\n\u001b[2m        category,\u001b[22m\n\u001b[2m        action,\u001b[22m\n\u001b[2m        COUNT(*) as count,\u001b[22m\n\u001b[2m        COUNT(*) / (SELECT COUNT(*) FROM business-events WHERE timestamp >= '2023-01-01T00:00:00Z' AND timestamp <= '2023-01-02T00:00:00Z') as percentage\u001b[22m\n\u001b[2m      FROM business-events \u001b[22m\n\u001b[2m      WHERE timestamp >= '2023-01-01T00:00:00Z' AND timestamp <= '2023-01-02T00:00:00Z' AND level = 'ERROR'\u001b[22m\n\u001b[2m      GROUP BY level, category, action\u001b[22m\n\u001b[2m      HAVING percentage > 0.05  -- 超过5%的错误率视为异常\u001b[22m\n\u001b[2m      ORDER BY percentage DESC\u001b[22m\n\u001b[2m    \"}\u001b[22m,\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"headers\": Object {\u001b[22m\n\u001b[2m      \"Authorization\": \"Bearer test-token\",\u001b[22m\n\u001b[2m      \"Content-Type\": \"application/json\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[31m+   \"timeout\": 30000,\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n  \u001b[2m\"http://localhost:5080/api/test-org/_search\"\u001b[22m,\n  \u001b[2m{\"query\": \"\u001b[22m\n\u001b[2m      SELECT \u001b[22m\n\u001b[2m        level,\u001b[22m\n\u001b[2m        category,\u001b[22m\n\u001b[2m        action,\u001b[22m\n\u001b[2m        COUNT(*) as count,\u001b[22m\n\u001b[2m        COUNT(*) / (SELECT COUNT(*) FROM business-events WHERE timestamp >= '2023-01-01T00:00:00Z' AND timestamp <= '2023-01-02T00:00:00Z') as percentage\u001b[22m\n\u001b[2m      FROM business-events \u001b[22m\n\u001b[2m      WHERE timestamp >= '2023-01-01T00:00:00Z' AND timestamp <= '2023-01-02T00:00:00Z' AND level = 'ERROR'\u001b[22m\n\u001b[2m      GROUP BY level, category, action\u001b[22m\n\u001b[2m      HAVING percentage > 0.05  -- 超过5%的错误率视为异常\u001b[22m\n\u001b[2m      ORDER BY percentage DESC\u001b[22m\n\u001b[2m    \"}\u001b[22m,\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"headers\": Object {\u001b[22m\n\u001b[2m      \"Authorization\": \"Bearer test-token\",\u001b[22m\n\u001b[2m      \"Content-Type\": \"application/json\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[31m+   \"timeout\": 30000,\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\logging\\log-analytics.service.spec.ts:302:36)"],"fullName":"LogAnalyticsService detectAnomalousPatterns should return anomaly detection results successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return anomaly detection results successfully"},{"ancestorTitles":["LogAnalyticsService","getPopularPages"],"duration":6,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n  \u001b[2m\"http://localhost:5080/api/test-org/_search\"\u001b[22m,\n  \u001b[2m{\"query\": \"\u001b[22m\n\u001b[2m      SELECT eventData.page as page,\u001b[22m\n\u001b[2m             COUNT(*) as view_count,\u001b[22m\n\u001b[2m             COUNT(DISTINCT userId) as unique_users\u001b[22m\n\u001b[2m      FROM user-behavior\u001b[22m\n\u001b[2m      WHERE eventType = 'PAGE_VIEW' \u001b[22m\n\u001b[2m        AND timestamp >= '2023-01-01T00:00:00Z' \u001b[22m\n\u001b[2m        AND timestamp <= '2023-01-02T00:00:00Z'\u001b[22m\n\u001b[2m      GROUP BY page\u001b[22m\n\u001b[2m      ORDER BY view_count DESC\u001b[22m\n\u001b[2m      LIMIT 5\u001b[22m\n\u001b[2m    \"}\u001b[22m,\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"headers\": Object {\u001b[22m\n\u001b[2m      \"Authorization\": \"Bearer test-token\",\u001b[22m\n\u001b[2m      \"Content-Type\": \"application/json\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[31m+   \"timeout\": 30000,\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n  \u001b[2m\"http://localhost:5080/api/test-org/_search\"\u001b[22m,\n  \u001b[2m{\"query\": \"\u001b[22m\n\u001b[2m      SELECT eventData.page as page,\u001b[22m\n\u001b[2m             COUNT(*) as view_count,\u001b[22m\n\u001b[2m             COUNT(DISTINCT userId) as unique_users\u001b[22m\n\u001b[2m      FROM user-behavior\u001b[22m\n\u001b[2m      WHERE eventType = 'PAGE_VIEW' \u001b[22m\n\u001b[2m        AND timestamp >= '2023-01-01T00:00:00Z' \u001b[22m\n\u001b[2m        AND timestamp <= '2023-01-02T00:00:00Z'\u001b[22m\n\u001b[2m      GROUP BY page\u001b[22m\n\u001b[2m      ORDER BY view_count DESC\u001b[22m\n\u001b[2m      LIMIT 5\u001b[22m\n\u001b[2m    \"}\u001b[22m,\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"headers\": Object {\u001b[22m\n\u001b[2m      \"Authorization\": \"Bearer test-token\",\u001b[22m\n\u001b[2m      \"Content-Type\": \"application/json\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[31m+   \"timeout\": 30000,\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\logging\\log-analytics.service.spec.ts:374:36)"],"fullName":"LogAnalyticsService getPopularPages should return popular pages successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return popular pages successfully"},{"ancestorTitles":["LogAnalyticsService","getConversionFunnel"],"duration":6,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n  \u001b[2m\"http://localhost:5080/api/test-org/_search\"\u001b[22m,\n  \u001b[2m{\"query\": \"\u001b[22m\n\u001b[2m      SELECT eventType,\u001b[22m\n\u001b[2m             COUNT(DISTINCT userId) as user_count\u001b[22m\n\u001b[2m      FROM user-behavior\u001b[22m\n\u001b[2m      WHERE eventType IN ('PRODUCT_VIEW', 'CART_ADD', 'CHECKOUT', 'PURCHASE')\u001b[22m\n\u001b[2m        AND timestamp >= '2023-01-01T00:00:00Z' \u001b[22m\n\u001b[2m        AND timestamp <= '2023-01-02T00:00:00Z'\u001b[22m\n\u001b[2m      GROUP BY eventType\u001b[22m\n\u001b[2m      ORDER BY \u001b[22m\n\u001b[2m        CASE eventType \u001b[22m\n\u001b[2m          WHEN 'PRODUCT_VIEW' THEN 1\u001b[22m\n\u001b[2m          WHEN 'CART_ADD' THEN 2\u001b[22m\n\u001b[2m          WHEN 'CHECKOUT' THEN 3\u001b[22m\n\u001b[2m          WHEN 'PURCHASE' THEN 4\u001b[22m\n\u001b[2m        END\u001b[22m\n\u001b[2m    \"}\u001b[22m,\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"headers\": Object {\u001b[22m\n\u001b[2m      \"Authorization\": \"Bearer test-token\",\u001b[22m\n\u001b[2m      \"Content-Type\": \"application/json\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[31m+   \"timeout\": 30000,\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n  \u001b[2m\"http://localhost:5080/api/test-org/_search\"\u001b[22m,\n  \u001b[2m{\"query\": \"\u001b[22m\n\u001b[2m      SELECT eventType,\u001b[22m\n\u001b[2m             COUNT(DISTINCT userId) as user_count\u001b[22m\n\u001b[2m      FROM user-behavior\u001b[22m\n\u001b[2m      WHERE eventType IN ('PRODUCT_VIEW', 'CART_ADD', 'CHECKOUT', 'PURCHASE')\u001b[22m\n\u001b[2m        AND timestamp >= '2023-01-01T00:00:00Z' \u001b[22m\n\u001b[2m        AND timestamp <= '2023-01-02T00:00:00Z'\u001b[22m\n\u001b[2m      GROUP BY eventType\u001b[22m\n\u001b[2m      ORDER BY \u001b[22m\n\u001b[2m        CASE eventType \u001b[22m\n\u001b[2m          WHEN 'PRODUCT_VIEW' THEN 1\u001b[22m\n\u001b[2m          WHEN 'CART_ADD' THEN 2\u001b[22m\n\u001b[2m          WHEN 'CHECKOUT' THEN 3\u001b[22m\n\u001b[2m          WHEN 'PURCHASE' THEN 4\u001b[22m\n\u001b[2m        END\u001b[22m\n\u001b[2m    \"}\u001b[22m,\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"headers\": Object {\u001b[22m\n\u001b[2m      \"Authorization\": \"Bearer test-token\",\u001b[22m\n\u001b[2m      \"Content-Type\": \"application/json\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[31m+   \"timeout\": 30000,\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\onlinestore\\backend\\src\\logging\\log-analytics.service.spec.ts:460:36)"],"fullName":"LogAnalyticsService getConversionFunnel should return conversion funnel successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should return conversion funnel successfully"},{"ancestorTitles":["LogAnalyticsService","calculateSeverity"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"LogAnalyticsService calculateSeverity should return low severity for percentage < 0.1","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return low severity for percentage < 0.1"},{"ancestorTitles":["LogAnalyticsService","calculateSeverity"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"LogAnalyticsService calculateSeverity should return medium severity for percentage < 0.2","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return medium severity for percentage < 0.2"},{"ancestorTitles":["LogAnalyticsService","calculateSeverity"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"LogAnalyticsService calculateSeverity should return high severity for percentage < 0.5","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return high severity for percentage < 0.5"},{"ancestorTitles":["LogAnalyticsService","calculateSeverity"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"LogAnalyticsService calculateSeverity should return critical severity for percentage >= 0.5","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return critical severity for percentage >= 0.5"}],"endTime":1760120575504,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mLogAnalyticsService › getLogStats › should return log stats successfully\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    \u001b[32m- Expected  - 15\u001b[39m\n    \u001b[31m+ Received  +  2\u001b[39m\n\n    \u001b[2m  Object {\u001b[22m\n    \u001b[2m    \"aggregations\": Object {},\u001b[22m\n    \u001b[32m-   \"stats\": Array [\u001b[39m\n    \u001b[32m-     Object {\u001b[39m\n    \u001b[32m-       \"category\": \"USER\",\u001b[39m\n    \u001b[32m-       \"count\": 50,\u001b[39m\n    \u001b[32m-       \"level\": \"INFO\",\u001b[39m\n    \u001b[32m-       \"unique_users\": 20,\u001b[39m\n    \u001b[32m-     },\u001b[39m\n    \u001b[32m-     Object {\u001b[39m\n    \u001b[32m-       \"category\": \"ORDER\",\u001b[39m\n    \u001b[32m-       \"count\": 30,\u001b[39m\n    \u001b[32m-       \"level\": \"INFO\",\u001b[39m\n    \u001b[32m-       \"unique_users\": 15,\u001b[39m\n    \u001b[32m-     },\u001b[39m\n    \u001b[32m-   ],\u001b[39m\n    \u001b[32m-   \"total\": 100,\u001b[39m\n    \u001b[31m+   \"stats\": Array [],\u001b[39m\n    \u001b[31m+   \"total\": 0,\u001b[39m\n    \u001b[2m  }\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 |\u001b[39m       \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m service\u001b[33m.\u001b[39mgetLogStats(timeRange\u001b[33m,\u001b[39m filters)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 111 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 112 |\u001b[39m       expect(result)\u001b[33m.\u001b[39mtoEqual({\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                      \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 113 |\u001b[39m         total\u001b[33m:\u001b[39m \u001b[35m100\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 114 |\u001b[39m         stats\u001b[33m:\u001b[39m [\u001b[22m\n\u001b[2m     \u001b[90m 115 |\u001b[39m           {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mlogging/log-analytics.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:112:22)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mLogAnalyticsService › getLogStats › should throw error when request fails\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m()\u001b[22m\n\n    Received promise resolved instead of rejected\n    Resolved to value: \u001b[31m{\"aggregations\": {}, \"stats\": [], \"total\": 0}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 158 |\u001b[39m       mockHttpService\u001b[33m.\u001b[39mpost\u001b[33m.\u001b[39mmockReturnValue(\u001b[36mof\u001b[39m({ data\u001b[33m:\u001b[39m \u001b[36mnull\u001b[39m }))\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 159 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 160 |\u001b[39m       \u001b[36mawait\u001b[39m expect(service\u001b[33m.\u001b[39mgetLogStats(timeRange))\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[32m'No response received from OpenObserve'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 161 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 162 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 163 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat expect (\u001b[22m\u001b[2m../node_modules/expect/build/index.js\u001b[2m:113:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mlogging/log-analytics.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:160:13)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mLogAnalyticsService › getUserBehaviorAnalytics › should return user behavior analytics successfully\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n      \u001b[2m\"http://localhost:5080/api/test-org/_search\"\u001b[22m,\n      \u001b[2m{\"query\": \"\u001b[22m\n    \u001b[2m      SELECT \u001b[22m\n    \u001b[2m        eventType,\u001b[22m\n    \u001b[2m        COUNT(*) as count,\u001b[22m\n    \u001b[2m        COUNT(DISTINCT sessionId) as unique_sessions,\u001b[22m\n    \u001b[2m        COUNT(DISTINCT userId) as unique_users\u001b[22m\n    \u001b[2m      FROM user-behavior \u001b[22m\n    \u001b[2m      WHERE timestamp >= '2023-01-01T00:00:00Z' AND timestamp <= '2023-01-02T00:00:00Z' AND userId = 'user123'\u001b[22m\n    \u001b[2m      GROUP BY eventType\u001b[22m\n    \u001b[2m      ORDER BY count DESC\u001b[22m\n    \u001b[2m    \"}\u001b[22m,\n    \u001b[2m  Object {\u001b[22m\n    \u001b[2m    \"headers\": Object {\u001b[22m\n    \u001b[2m      \"Authorization\": \"Bearer test-token\",\u001b[22m\n    \u001b[2m      \"Content-Type\": \"application/json\",\u001b[22m\n    \u001b[2m    },\u001b[22m\n    \u001b[31m+   \"timeout\": 30000,\u001b[39m\n    \u001b[2m  }\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 217 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 218 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 219 |\u001b[39m       expect(mockHttpService\u001b[33m.\u001b[39mpost)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 220 |\u001b[39m         \u001b[32m`${mockConfig.url}/api/${mockConfig.organization}/_search`\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 221 |\u001b[39m         {\u001b[22m\n\u001b[2m     \u001b[90m 222 |\u001b[39m           query\u001b[33m:\u001b[39m \u001b[32m`\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mlogging/log-analytics.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:219:36)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mLogAnalyticsService › detectAnomalousPatterns › should return anomaly detection results successfully\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n      \u001b[2m\"http://localhost:5080/api/test-org/_search\"\u001b[22m,\n      \u001b[2m{\"query\": \"\u001b[22m\n    \u001b[2m      SELECT \u001b[22m\n    \u001b[2m        level,\u001b[22m\n    \u001b[2m        category,\u001b[22m\n    \u001b[2m        action,\u001b[22m\n    \u001b[2m        COUNT(*) as count,\u001b[22m\n    \u001b[2m        COUNT(*) / (SELECT COUNT(*) FROM business-events WHERE timestamp >= '2023-01-01T00:00:00Z' AND timestamp <= '2023-01-02T00:00:00Z') as percentage\u001b[22m\n    \u001b[2m      FROM business-events \u001b[22m\n    \u001b[2m      WHERE timestamp >= '2023-01-01T00:00:00Z' AND timestamp <= '2023-01-02T00:00:00Z' AND level = 'ERROR'\u001b[22m\n    \u001b[2m      GROUP BY level, category, action\u001b[22m\n    \u001b[2m      HAVING percentage > 0.05  -- 超过5%的错误率视为异常\u001b[22m\n    \u001b[2m      ORDER BY percentage DESC\u001b[22m\n    \u001b[2m    \"}\u001b[22m,\n    \u001b[2m  Object {\u001b[22m\n    \u001b[2m    \"headers\": Object {\u001b[22m\n    \u001b[2m      \"Authorization\": \"Bearer test-token\",\u001b[22m\n    \u001b[2m      \"Content-Type\": \"application/json\",\u001b[22m\n    \u001b[2m    },\u001b[22m\n    \u001b[31m+   \"timeout\": 30000,\u001b[39m\n    \u001b[2m  }\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 300 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 301 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 302 |\u001b[39m       expect(mockHttpService\u001b[33m.\u001b[39mpost)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 303 |\u001b[39m         \u001b[32m`${mockConfig.url}/api/${mockConfig.organization}/_search`\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 304 |\u001b[39m         {\u001b[22m\n\u001b[2m     \u001b[90m 305 |\u001b[39m           query\u001b[33m:\u001b[39m \u001b[32m`\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mlogging/log-analytics.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:302:36)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mLogAnalyticsService › getPopularPages › should return popular pages successfully\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n      \u001b[2m\"http://localhost:5080/api/test-org/_search\"\u001b[22m,\n      \u001b[2m{\"query\": \"\u001b[22m\n    \u001b[2m      SELECT eventData.page as page,\u001b[22m\n    \u001b[2m             COUNT(*) as view_count,\u001b[22m\n    \u001b[2m             COUNT(DISTINCT userId) as unique_users\u001b[22m\n    \u001b[2m      FROM user-behavior\u001b[22m\n    \u001b[2m      WHERE eventType = 'PAGE_VIEW' \u001b[22m\n    \u001b[2m        AND timestamp >= '2023-01-01T00:00:00Z' \u001b[22m\n    \u001b[2m        AND timestamp <= '2023-01-02T00:00:00Z'\u001b[22m\n    \u001b[2m      GROUP BY page\u001b[22m\n    \u001b[2m      ORDER BY view_count DESC\u001b[22m\n    \u001b[2m      LIMIT 5\u001b[22m\n    \u001b[2m    \"}\u001b[22m,\n    \u001b[2m  Object {\u001b[22m\n    \u001b[2m    \"headers\": Object {\u001b[22m\n    \u001b[2m      \"Authorization\": \"Bearer test-token\",\u001b[22m\n    \u001b[2m      \"Content-Type\": \"application/json\",\u001b[22m\n    \u001b[2m    },\u001b[22m\n    \u001b[31m+   \"timeout\": 30000,\u001b[39m\n    \u001b[2m  }\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 372 |\u001b[39m       ])\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 373 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 374 |\u001b[39m       expect(mockHttpService\u001b[33m.\u001b[39mpost)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 375 |\u001b[39m         \u001b[32m`${mockConfig.url}/api/${mockConfig.organization}/_search`\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 376 |\u001b[39m         {\u001b[22m\n\u001b[2m     \u001b[90m 377 |\u001b[39m           query\u001b[33m:\u001b[39m \u001b[32m`\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mlogging/log-analytics.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:374:36)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mLogAnalyticsService › getConversionFunnel › should return conversion funnel successfully\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n      \u001b[2m\"http://localhost:5080/api/test-org/_search\"\u001b[22m,\n      \u001b[2m{\"query\": \"\u001b[22m\n    \u001b[2m      SELECT eventType,\u001b[22m\n    \u001b[2m             COUNT(DISTINCT userId) as user_count\u001b[22m\n    \u001b[2m      FROM user-behavior\u001b[22m\n    \u001b[2m      WHERE eventType IN ('PRODUCT_VIEW', 'CART_ADD', 'CHECKOUT', 'PURCHASE')\u001b[22m\n    \u001b[2m        AND timestamp >= '2023-01-01T00:00:00Z' \u001b[22m\n    \u001b[2m        AND timestamp <= '2023-01-02T00:00:00Z'\u001b[22m\n    \u001b[2m      GROUP BY eventType\u001b[22m\n    \u001b[2m      ORDER BY \u001b[22m\n    \u001b[2m        CASE eventType \u001b[22m\n    \u001b[2m          WHEN 'PRODUCT_VIEW' THEN 1\u001b[22m\n    \u001b[2m          WHEN 'CART_ADD' THEN 2\u001b[22m\n    \u001b[2m          WHEN 'CHECKOUT' THEN 3\u001b[22m\n    \u001b[2m          WHEN 'PURCHASE' THEN 4\u001b[22m\n    \u001b[2m        END\u001b[22m\n    \u001b[2m    \"}\u001b[22m,\n    \u001b[2m  Object {\u001b[22m\n    \u001b[2m    \"headers\": Object {\u001b[22m\n    \u001b[2m      \"Authorization\": \"Bearer test-token\",\u001b[22m\n    \u001b[2m      \"Content-Type\": \"application/json\",\u001b[22m\n    \u001b[2m    },\u001b[22m\n    \u001b[31m+   \"timeout\": 30000,\u001b[39m\n    \u001b[2m  }\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 458 |\u001b[39m       ])\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 459 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 460 |\u001b[39m       expect(mockHttpService\u001b[33m.\u001b[39mpost)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 461 |\u001b[39m         \u001b[32m`${mockConfig.url}/api/${mockConfig.organization}/_search`\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 462 |\u001b[39m         {\u001b[22m\n\u001b[2m     \u001b[90m 463 |\u001b[39m           query\u001b[33m:\u001b[39m \u001b[32m`\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mlogging/log-analytics.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:460:36)\u001b[22m\u001b[2m\u001b[22m\n","name":"D:\\onlinestore\\backend\\src\\logging\\log-analytics.service.spec.ts","startTime":1760120574765,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["ProductsController","POST /products"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController POST /products should create a new product successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create a new product successfully"},{"ancestorTitles":["ProductsController","POST /products"],"duration":45,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController POST /products should throw error for invalid price","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid price"},{"ancestorTitles":["ProductsController","POST /products"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController POST /products should throw error for negative stock","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for negative stock"},{"ancestorTitles":["ProductsController","POST /products"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController POST /products should throw error for invalid category","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid category"},{"ancestorTitles":["ProductsController","POST /products"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController POST /products should validate required fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate required fields"},{"ancestorTitles":["ProductsController","POST /products"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController POST /products should validate product name length","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate product name length"},{"ancestorTitles":["ProductsController","POST /products"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController POST /products should handle database connection errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle database connection errors"},{"ancestorTitles":["ProductsController","POST /products"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController POST /products should calculate total amount correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate total amount correctly"},{"ancestorTitles":["ProductsController","GET /products"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products should return array of products","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return array of products"},{"ancestorTitles":["ProductsController","GET /products"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products should handle pagination","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle pagination"},{"ancestorTitles":["ProductsController","GET /products"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products should handle search functionality","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle search functionality"},{"ancestorTitles":["ProductsController","GET /products"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products should return empty array when no products found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty array when no products found"},{"ancestorTitles":["ProductsController","GET /products"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products should handle database errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle database errors gracefully"},{"ancestorTitles":["ProductsController","GET /products"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products should handle pagination edge cases","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle pagination edge cases"},{"ancestorTitles":["ProductsController","GET /products/:id"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products/:id should return product by id","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return product by id"},{"ancestorTitles":["ProductsController","GET /products/:id"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products/:id should throw error for non-existent product","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for non-existent product"},{"ancestorTitles":["ProductsController","GET /products/:id"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products/:id should handle invalid id format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalid id format"},{"ancestorTitles":["ProductsController","GET /products/:id"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products/:id should include category information","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should include category information"},{"ancestorTitles":["ProductsController","GET /products/:id"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products/:id should handle database connection errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle database connection errors"},{"ancestorTitles":["ProductsController","GET /products/:id"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products/:id should return inactive products when explicitly requested","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return inactive products when explicitly requested"},{"ancestorTitles":["ProductsController","PUT /products/:id"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController PUT /products/:id should update product successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update product successfully"},{"ancestorTitles":["ProductsController","PUT /products/:id"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController PUT /products/:id should throw error for non-existent product","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for non-existent product"},{"ancestorTitles":["ProductsController","PUT /products/:id"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController PUT /products/:id should validate price on update","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate price on update"},{"ancestorTitles":["ProductsController","PUT /products/:id"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController PUT /products/:id should not allow update of immutable fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not allow update of immutable fields"},{"ancestorTitles":["ProductsController","PUT /products/:id"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController PUT /products/:id should handle partial updates","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle partial updates"},{"ancestorTitles":["ProductsController","PUT /products/:id"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController PUT /products/:id should track update history","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should track update history"},{"ancestorTitles":["ProductsController","DELETE /products/:id"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController DELETE /products/:id should delete product successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should delete product successfully"},{"ancestorTitles":["ProductsController","DELETE /products/:id"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController DELETE /products/:id should throw error for non-existent product","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for non-existent product"},{"ancestorTitles":["ProductsController","DELETE /products/:id"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController DELETE /products/:id should handle invalid id format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalid id format"},{"ancestorTitles":["ProductsController","DELETE /products/:id"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController DELETE /products/:id should prevent deletion of products with orders","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should prevent deletion of products with orders"},{"ancestorTitles":["ProductsController","DELETE /products/:id"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController DELETE /products/:id should handle database connection errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle database connection errors"},{"ancestorTitles":["ProductsController","GET /products/popular"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products/popular should return popular products","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return popular products"},{"ancestorTitles":["ProductsController","GET /products/popular"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products/popular should handle limit parameter","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle limit parameter"},{"ancestorTitles":["ProductsController","GET /products/popular"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products/popular should handle empty popular products","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty popular products"},{"ancestorTitles":["ProductsController","GET /products/popular"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products/popular should handle database errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle database errors"},{"ancestorTitles":["ProductsController","GET /products/popular"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products/popular should sort by popularity score","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should sort by popularity score"},{"ancestorTitles":["ProductsController","GET /products/search"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products/search should search products by query","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should search products by query"},{"ancestorTitles":["ProductsController","GET /products/search"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products/search should handle search with filters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle search with filters"},{"ancestorTitles":["ProductsController","GET /products/search"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products/search should return empty array when no search results","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return empty array when no search results"},{"ancestorTitles":["ProductsController","GET /products/search"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products/search should handle search errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle search errors gracefully"},{"ancestorTitles":["ProductsController","GET /products/search"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products/search should handle pagination in search results","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle pagination in search results"},{"ancestorTitles":["ProductsController","GET /products/search"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products/search should handle fuzzy search","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle fuzzy search"},{"ancestorTitles":["ProductsController","GET /products/search"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController GET /products/search should handle search with multiple filters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle search with multiple filters"},{"ancestorTitles":["ProductsController","Edge Cases and Error Handling"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController Edge Cases and Error Handling should handle concurrent product creation","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle concurrent product creation"},{"ancestorTitles":["ProductsController","Edge Cases and Error Handling"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController Edge Cases and Error Handling should handle rate limiting","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle rate limiting"},{"ancestorTitles":["ProductsController","Edge Cases and Error Handling"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController Edge Cases and Error Handling should handle validation errors comprehensively","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle validation errors comprehensively"},{"ancestorTitles":["ProductsController","Edge Cases and Error Handling"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"ProductsController Edge Cases and Error Handling should handle timeout scenarios","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle timeout scenarios"}],"endTime":1760120577272,"message":"","name":"D:\\onlinestore\\backend\\src\\products\\products.controller.spec.ts","startTime":1760120575562,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["OrdersService","Service Initialization"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Service Initialization should be defined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be defined"},{"ancestorTitles":["OrdersService","Service Initialization"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Service Initialization should have all dependencies injected","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should have all dependencies injected"},{"ancestorTitles":["OrdersService","Create Order"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Create Order should successfully create a new order","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should successfully create a new order"},{"ancestorTitles":["OrdersService","Create Order"],"duration":74,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Create Order should throw error when product is not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when product is not found"},{"ancestorTitles":["OrdersService","Create Order"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Create Order should throw error when product stock is insufficient","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when product stock is insufficient"},{"ancestorTitles":["OrdersService","Create Order"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Create Order should handle event publishing errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle event publishing errors gracefully"},{"ancestorTitles":["OrdersService","Create Order"],"duration":38,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Create Order should generate unique order numbers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate unique order numbers"},{"ancestorTitles":["OrdersService","Find Order By ID"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Find Order By ID should return order when found","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return order when found"},{"ancestorTitles":["OrdersService","Find Order By ID"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Find Order By ID should return null when order not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null when order not found"},{"ancestorTitles":["OrdersService","Find Orders By User ID"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Find Orders By User ID should return orders for specific user","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return orders for specific user"},{"ancestorTitles":["OrdersService","Find Orders By User ID"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Find Orders By User ID should handle pagination correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle pagination correctly"},{"ancestorTitles":["OrdersService","Find All Orders"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Find All Orders should return all orders with pagination","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return all orders with pagination"},{"ancestorTitles":["OrdersService","Update Order"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Update Order should successfully update order","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should successfully update order"},{"ancestorTitles":["OrdersService","Update Order"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Update Order should set completedAt when status is DELIVERED","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should set completedAt when status is DELIVERED"},{"ancestorTitles":["OrdersService","Update Order"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Update Order should throw error when order not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when order not found"},{"ancestorTitles":["OrdersService","Update Order"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Update Order should handle event publishing errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle event publishing errors gracefully"},{"ancestorTitles":["OrdersService","Delete Order"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Delete Order should successfully delete order","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should successfully delete order"},{"ancestorTitles":["OrdersService","Delete Order"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Delete Order should throw error when order not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when order not found"},{"ancestorTitles":["OrdersService","Get Message History"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Get Message History should return message history","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return message history"},{"ancestorTitles":["OrdersService","Get Message History"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Get Message History should handle query errors and increment DLQ metrics","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle query errors and increment DLQ metrics"},{"ancestorTitles":["OrdersService","Get Statistics"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Get Statistics should return order statistics","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return order statistics"},{"ancestorTitles":["OrdersService","Get Statistics"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Get Statistics should handle zero revenue correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle zero revenue correctly"},{"ancestorTitles":["OrdersService","Private Methods","generateOrderNumber"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Private Methods generateOrderNumber should generate unique order numbers","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate unique order numbers"},{"ancestorTitles":["OrdersService","Private Methods","generateOrderNumber"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Private Methods generateOrderNumber should generate order numbers with correct format","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate order numbers with correct format"},{"ancestorTitles":["OrdersService","Private Methods","publishOrderCreatedEvent"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Private Methods publishOrderCreatedEvent should publish order created event with correct structure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should publish order created event with correct structure"},{"ancestorTitles":["OrdersService","Private Methods","publishOrderStatusUpdatedEvent"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Private Methods publishOrderStatusUpdatedEvent should publish order status updated event with correct structure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should publish order status updated event with correct structure"},{"ancestorTitles":["OrdersService","Integration Scenarios"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Integration Scenarios should handle complete order lifecycle","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle complete order lifecycle"},{"ancestorTitles":["OrdersService","Integration Scenarios"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Integration Scenarios should handle multiple items in order creation","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle multiple items in order creation"},{"ancestorTitles":["OrdersService","Error Handling"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Error Handling should handle database errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle database errors gracefully"},{"ancestorTitles":["OrdersService","Error Handling"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Error Handling should handle transaction errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle transaction errors gracefully"},{"ancestorTitles":["OrdersService","Error Handling"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Error Handling should handle message history query errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle message history query errors gracefully"},{"ancestorTitles":["OrdersService","Performance Monitoring"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Performance Monitoring should record database query metrics for find operations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record database query metrics for find operations"},{"ancestorTitles":["OrdersService","Performance Monitoring"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Performance Monitoring should record database query metrics for list operations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record database query metrics for list operations"},{"ancestorTitles":["OrdersService","Performance Monitoring"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService Performance Monitoring should record database query metrics for count operations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record database query metrics for count operations"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","订单创建边界测试"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 订单创建边界测试 should handle empty order items","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty order items"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","订单创建边界测试"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 订单创建边界测试 should handle invalid product quantities","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalid product quantities"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","订单创建边界测试"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 订单创建边界测试 should handle extremely large quantities","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle extremely large quantities"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","订单创建边界测试"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 订单创建边界测试 should handle invalid user ID","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalid user ID"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","订单创建边界测试"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 订单创建边界测试 should handle missing required fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing required fields"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","数据库错误处理测试"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 数据库错误处理测试 should handle database connection timeout","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle database connection timeout"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","数据库错误处理测试"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 数据库错误处理测试 should handle transaction rollback on save failure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle transaction rollback on save failure"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","数据库错误处理测试"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 数据库错误处理测试 should handle concurrent modification conflicts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle concurrent modification conflicts"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","业务逻辑边界测试"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 业务逻辑边界测试 should handle status transition validation","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle status transition validation"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","业务逻辑边界测试"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 业务逻辑边界测试 should handle payment status consistency","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle payment status consistency"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","业务逻辑边界测试"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 业务逻辑边界测试 should validate order amount limits","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate order amount limits"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","并发处理测试"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 并发处理测试 should handle concurrent order creation for same user","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle concurrent order creation for same user"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","并发处理测试"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 并发处理测试 should handle concurrent stock updates","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle concurrent stock updates"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","性能和资源限制测试"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 性能和资源限制测试 should handle large order item lists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle large order item lists"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","性能和资源限制测试"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 性能和资源限制测试 should handle memory pressure during large queries","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle memory pressure during large queries"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","性能和资源限制测试"],"duration":111,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 性能和资源限制测试 should handle timeout on slow queries","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle timeout on slow queries"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","数据一致性测试"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 数据一致性测试 should maintain referential integrity","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should maintain referential integrity"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","数据一致性测试"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 数据一致性测试 should validate order total calculation","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate order total calculation"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","监控和日志测试"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 监控和日志测试 should record metrics for failed operations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record metrics for failed operations"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","监控和日志测试"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 监控和日志测试 should publish events for order state changes","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should publish events for order state changes"},{"ancestorTitles":["OrdersService","边界情况和错误处理测试","监控和日志测试"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"OrdersService 边界情况和错误处理测试 监控和日志测试 should handle event publishing failures gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle event publishing failures gracefully"}],"endTime":1760120578839,"message":"","name":"D:\\onlinestore\\backend\\src\\orders\\orders.service.spec.ts","startTime":1760120577325,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["LoggingModule providers (adapter priority)"],"duration":634,"failureDetails":[],"failureMessages":[],"fullName":"LoggingModule providers (adapter priority) OPENOBSERVE_CONFIG uses EnvironmentAdapter values when available","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"OPENOBSERVE_CONFIG uses EnvironmentAdapter values when available"},{"ancestorTitles":["LoggingModule providers (adapter priority)"],"duration":402,"failureDetails":[],"failureMessages":[],"fullName":"LoggingModule providers (adapter priority) USER_BEHAVIOR_TRANSPORT endpoint uses adapter baseUrl/organization","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"USER_BEHAVIOR_TRANSPORT endpoint uses adapter baseUrl/organization"}],"endTime":1760120580371,"message":"","name":"D:\\onlinestore\\backend\\src\\logging\\logging.module.spec.ts","startTime":1760120578902,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["AddressService Integration"],"duration":32,"failureDetails":[],"failureMessages":[],"fullName":"AddressService Integration should be defined","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should be defined"},{"ancestorTitles":["AddressService Integration","createAddress"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AddressService Integration createAddress should create and validate a Chinese address","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should create and validate a Chinese address"},{"ancestorTitles":["AddressService Integration","createAddress"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"AddressService Integration createAddress should handle US address format","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle US address format"},{"ancestorTitles":["AddressService Integration","geocode"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AddressService Integration geocode should geocode address and cache result","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should geocode address and cache result"},{"ancestorTitles":["AddressService Integration","geocode"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"AddressService Integration geocode should return cached geocode result","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return cached geocode result"},{"ancestorTitles":["AddressService Integration","AddressFormattingService"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"AddressService Integration AddressFormattingService should format Chinese address correctly","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should format Chinese address correctly"},{"ancestorTitles":["AddressService Integration","AddressFormattingService"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"AddressService Integration AddressFormattingService should format US address correctly","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should format US address correctly"},{"ancestorTitles":["AddressService Integration","AddressValidationService Integration"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"AddressService Integration AddressValidationService Integration should validate address using validation service","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should validate address using validation service"},{"ancestorTitles":["AddressService Integration","AddressValidationService Integration"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"AddressService Integration AddressValidationService Integration should handle invalid address","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle invalid address"},{"ancestorTitles":["AddressService Integration","reverseGeocode"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"AddressService Integration reverseGeocode should reverse geocode coordinates and cache result","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should reverse geocode coordinates and cache result"},{"ancestorTitles":["AddressService Integration","reverseGeocode"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"AddressService Integration reverseGeocode should return cached reverse geocode result","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return cached reverse geocode result"},{"ancestorTitles":["AddressService Integration","Error Handling"],"duration":24,"failureDetails":[],"failureMessages":[],"fullName":"AddressService Integration Error Handling should handle repository errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle repository errors gracefully"},{"ancestorTitles":["AddressService Integration","Error Handling"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"AddressService Integration Error Handling should handle validation service errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle validation service errors gracefully"},{"ancestorTitles":["AddressService Integration","batchGeocode"],"duration":184,"failureDetails":[],"failureMessages":[],"fullName":"AddressService Integration batchGeocode should batch geocode addresses","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should batch geocode addresses"},{"ancestorTitles":["AddressService Integration","healthCheck and getStats"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"AddressService Integration healthCheck and getStats should perform health check","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should perform health check"},{"ancestorTitles":["AddressService Integration","healthCheck and getStats"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"AddressService Integration healthCheck and getStats should get service stats","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should get service stats"}],"endTime":1760120581409,"message":"","name":"D:\\onlinestore\\backend\\src\\address\\address.spec.ts","startTime":1760120580384,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["OrdersController","POST /orders"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController POST /orders should create a new order successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create a new order successfully"},{"ancestorTitles":["OrdersController","POST /orders"],"duration":32,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController POST /orders should throw error for invalid user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid user"},{"ancestorTitles":["OrdersController","POST /orders"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController POST /orders should throw error for invalid product","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for invalid product"},{"ancestorTitles":["OrdersController","POST /orders"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController POST /orders should throw error for insufficient stock","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for insufficient stock"},{"ancestorTitles":["OrdersController","POST /orders"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController POST /orders should validate required fields","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate required fields"},{"ancestorTitles":["OrdersController","POST /orders"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController POST /orders should calculate total amount correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate total amount correctly"},{"ancestorTitles":["OrdersController","GET /orders"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController GET /orders should return array of orders","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return array of orders"},{"ancestorTitles":["OrdersController","GET /orders"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController GET /orders should handle pagination parameters","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle pagination parameters"},{"ancestorTitles":["OrdersController","GET /orders"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController GET /orders should handle status filter","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle status filter"},{"ancestorTitles":["OrdersController","GET /orders"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController GET /orders should handle date range filter","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle date range filter"},{"ancestorTitles":["OrdersController","GET /orders/user/:userId"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController GET /orders/user/:userId should return orders for a specific user","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return orders for a specific user"},{"ancestorTitles":["OrdersController","GET /orders/user/:userId"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController GET /orders/user/:userId should handle user not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle user not found"},{"ancestorTitles":["OrdersController","GET /orders/user/:userId"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController GET /orders/user/:userId should handle pagination parameters","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle pagination parameters"},{"ancestorTitles":["OrdersController","GET /orders/user/:userId"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController GET /orders/user/:userId should handle status filter","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle status filter"},{"ancestorTitles":["OrdersController","GET /orders/:id"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController GET /orders/:id should return order by id","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return order by id"},{"ancestorTitles":["OrdersController","GET /orders/:id"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController GET /orders/:id should throw error for non-existent order","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for non-existent order"},{"ancestorTitles":["OrdersController","GET /orders/:id"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController GET /orders/:id should handle invalid id format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalid id format"},{"ancestorTitles":["OrdersController","GET /orders/:id"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController GET /orders/:id should include user information","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should include user information"},{"ancestorTitles":["OrdersController","PUT /orders/:id"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController PUT /orders/:id should update order successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should update order successfully"},{"ancestorTitles":["OrdersController","PUT /orders/:id"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController PUT /orders/:id should throw error for non-existent order","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for non-existent order"},{"ancestorTitles":["OrdersController","PUT /orders/:id"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController PUT /orders/:id should validate status update","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate status update"},{"ancestorTitles":["OrdersController","PUT /orders/:id"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController PUT /orders/:id should not allow update of immutable fields","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not allow update of immutable fields"},{"ancestorTitles":["OrdersController","DELETE /orders/:id"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController DELETE /orders/:id should delete order successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should delete order successfully"},{"ancestorTitles":["OrdersController","DELETE /orders/:id"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController DELETE /orders/:id should throw error for non-existent order","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for non-existent order"},{"ancestorTitles":["OrdersController","DELETE /orders/:id"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController DELETE /orders/:id should handle invalid id format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalid id format"},{"ancestorTitles":["OrdersController","DELETE /orders/:id"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController DELETE /orders/:id should not allow deletion of completed orders","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not allow deletion of completed orders"},{"ancestorTitles":["OrdersController","GET /orders/statistics/overview"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController GET /orders/statistics/overview should return order statistics","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return order statistics"},{"ancestorTitles":["OrdersController","GET /orders/statistics/overview"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OrdersController GET /orders/statistics/overview should handle empty statistics","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle empty statistics"}],"endTime":1760120582472,"message":"","name":"D:\\onlinestore\\backend\\src\\orders\\orders.controller.spec.ts","startTime":1760120581438,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["UsersService","create"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"UsersService create should successfully create a new user","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should successfully create a new user"},{"ancestorTitles":["UsersService","create"],"duration":28,"failureDetails":[],"failureMessages":[],"fullName":"UsersService create should throw ConflictException if email already exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw ConflictException if email already exists"},{"ancestorTitles":["UsersService","findById"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"UsersService findById should return a user by id","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return a user by id"},{"ancestorTitles":["UsersService","findById"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"UsersService findById should return null if user not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if user not found"},{"ancestorTitles":["UsersService","findOne"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"UsersService findOne should return a user by id","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return a user by id"},{"ancestorTitles":["UsersService","findOne"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"UsersService findOne should throw NotFoundException if user not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw NotFoundException if user not found"},{"ancestorTitles":["UsersService","findByEmail"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"UsersService findByEmail should return a user by email","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return a user by email"},{"ancestorTitles":["UsersService","findByEmail"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"UsersService findByEmail should return null if user not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if user not found"},{"ancestorTitles":["UsersService","findByUsername"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"UsersService findByUsername should return a user by username","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return a user by username"},{"ancestorTitles":["UsersService","findByUsername"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"UsersService findByUsername should return null if user not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if user not found"},{"ancestorTitles":["UsersService","findAll"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"UsersService findAll should return paginated users","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should return paginated users"},{"ancestorTitles":["UsersService","findAll"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"UsersService findAll should return all users without search","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return all users without search"},{"ancestorTitles":["UsersService","update"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"UsersService update should successfully update a user","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should successfully update a user"},{"ancestorTitles":["UsersService","update"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"UsersService update should throw NotFoundException if user not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw NotFoundException if user not found"},{"ancestorTitles":["UsersService","update"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"UsersService update should hash password if provided","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should hash password if provided"},{"ancestorTitles":["UsersService","delete"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"UsersService delete should successfully delete a user","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should successfully delete a user"},{"ancestorTitles":["UsersService","delete"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"UsersService delete should throw NotFoundException if user not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw NotFoundException if user not found"},{"ancestorTitles":["UsersService","remove"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"UsersService remove should successfully remove a user","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should successfully remove a user"},{"ancestorTitles":["UsersService","remove"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"UsersService remove should throw NotFoundException if user not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw NotFoundException if user not found"},{"ancestorTitles":["UsersService","updateLoginInfo"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"UsersService updateLoginInfo should successfully update user login info","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should successfully update user login info"},{"ancestorTitles":["UsersService","isEmailExists"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"UsersService isEmailExists should return true if email exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true if email exists"},{"ancestorTitles":["UsersService","isEmailExists"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"UsersService isEmailExists should return false if email does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false if email does not exist"},{"ancestorTitles":["UsersService","isUsernameExists"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"UsersService isUsernameExists should return true if username exists","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true if username exists"},{"ancestorTitles":["UsersService","isUsernameExists"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"UsersService isUsernameExists should return false if username does not exist","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false if username does not exist"},{"ancestorTitles":["UsersService","getStatistics"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"UsersService getStatistics should return user statistics","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return user statistics"},{"ancestorTitles":["UsersService","getUserStats"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"UsersService getUserStats should return user stats","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return user stats"},{"ancestorTitles":["UsersService","validateUser"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"UsersService validateUser should return user if validation succeeds","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return user if validation succeeds"},{"ancestorTitles":["UsersService","validateUser"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"UsersService validateUser should return null if user not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if user not found"},{"ancestorTitles":["UsersService","validateUser"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"UsersService validateUser should return null if password is incorrect","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if password is incorrect"}],"endTime":1760120583725,"message":"","name":"D:\\onlinestore\\backend\\src\\users\\users.service.spec.ts","startTime":1760120582503,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["HealthController","check"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"HealthController check should return health status in development environment","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return health status in development environment"},{"ancestorTitles":["HealthController","check"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"HealthController check should return health status in production environment","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return health status in production environment"},{"ancestorTitles":["HealthController","check"],"duration":23,"failureDetails":[],"failureMessages":[],"fullName":"HealthController check should handle health check failure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle health check failure"},{"ancestorTitles":["HealthController","getStatus"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"HealthController getStatus should return system status","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return system status"},{"ancestorTitles":["HealthController","getMetrics"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"HealthController getMetrics should return system metrics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return system metrics"},{"ancestorTitles":["HealthController","checkRedpanda"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"HealthController checkRedpanda should return redpanda health when configured","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return redpanda health when configured"},{"ancestorTitles":["HealthController","checkRedpanda"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"HealthController checkRedpanda should return not configured when redpanda is not available","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return not configured when redpanda is not available"},{"ancestorTitles":["HealthController","checkRedpanda"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"HealthController checkRedpanda should handle redpanda health check failure","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle redpanda health check failure"},{"ancestorTitles":["HealthController","redisIndicator"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"HealthController redisIndicator should return redis up status when healthy","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return redis up status when healthy"},{"ancestorTitles":["HealthController","redisIndicator"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"HealthController redisIndicator should return redis down status in development environment when unhealthy","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return redis down status in development environment when unhealthy"},{"ancestorTitles":["HealthController","redisIndicator"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"HealthController redisIndicator should throw HealthCheckError in production environment when unhealthy","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw HealthCheckError in production environment when unhealthy"}],"endTime":1760120584702,"message":"","name":"D:\\onlinestore\\backend\\src\\health\\health.controller.spec.ts","startTime":1760120583764,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CartController","getCartItems"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"CartController getCartItems should return paginated cart items","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return paginated cart items"},{"ancestorTitles":["CartController","getCartItems"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CartController getCartItems should return paginated cart items with default values","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return paginated cart items with default values"},{"ancestorTitles":["CartController","getCartItems"],"duration":21,"failureDetails":[],"failureMessages":[],"fullName":"CartController getCartItems should handle user not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle user not found"},{"ancestorTitles":["CartController","getSelectedCartItems"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"CartController getSelectedCartItems should return selected cart items","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return selected cart items"},{"ancestorTitles":["CartController","getSelectedCartItems"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"CartController getSelectedCartItems should handle empty selected items","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty selected items"},{"ancestorTitles":["CartController","addCartItem"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CartController addCartItem should successfully add item to cart","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should successfully add item to cart"},{"ancestorTitles":["CartController","addCartItem"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"CartController addCartItem should handle insufficient stock","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle insufficient stock"},{"ancestorTitles":["CartController","addCartItem"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CartController addCartItem should handle invalid product","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalid product"},{"ancestorTitles":["CartController","addCartItem"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CartController addCartItem should handle validation errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle validation errors"},{"ancestorTitles":["CartController","updateCartItem"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CartController updateCartItem should successfully update cart item","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should successfully update cart item"},{"ancestorTitles":["CartController","updateCartItem"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"CartController updateCartItem should handle cart item not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle cart item not found"},{"ancestorTitles":["CartController","updateCartItem"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CartController updateCartItem should handle insufficient stock for update","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle insufficient stock for update"},{"ancestorTitles":["CartController","updateAllSelectFlag"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CartController updateAllSelectFlag should successfully update all select flags","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should successfully update all select flags"},{"ancestorTitles":["CartController","updateAllSelectFlag"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"CartController updateAllSelectFlag should handle empty cart","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty cart"},{"ancestorTitles":["CartController","removeCartItem"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"CartController removeCartItem should successfully remove cart item","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should successfully remove cart item"},{"ancestorTitles":["CartController","removeCartItem"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CartController removeCartItem should handle cart item not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle cart item not found"},{"ancestorTitles":["CartController","removeCartItems"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CartController removeCartItems should successfully remove multiple cart items","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should successfully remove multiple cart items"},{"ancestorTitles":["CartController","removeCartItems"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CartController removeCartItems should handle empty cart item ids","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty cart item ids"},{"ancestorTitles":["CartController","removeCartItems"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CartController removeCartItems should handle some cart items not found","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle some cart items not found"},{"ancestorTitles":["CartController","clearSelectedItems"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"CartController clearSelectedItems should successfully clear selected items","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should successfully clear selected items"},{"ancestorTitles":["CartController","clearSelectedItems"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"CartController clearSelectedItems should handle no selected items","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle no selected items"},{"ancestorTitles":["CartController","getCartSummary"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CartController getCartSummary should return cart summary","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return cart summary"},{"ancestorTitles":["CartController","getCartSummary"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"CartController getCartSummary should handle empty cart summary","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle empty cart summary"},{"ancestorTitles":["CartController","getCartItemCount"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"CartController getCartItemCount should return cart item count","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return cart item count"},{"ancestorTitles":["CartController","getCartItemCount"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CartController getCartItemCount should return zero for empty cart","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return zero for empty cart"}],"endTime":1760120585836,"message":"","name":"D:\\onlinestore\\backend\\src\\cart\\interfaces\\cart.controller.spec.ts","startTime":1760120584731,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["AddressController"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"AddressController should be defined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be defined"}],"endTime":1760120586692,"message":"","name":"D:\\onlinestore\\backend\\src\\address\\address.controller.spec.ts","startTime":1760120585879,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["MetricsInterceptor"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"MetricsInterceptor should be defined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be defined"},{"ancestorTitles":["MetricsInterceptor","intercept"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"MetricsInterceptor intercept should increment active connections on request start","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should increment active connections on request start"},{"ancestorTitles":["MetricsInterceptor","intercept"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"MetricsInterceptor intercept should decrement active connections on request completion","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should decrement active connections on request completion"},{"ancestorTitles":["MetricsInterceptor","intercept"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"MetricsInterceptor intercept should record API call metrics on successful response","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record API call metrics on successful response"},{"ancestorTitles":["MetricsInterceptor","intercept"],"duration":52,"failureDetails":[],"failureMessages":[],"fullName":"MetricsInterceptor intercept should record API call metrics on error response","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should record API call metrics on error response"},{"ancestorTitles":["MetricsInterceptor","intercept"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"MetricsInterceptor intercept should calculate request duration correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should calculate request duration correctly"},{"ancestorTitles":["MetricsInterceptor","intercept"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"MetricsInterceptor intercept should handle different HTTP methods","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle different HTTP methods"},{"ancestorTitles":["MetricsInterceptor","intercept"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"MetricsInterceptor intercept should handle different status codes","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"should handle different status codes"},{"ancestorTitles":["MetricsInterceptor","intercept"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"MetricsInterceptor intercept should handle different request paths","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle different request paths"},{"ancestorTitles":["MetricsInterceptor","intercept"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"MetricsInterceptor intercept should handle concurrent requests","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle concurrent requests"}],"endTime":1760120587348,"message":"","name":"D:\\onlinestore\\backend\\src\\monitoring\\metrics.interceptor.spec.ts","startTime":1760120586704,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ConfigurationValidator","validateAll"],"duration":69,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateAll 应该返回有效的验证结果","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"应该返回有效的验证结果"},{"ancestorTitles":["ConfigurationValidator","validateAll"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateAll 应该验证所有配置项","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"应该验证所有配置项"},{"ancestorTitles":["ConfigurationValidator","validateAll"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateAll 应该在开发环境产生警告而不是错误","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该在开发环境产生警告而不是错误"},{"ancestorTitles":["ConfigurationValidator","validateDatabaseConfig"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateDatabaseConfig 应该验证数据库配置","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"应该验证数据库配置"},{"ancestorTitles":["ConfigurationValidator","validateDatabaseConfig"],"duration":230,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateDatabaseConfig 应该在生产环境检查localhost","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该在生产环境检查localhost"},{"ancestorTitles":["ConfigurationValidator","validateDatabaseConfig"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateDatabaseConfig 应该检查数据库密码强度","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该检查数据库密码强度"},{"ancestorTitles":["ConfigurationValidator","validateRedisConfig"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateRedisConfig 应该验证Redis配置","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"应该验证Redis配置"},{"ancestorTitles":["ConfigurationValidator","validateRedisConfig"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateRedisConfig 应该在生产环境检查Redis安全设置","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该在生产环境检查Redis安全设置"},{"ancestorTitles":["ConfigurationValidator","validateJwtConfig"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateJwtConfig 应该验证JWT配置","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"应该验证JWT配置"},{"ancestorTitles":["ConfigurationValidator","validateJwtConfig"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateJwtConfig 应该检查JWT密钥长度","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该检查JWT密钥长度"},{"ancestorTitles":["ConfigurationValidator","validateJwtConfig"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateJwtConfig 应该验证RSA密钥格式","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该验证RSA密钥格式"},{"ancestorTitles":["ConfigurationValidator","validateConnectionPool"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateConnectionPool 应该验证连接池配置","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"应该验证连接池配置"},{"ancestorTitles":["ConfigurationValidator","validateConnectionPool"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateConnectionPool 应该检查连接池大小","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该检查连接池大小"},{"ancestorTitles":["ConfigurationValidator","validateConnectionPool"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateConnectionPool 应该检查连接超时设置","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该检查连接超时设置"},{"ancestorTitles":["ConfigurationValidator","generateConfigReport"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator generateConfigReport 应该生成配置报告","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"应该生成配置报告"},{"ancestorTitles":["ConfigurationValidator","generateConfigReport"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator generateConfigReport 应该包含配置摘要","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"应该包含配置摘要"},{"ancestorTitles":["ConfigurationValidator","generateConfigReport"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator generateConfigReport 应该包含错误和警告信息","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该包含错误和警告信息"},{"ancestorTitles":["ConfigurationValidator","validateRxJSOptimization"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateRxJSOptimization 应该验证RxJS优化配置","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"应该验证RxJS优化配置"},{"ancestorTitles":["ConfigurationValidator","validateRxJSOptimization"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateRxJSOptimization 应该检查重试机制配置","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该检查重试机制配置"},{"ancestorTitles":["ConfigurationValidator","validateCacheKeyManagement"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateCacheKeyManagement 应该验证缓存键管理","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"应该验证缓存键管理"},{"ancestorTitles":["ConfigurationValidator","validateCacheKeyManagement"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateCacheKeyManagement 应该测试缓存键生成","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该测试缓存键生成"},{"ancestorTitles":["ConfigurationValidator","validateCacheKeyManagement"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateCacheKeyManagement 应该检查TTL配置","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该检查TTL配置"},{"ancestorTitles":["ConfigurationValidator","validateErrorLogging"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateErrorLogging 应该验证错误日志配置","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"应该验证错误日志配置"},{"ancestorTitles":["ConfigurationValidator","validateErrorLogging"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateErrorLogging 应该测试错误日志功能","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该测试错误日志功能"},{"ancestorTitles":["ConfigurationValidator","validateErrorLogging"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateErrorLogging 应该检查日志级别配置","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该检查日志级别配置"},{"ancestorTitles":["ConfigurationValidator","validateApiVersionControl"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateApiVersionControl 应该验证API版本控制","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"应该验证API版本控制"},{"ancestorTitles":["ConfigurationValidator","validateApiVersionControl"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator validateApiVersionControl 应该验证版本支持","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该验证版本支持"},{"ancestorTitles":["ConfigurationValidator","边界情况测试"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator 边界情况测试 应该处理空配置","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"应该处理空配置"},{"ancestorTitles":["ConfigurationValidator","边界情况测试"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator 边界情况测试 应该处理无效配置","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该处理无效配置"},{"ancestorTitles":["ConfigurationValidator","边界情况测试"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator 边界情况测试 应该处理缺失的环境变量","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该处理缺失的环境变量"},{"ancestorTitles":["ConfigurationValidator","性能测试"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator 性能测试 应该在合理时间内完成验证","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该在合理时间内完成验证"},{"ancestorTitles":["ConfigurationValidator","性能测试"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator 性能测试 应该能够处理多次验证调用","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"应该能够处理多次验证调用"},{"ancestorTitles":["ConfigurationValidator","集成测试"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator 集成测试 应该与所有配置模块集成","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该与所有配置模块集成"},{"ancestorTitles":["ConfigurationValidator","集成测试"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"ConfigurationValidator 集成测试 应该提供完整的验证覆盖","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"应该提供完整的验证覆盖"}],"endTime":1760120588242,"message":"","name":"D:\\onlinestore\\backend\\src\\config\\configuration.spec.ts","startTime":1760120587368,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["EnhancedCacheService","基础缓存操作"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"EnhancedCacheService 基础缓存操作 should get cache with correct parameters","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should get cache with correct parameters"},{"ancestorTitles":["EnhancedCacheService","基础缓存操作"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"EnhancedCacheService 基础缓存操作 should return cached value","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return cached value"},{"ancestorTitles":["EnhancedCacheService","基础缓存操作"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EnhancedCacheService 基础缓存操作 should return null for non-existent key","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return null for non-existent key"},{"ancestorTitles":["EnhancedCacheService","基础缓存操作"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EnhancedCacheService 基础缓存操作 should delete cache key","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should delete cache key"},{"ancestorTitles":["EnhancedCacheService","基础缓存操作"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EnhancedCacheService 基础缓存操作 should delete pattern","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should delete pattern"},{"ancestorTitles":["EnhancedCacheService","缓存击穿防护测试"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"EnhancedCacheService 缓存击穿防护测试 应该防止并发请求重复执行回调","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"应该防止并发请求重复执行回调"},{"ancestorTitles":["EnhancedCacheService","缓存击穿防护测试"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"EnhancedCacheService 缓存击穿防护测试 应该正确处理本地缓存命中","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"应该正确处理本地缓存命中"},{"ancestorTitles":["EnhancedCacheService","缓存穿透防护测试"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"EnhancedCacheService 缓存穿透防护测试 应该缓存null值以防止穿透","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"应该缓存null值以防止穿透"},{"ancestorTitles":["EnhancedCacheService","缓存穿透防护测试"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"EnhancedCacheService 缓存穿透防护测试 应该缓存undefined值以防止穿透","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"应该缓存undefined值以防止穿透"},{"ancestorTitles":["EnhancedCacheService","缓存雪崩防护测试"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"EnhancedCacheService 缓存雪崩防护测试 应该为TTL添加随机值以防止雪崩","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"应该为TTL添加随机值以防止雪崩"},{"ancestorTitles":["EnhancedCacheService","缓存预热测试"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"EnhancedCacheService 缓存预热测试 应该正确预热多个缓存键","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"应该正确预热多个缓存键"},{"ancestorTitles":["EnhancedCacheService","缓存预热测试"],"duration":30,"failureDetails":[],"failureMessages":[],"fullName":"EnhancedCacheService 缓存预热测试 应该处理预热过程中的错误","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"应该处理预热过程中的错误"},{"ancestorTitles":["EnhancedCacheService","缓存统计测试"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"EnhancedCacheService 缓存统计测试 应该返回正确的缓存统计信息","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"应该返回正确的缓存统计信息"},{"ancestorTitles":["EnhancedCacheService","错误处理测试"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EnhancedCacheService 错误处理测试 应该在Redis失败时降级到回调","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"应该在Redis失败时降级到回调"},{"ancestorTitles":["EnhancedCacheService","错误处理测试"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"EnhancedCacheService 错误处理测试 应该在回调失败时抛出错误","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该在回调失败时抛出错误"},{"ancestorTitles":["EnhancedCacheService","本地缓存限制测试"],"duration":84,"failureDetails":[],"failureMessages":[],"fullName":"EnhancedCacheService 本地缓存限制测试 应该限制本地缓存大小","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该限制本地缓存大小"},{"ancestorTitles":["EnhancedCacheService","锁机制测试"],"duration":115,"failureDetails":[],"failureMessages":[],"fullName":"EnhancedCacheService 锁机制测试 应该正确管理活跃锁","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"应该正确管理活跃锁"}],"endTime":1760120589189,"message":"","name":"D:\\onlinestore\\backend\\src\\cache\\enhanced-cache.spec.ts","startTime":1760120588296,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["AlertingService","Service Initialization"],"duration":45,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Service Initialization should be defined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be defined"},{"ancestorTitles":["AlertingService","Service Initialization"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Service Initialization should have all dependencies injected","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should have all dependencies injected"},{"ancestorTitles":["AlertingService","Service Initialization"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Service Initialization should initialize with default rules","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize with default rules"},{"ancestorTitles":["AlertingService","Check Alerts"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Check Alerts should trigger alert when CPU usage exceeds threshold","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should trigger alert when CPU usage exceeds threshold"},{"ancestorTitles":["AlertingService","Check Alerts"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Check Alerts should trigger alert when memory usage exceeds threshold","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should trigger alert when memory usage exceeds threshold"},{"ancestorTitles":["AlertingService","Check Alerts"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Check Alerts should trigger alert when error rate exceeds threshold","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should trigger alert when error rate exceeds threshold"},{"ancestorTitles":["AlertingService","Check Alerts"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Check Alerts should trigger alert when response time exceeds threshold","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should trigger alert when response time exceeds threshold"},{"ancestorTitles":["AlertingService","Check Alerts"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Check Alerts should trigger alert when failed logins exceed threshold","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should trigger alert when failed logins exceed threshold"},{"ancestorTitles":["AlertingService","Check Alerts"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Check Alerts should resolve alert when metrics return to normal","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should resolve alert when metrics return to normal"},{"ancestorTitles":["AlertingService","Check Alerts"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Check Alerts should not trigger duplicate alerts","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not trigger duplicate alerts"},{"ancestorTitles":["AlertingService","Alert Rules Management"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Alert Rules Management should add new alert rule","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should add new alert rule"},{"ancestorTitles":["AlertingService","Alert Rules Management"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Alert Rules Management should update existing alert rule","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should update existing alert rule"},{"ancestorTitles":["AlertingService","Alert Rules Management"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Alert Rules Management should delete alert rule","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should delete alert rule"},{"ancestorTitles":["AlertingService","Alert Suppression"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Alert Suppression should suppress active alert","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should suppress active alert"},{"ancestorTitles":["AlertingService","Get Statistics"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Get Statistics should return alert statistics","invocations":1,"location":null,"numPassingAsserts":17,"retryReasons":[],"status":"passed","title":"should return alert statistics"},{"ancestorTitles":["AlertingService","Get Statistics"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Get Statistics should update statistics after triggering alerts","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should update statistics after triggering alerts"},{"ancestorTitles":["AlertingService","Notification Sending"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Notification Sending should send Slack notification when alert is triggered","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should send Slack notification when alert is triggered"},{"ancestorTitles":["AlertingService","Notification Sending"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Notification Sending should handle Slack notification errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle Slack notification errors gracefully"},{"ancestorTitles":["AlertingService","Notification Sending"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Notification Sending should send email notification when enabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should send email notification when enabled"},{"ancestorTitles":["AlertingService","Integration Scenarios"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Integration Scenarios should handle complete alert lifecycle","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle complete alert lifecycle"},{"ancestorTitles":["AlertingService","Integration Scenarios"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Integration Scenarios should handle multiple simultaneous alerts","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should handle multiple simultaneous alerts"},{"ancestorTitles":["AlertingService","Error Handling"],"duration":88,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Error Handling should handle tracing service errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle tracing service errors gracefully"},{"ancestorTitles":["AlertingService","Error Handling"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"AlertingService Error Handling should handle cache service errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle cache service errors gracefully"}],"endTime":1760120589948,"message":"","name":"D:\\onlinestore\\backend\\src\\common\\alerting\\alerting.service.spec.ts","startTime":1760120589218,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["EncryptionService","Service Initialization"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Service Initialization should be defined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be defined"},{"ancestorTitles":["EncryptionService","Service Initialization"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Service Initialization should have all dependencies injected","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should have all dependencies injected"},{"ancestorTitles":["EncryptionService","Service Initialization"],"duration":48,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Service Initialization should throw error when ENCRYPTION_KEY is missing","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when ENCRYPTION_KEY is missing"},{"ancestorTitles":["EncryptionService","Service Initialization"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Service Initialization should throw error when ENCRYPTION_KEY has invalid length","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when ENCRYPTION_KEY has invalid length"},{"ancestorTitles":["EncryptionService","Service Initialization"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Service Initialization should throw error when ENCRYPTION_KEY is too short","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when ENCRYPTION_KEY is too short"},{"ancestorTitles":["EncryptionService","Encrypt"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Encrypt should encrypt text successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should encrypt text successfully"},{"ancestorTitles":["EncryptionService","Encrypt"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Encrypt should handle encryption errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle encryption errors gracefully"},{"ancestorTitles":["EncryptionService","Decrypt"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Decrypt should decrypt text successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should decrypt text successfully"},{"ancestorTitles":["EncryptionService","Decrypt"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Decrypt should handle invalid encrypted text format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalid encrypted text format"},{"ancestorTitles":["EncryptionService","Decrypt"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Decrypt should handle missing encryption components","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing encryption components"},{"ancestorTitles":["EncryptionService","Decrypt"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Decrypt should handle invalid IV length","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalid IV length"},{"ancestorTitles":["EncryptionService","Decrypt"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Decrypt should handle invalid auth tag length","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalid auth tag length"},{"ancestorTitles":["EncryptionService","Decrypt"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Decrypt should handle decryption errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle decryption errors gracefully"},{"ancestorTitles":["EncryptionService","Generate Secure Random"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Generate Secure Random should generate secure random string with default length","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate secure random string with default length"},{"ancestorTitles":["EncryptionService","Generate Secure Random"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Generate Secure Random should generate secure random string with custom length","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate secure random string with custom length"},{"ancestorTitles":["EncryptionService","Generate Secure Random"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Generate Secure Random should handle random generation errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle random generation errors gracefully"},{"ancestorTitles":["EncryptionService","Generate HMAC"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Generate HMAC should generate HMAC signature","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should generate HMAC signature"},{"ancestorTitles":["EncryptionService","Verify HMAC"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Verify HMAC should verify HMAC signature successfully","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should verify HMAC signature successfully"},{"ancestorTitles":["EncryptionService","Verify HMAC"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Verify HMAC should return false for invalid signature","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false for invalid signature"},{"ancestorTitles":["EncryptionService","Generate Payment Nonce"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Generate Payment Nonce should generate payment nonce with timestamp and random string","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should generate payment nonce with timestamp and random string"},{"ancestorTitles":["EncryptionService","Validate Payment Nonce"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Validate Payment Nonce should validate valid payment nonce","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should validate valid payment nonce"},{"ancestorTitles":["EncryptionService","Validate Payment Nonce"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Validate Payment Nonce should reject expired payment nonce","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should reject expired payment nonce"},{"ancestorTitles":["EncryptionService","Validate Payment Nonce"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Validate Payment Nonce should handle invalid nonce format","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle invalid nonce format"},{"ancestorTitles":["EncryptionService","Validate Payment Nonce"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Validate Payment Nonce should handle non-numeric timestamp","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle non-numeric timestamp"},{"ancestorTitles":["EncryptionService","Integration Scenarios"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Integration Scenarios should handle complete encryption/decryption workflow","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle complete encryption/decryption workflow"},{"ancestorTitles":["EncryptionService","Integration Scenarios"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Integration Scenarios should handle complete HMAC generation and verification workflow","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle complete HMAC generation and verification workflow"},{"ancestorTitles":["EncryptionService","Integration Scenarios"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Integration Scenarios should handle complete payment nonce generation and validation workflow","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle complete payment nonce generation and validation workflow"},{"ancestorTitles":["EncryptionService","Error Handling"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Error Handling should handle missing configuration gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing configuration gracefully"},{"ancestorTitles":["EncryptionService","Error Handling"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"EncryptionService Error Handling should handle crypto module errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle crypto module errors gracefully"}],"endTime":1760120590587,"message":"","name":"D:\\onlinestore\\backend\\src\\common\\security\\encryption.service.spec.ts","startTime":1760120589992,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Roles Decorator","Roles decorator"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Roles Decorator Roles decorator should create a decorator that sets metadata with single role","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create a decorator that sets metadata with single role"},{"ancestorTitles":["Roles Decorator","Roles decorator"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Roles Decorator Roles decorator should create a decorator that sets metadata with multiple roles","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create a decorator that sets metadata with multiple roles"},{"ancestorTitles":["Roles Decorator","Roles decorator"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Roles Decorator Roles decorator should create a decorator that sets metadata with empty roles","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create a decorator that sets metadata with empty roles"},{"ancestorTitles":["Roles Decorator","Roles decorator"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Roles Decorator Roles decorator should create a decorator that sets metadata with all user roles","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create a decorator that sets metadata with all user roles"},{"ancestorTitles":["Roles Decorator","Roles decorator"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Roles Decorator Roles decorator should handle UserRole.USER correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle UserRole.USER correctly"},{"ancestorTitles":["Roles Decorator","Roles decorator"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Roles Decorator Roles decorator should handle UserRole.MODERATOR correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle UserRole.MODERATOR correctly"},{"ancestorTitles":["Roles Decorator","Roles decorator"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Roles Decorator Roles decorator should maintain ROLES_KEY constant","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should maintain ROLES_KEY constant"},{"ancestorTitles":["Roles Decorator","Roles decorator"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Roles Decorator Roles decorator should call SetMetadata when Roles is called","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call SetMetadata when Roles is called"},{"ancestorTitles":["Roles Decorator","Roles decorator"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Roles Decorator Roles decorator should handle repeated roles correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle repeated roles correctly"},{"ancestorTitles":["Roles Decorator","Roles decorator"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Roles Decorator Roles decorator should handle mixed roles correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle mixed roles correctly"},{"ancestorTitles":["Roles Decorator","Roles decorator"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"Roles Decorator Roles decorator should preserve the order of roles","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should preserve the order of roles"},{"ancestorTitles":["Roles Decorator","Roles decorator edge cases"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Roles Decorator Roles decorator edge cases should handle undefined and null roles","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle undefined and null roles"},{"ancestorTitles":["Roles Decorator","Roles decorator edge cases"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Roles Decorator Roles decorator edge cases should handle non-UserRole values","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle non-UserRole values"},{"ancestorTitles":["Roles Decorator","Roles decorator edge cases"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Roles Decorator Roles decorator edge cases should handle very large number of roles","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle very large number of roles"}],"endTime":1760120591289,"message":"","name":"D:\\onlinestore\\backend\\src\\auth\\decorators\\roles.decorator.spec.ts","startTime":1760120590621,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["BusinessLoggerService"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"BusinessLoggerService should be defined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be defined"},{"ancestorTitles":["BusinessLoggerService","logUserAction"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"BusinessLoggerService logUserAction should log user action correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log user action correctly"},{"ancestorTitles":["BusinessLoggerService","logUserAction"],"duration":36,"failureDetails":[],"failureMessages":[],"fullName":"BusinessLoggerService logUserAction negative-path: does not throw when transport.log fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"negative-path: does not throw when transport.log fails"},{"ancestorTitles":["BusinessLoggerService","logOrderEvent"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"BusinessLoggerService logOrderEvent should log order event correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log order event correctly"},{"ancestorTitles":["BusinessLoggerService","logOrderEvent"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"BusinessLoggerService logOrderEvent negative-path: does not throw when transport.log fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"negative-path: does not throw when transport.log fails"},{"ancestorTitles":["BusinessLoggerService","logPaymentEvent"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"BusinessLoggerService logPaymentEvent should log payment event correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log payment event correctly"},{"ancestorTitles":["BusinessLoggerService","logInventoryEvent"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"BusinessLoggerService logInventoryEvent should log inventory event correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log inventory event correctly"},{"ancestorTitles":["BusinessLoggerService","logSystemEvent"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"BusinessLoggerService logSystemEvent should log system event correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log system event correctly"},{"ancestorTitles":["BusinessLoggerService","logSystemEvent"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"BusinessLoggerService logSystemEvent negative-path: error log does not leak exception","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"negative-path: error log does not leak exception"},{"ancestorTitles":["BusinessLoggerService","logError"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"BusinessLoggerService logError should log error correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log error correctly"},{"ancestorTitles":["BusinessLoggerService","flush"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"BusinessLoggerService flush should flush logs without errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should flush logs without errors"}],"endTime":1760120591796,"message":"","name":"D:\\onlinestore\\backend\\src\\logging\\business-logger.service.spec.ts","startTime":1760120591315,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["EventBus","publish"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"EventBus publish 应该成功发布事件","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该成功发布事件"},{"ancestorTitles":["EventBus","publish"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EventBus publish 应该在没有注册处理器时跳过","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该在没有注册处理器时跳过"},{"ancestorTitles":["EventBus","publish"],"duration":45,"failureDetails":[],"failureMessages":[],"fullName":"EventBus publish 应该正确处理处理器异常","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"应该正确处理处理器异常"},{"ancestorTitles":["EventBus","publishAsync"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"EventBus publishAsync 应该异步发布事件","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该异步发布事件"},{"ancestorTitles":["EventBus","publishAsync"],"duration":36,"failureDetails":[],"failureMessages":[],"fullName":"EventBus publishAsync 应该并行处理多个处理器","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"应该并行处理多个处理器"},{"ancestorTitles":["EventBus","register"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EventBus register 应该成功注册事件处理器","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"应该成功注册事件处理器"},{"ancestorTitles":["EventBus","register"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"EventBus register 应该覆盖已注册的处理器","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"应该覆盖已注册的处理器"},{"ancestorTitles":["EventBus","register"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"EventBus register 应该支持同一事件的多个处理器","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"应该支持同一事件的多个处理器"},{"ancestorTitles":["EventBus","unregister"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"EventBus unregister 应该成功注销事件处理器","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该成功注销事件处理器"},{"ancestorTitles":["EventBus","unregister"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EventBus unregister 应该注销指定的事件类型","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该注销指定的事件类型"},{"ancestorTitles":["EventBus","clear"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EventBus clear 应该清空所有事件处理器","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该清空所有事件处理器"},{"ancestorTitles":["EventBus","getRegisteredEventTypes"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EventBus getRegisteredEventTypes 应该返回所有注册的事件类型","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"应该返回所有注册的事件类型"},{"ancestorTitles":["EventBus","getHandlers"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EventBus getHandlers 应该返回指定事件类型的处理器","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"应该返回指定事件类型的处理器"},{"ancestorTitles":["EventBus","getHandlers"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EventBus getHandlers 应该返回空数组对于未注册的事件类型","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该返回空数组对于未注册的事件类型"},{"ancestorTitles":["EventBus","hasHandlers"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"EventBus hasHandlers 应该检查事件类型是否有处理器","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该检查事件类型是否有处理器"},{"ancestorTitles":["EventBus","hasHandlers"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"EventBus hasHandlers 应该返回false对于未注册的事件类型","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该返回false对于未注册的事件类型"},{"ancestorTitles":["EventBus","middlewares"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"EventBus middlewares 应该在执行事件时调用中间件","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"应该在执行事件时调用中间件"},{"ancestorTitles":["EventBus","middlewares"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EventBus middlewares 应该返回添加的中间件列表","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"应该返回添加的中间件列表"},{"ancestorTitles":["EventBus","getExecutionStats"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"EventBus getExecutionStats 应该返回执行统计信息","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"应该返回执行统计信息"},{"ancestorTitles":["EventBus","resetStats"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"EventBus resetStats 应该重置统计信息","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"应该重置统计信息"}],"endTime":1760120592572,"message":"","name":"D:\\onlinestore\\backend\\src\\cqrs\\bus\\event.bus.spec.ts","startTime":1760120591826,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CommandBus","execute"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"CommandBus execute 应该成功执行命令","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"应该成功执行命令"},{"ancestorTitles":["CommandBus","execute"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"CommandBus execute 应该在没有注册处理器时返回错误","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"应该在没有注册处理器时返回错误"},{"ancestorTitles":["CommandBus","execute"],"duration":32,"failureDetails":[],"failureMessages":[],"fullName":"CommandBus execute 应该正确处理处理器异常","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"应该正确处理处理器异常"},{"ancestorTitles":["CommandBus","executeAsync"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"CommandBus executeAsync 应该异步执行命令并返回命令ID","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"应该异步执行命令并返回命令ID"},{"ancestorTitles":["CommandBus","executeAsync"],"duration":113,"failureDetails":[],"failureMessages":[],"fullName":"CommandBus executeAsync 应该正确设置异步执行状态","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"应该正确设置异步执行状态"},{"ancestorTitles":["CommandBus","getExecutionStatus"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"CommandBus getExecutionStatus 应该返回正确的执行状态","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"应该返回正确的执行状态"},{"ancestorTitles":["CommandBus","getExecutionStatus"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"CommandBus getExecutionStatus 应该返回null对于不存在的命令ID","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该返回null对于不存在的命令ID"},{"ancestorTitles":["CommandBus","register"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"CommandBus register 应该成功注册命令处理器","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该成功注册命令处理器"},{"ancestorTitles":["CommandBus","register"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"CommandBus register 应该覆盖已注册的处理器","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该覆盖已注册的处理器"},{"ancestorTitles":["CommandBus","addMiddleware"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"CommandBus addMiddleware 应该成功添加中间件","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该成功添加中间件"},{"ancestorTitles":["CommandBus","removeMiddleware"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"CommandBus removeMiddleware 应该成功移除中间件","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该成功移除中间件"},{"ancestorTitles":["CommandBus","cleanupExpiredStatus"],"duration":59,"failureDetails":[],"failureMessages":[],"fullName":"CommandBus cleanupExpiredStatus 应该清理过期的执行状态","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该清理过期的执行状态"},{"ancestorTitles":["CommandBus","getRegisteredCommandTypes"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"CommandBus getRegisteredCommandTypes 应该返回所有注册的命令类型","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"应该返回所有注册的命令类型"},{"ancestorTitles":["CommandBus","getMiddlewares"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"CommandBus getMiddlewares 应该返回所有中间件","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"应该返回所有中间件"},{"ancestorTitles":["CommandBus","getAllExecutionStatus"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"CommandBus getAllExecutionStatus 应该返回所有执行状态","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"应该返回所有执行状态"}],"endTime":1760120593609,"message":"","name":"D:\\onlinestore\\backend\\src\\cqrs\\bus\\command.bus.spec.ts","startTime":1760120592605,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["RolesGuard","canActivate"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard canActivate should allow access when no roles required","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should allow access when no roles required"},{"ancestorTitles":["RolesGuard","canActivate"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard canActivate should return false when no user in request","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when no user in request"},{"ancestorTitles":["RolesGuard","canActivate"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard canActivate should return false when user has no roles","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when user has no roles"},{"ancestorTitles":["RolesGuard","canActivate"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard canActivate should allow access when user has required role","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow access when user has required role"},{"ancestorTitles":["RolesGuard","canActivate"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard canActivate should allow access when admin user accesses admin-only route","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow access when admin user accesses admin-only route"},{"ancestorTitles":["RolesGuard","canActivate"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard canActivate should allow access when moderator user accesses moderator-only route","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow access when moderator user accesses moderator-only route"},{"ancestorTitles":["RolesGuard","canActivate"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard canActivate should return false when user lacks required role","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when user lacks required role"},{"ancestorTitles":["RolesGuard","canActivate"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard canActivate should allow access when user has one of multiple required roles","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow access when user has one of multiple required roles"},{"ancestorTitles":["RolesGuard","canActivate"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard canActivate should return false when user has none of multiple required roles","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when user has none of multiple required roles"},{"ancestorTitles":["RolesGuard","canActivate"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard canActivate should allow access when user has all required roles (AND logic)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow access when user has all required roles (AND logic)"},{"ancestorTitles":["RolesGuard","canActivate"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard canActivate should handle case when roles is null or undefined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle case when roles is null or undefined"},{"ancestorTitles":["RolesGuard","canActivate"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard canActivate should handle case when user roles is not an array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle case when user roles is not an array"},{"ancestorTitles":["RolesGuard","canActivate"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard canActivate should handle case when required roles is not an array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle case when required roles is not an array"},{"ancestorTitles":["RolesGuard","canActivate"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard canActivate should allow access when user has higher privilege role","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should allow access when user has higher privilege role"},{"ancestorTitles":["RolesGuard","canActivate"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard canActivate should return false when user has lower privilege role","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when user has lower privilege role"},{"ancestorTitles":["RolesGuard","matchRoles"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard matchRoles should return true when user has required role","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when user has required role"},{"ancestorTitles":["RolesGuard","matchRoles"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard matchRoles should return false when user lacks required role","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when user lacks required role"},{"ancestorTitles":["RolesGuard","matchRoles"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard matchRoles should return true when user has one of multiple required roles","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when user has one of multiple required roles"},{"ancestorTitles":["RolesGuard","matchRoles"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard matchRoles should return true when user has all required roles","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when user has all required roles"},{"ancestorTitles":["RolesGuard","matchRoles"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard matchRoles should return true when user has only some of required roles (OR logic)","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when user has only some of required roles (OR logic)"},{"ancestorTitles":["RolesGuard","matchRoles"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard matchRoles should return true when no roles required","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when no roles required"},{"ancestorTitles":["RolesGuard","matchRoles"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard matchRoles should return false when user has no roles but roles required","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when user has no roles but roles required"},{"ancestorTitles":["RolesGuard","matchRoles"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"RolesGuard matchRoles should handle empty user roles array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty user roles array"}],"endTime":1760120594662,"message":"","name":"D:\\onlinestore\\backend\\src\\auth\\guards\\roles.guard.spec.ts","startTime":1760120593632,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["RedisHealthService","Service Initialization"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Service Initialization should be defined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be defined"},{"ancestorTitles":["RedisHealthService","Service Initialization"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Service Initialization should disable Redis client in development environment","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should disable Redis client in development environment"},{"ancestorTitles":["RedisHealthService","Service Initialization"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Service Initialization should disable Redis client in test environment","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should disable Redis client in test environment"},{"ancestorTitles":["RedisHealthService","Service Initialization"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Service Initialization should initialize Redis client in production environment","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize Redis client in production environment"},{"ancestorTitles":["RedisHealthService","Service Initialization"],"duration":42,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Service Initialization should handle initialization errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle initialization errors gracefully"},{"ancestorTitles":["RedisHealthService","Event Listeners Setup"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Event Listeners Setup should set up all required event listeners","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should set up all required event listeners"},{"ancestorTitles":["RedisHealthService","Health Check"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Health Check should return healthy status when Redis is responsive","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should return healthy status when Redis is responsive"},{"ancestorTitles":["RedisHealthService","Health Check"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Health Check should return unhealthy status when Redis is not responsive","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should return unhealthy status when Redis is not responsive"},{"ancestorTitles":["RedisHealthService","Health Check"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Health Check should return unhealthy status when Redis client is disabled","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return unhealthy status when Redis client is disabled"},{"ancestorTitles":["RedisHealthService","Health Check"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Health Check should measure latency correctly","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should measure latency correctly"},{"ancestorTitles":["RedisHealthService","Redis Info"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Redis Info should return parsed Redis info when successful","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should return parsed Redis info when successful"},{"ancestorTitles":["RedisHealthService","Redis Info"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Redis Info should return null when Redis info command fails","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should return null when Redis info command fails"},{"ancestorTitles":["RedisHealthService","Redis Info"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Redis Info should return null when Redis client is disabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null when Redis client is disabled"},{"ancestorTitles":["RedisHealthService","Cache Operations"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Cache Operations should successfully set and get cache values","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should successfully set and get cache values"},{"ancestorTitles":["RedisHealthService","Cache Operations"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Cache Operations should handle cache operation errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"should handle cache operation errors gracefully"},{"ancestorTitles":["RedisHealthService","Client Access"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Client Access should return Redis client when available","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return Redis client when available"},{"ancestorTitles":["RedisHealthService","Client Access"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Client Access should return undefined when Redis client is disabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return undefined when Redis client is disabled"},{"ancestorTitles":["RedisHealthService","Retry Strategy"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Retry Strategy should implement exponential backoff retry strategy","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should implement exponential backoff retry strategy"},{"ancestorTitles":["RedisHealthService","Reconnection"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Reconnection should reconnect on specific errors","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should reconnect on specific errors"},{"ancestorTitles":["RedisHealthService","Integration Scenarios"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Integration Scenarios should handle complete health check workflow","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle complete health check workflow"},{"ancestorTitles":["RedisHealthService","Integration Scenarios"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"RedisHealthService Integration Scenarios should handle failure scenarios gracefully","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle failure scenarios gracefully"}],"endTime":1760120595149,"message":"","name":"D:\\onlinestore\\backend\\src\\redis\\redis-health.service.standalone.spec.ts","startTime":1760120594685,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CacheService","Service Initialization"],"duration":27,"failureDetails":[],"failureMessages":[],"fullName":"CacheService Service Initialization should be defined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be defined"},{"ancestorTitles":["CacheService","Service Initialization"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"CacheService Service Initialization should have all dependencies injected","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should have all dependencies injected"},{"ancestorTitles":["CacheService","Get"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"CacheService Get should return cached value when exists","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return cached value when exists"},{"ancestorTitles":["CacheService","Get"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"CacheService Get should return null when value does not exist","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return null when value does not exist"},{"ancestorTitles":["CacheService","Get"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"CacheService Get should handle cache errors gracefully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle cache errors gracefully"},{"ancestorTitles":["CacheService","Set"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"CacheService Set should set value in cache with default TTL","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should set value in cache with default TTL"},{"ancestorTitles":["CacheService","Set"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"CacheService Set should set value in cache with custom TTL","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should set value in cache with custom TTL"},{"ancestorTitles":["CacheService","Set"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"CacheService Set should set value in cache without ID","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should set value in cache without ID"},{"ancestorTitles":["CacheService","Set"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"CacheService Set should handle set errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle set errors gracefully"},{"ancestorTitles":["CacheService","Delete"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"CacheService Delete should delete value from cache","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should delete value from cache"},{"ancestorTitles":["CacheService","Delete"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CacheService Delete should handle delete errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle delete errors gracefully"},{"ancestorTitles":["CacheService","Delete By Pattern"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"CacheService Delete By Pattern should log warning for pattern-based deletion","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should log warning for pattern-based deletion"},{"ancestorTitles":["CacheService","Delete By Pattern"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"CacheService Delete By Pattern should handle pattern deletion errors gracefully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle pattern deletion errors gracefully"},{"ancestorTitles":["CacheService","Warmup"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"CacheService Warmup should warmup cache with data","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should warmup cache with data"},{"ancestorTitles":["CacheService","Get Stats"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"CacheService Get Stats should return cache statistics","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return cache statistics"},{"ancestorTitles":["CacheService","Default TTL"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"CacheService Default TTL should return correct TTL for different resources","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should return correct TTL for different resources"},{"ancestorTitles":["CacheService","Integration Scenarios"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"CacheService Integration Scenarios should handle complete cache workflow","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle complete cache workflow"},{"ancestorTitles":["CacheService","Performance Monitoring"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"CacheService Performance Monitoring should record metrics for cache operations","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should record metrics for cache operations"}],"endTime":1760120595930,"message":"","name":"D:\\onlinestore\\backend\\src\\cache\\cache.service.spec.ts","startTime":1760120595184,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["NotificationService","sendNotification"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"NotificationService sendNotification should send email notification immediately","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should send email notification immediately"},{"ancestorTitles":["NotificationService","sendNotification"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"NotificationService sendNotification should send SMS notification immediately","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should send SMS notification immediately"},{"ancestorTitles":["NotificationService","sendNotification"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"NotificationService sendNotification should send push notification immediately","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should send push notification immediately"},{"ancestorTitles":["NotificationService","sendNotification"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"NotificationService sendNotification should handle in-app notification without sending","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should handle in-app notification without sending"},{"ancestorTitles":["NotificationService","sendNotification"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"NotificationService sendNotification should schedule notification for later sending","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should schedule notification for later sending"},{"ancestorTitles":["NotificationService","sendNotification"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"NotificationService sendNotification should handle email service failure","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should handle email service failure"},{"ancestorTitles":["NotificationService","getUserNotifications"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"NotificationService getUserNotifications should return user notifications with pagination","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return user notifications with pagination"},{"ancestorTitles":["NotificationService","getUserNotifications"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"NotificationService getUserNotifications should use default pagination values","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should use default pagination values"},{"ancestorTitles":["NotificationService","markAsRead"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"NotificationService markAsRead should mark notification as read","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should mark notification as read"},{"ancestorTitles":["NotificationService","markAllAsRead"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"NotificationService markAllAsRead should mark all sent notifications as read for user","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should mark all sent notifications as read for user"},{"ancestorTitles":["NotificationService","getNotificationById"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"NotificationService getNotificationById should return notification by id","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return notification by id"},{"ancestorTitles":["NotificationService","getNotificationById"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"NotificationService getNotificationById should return null if notification not found","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return null if notification not found"},{"ancestorTitles":["NotificationService","createNotification"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"NotificationService createNotification should create notification using DTO","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should create notification using DTO"}],"endTime":1760120596723,"message":"","name":"D:\\onlinestore\\backend\\src\\notification\\notification.service.spec.ts","startTime":1760120595961,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["UserBehaviorTracker"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"UserBehaviorTracker should be defined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be defined"},{"ancestorTitles":["UserBehaviorTracker","trackPageView"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"UserBehaviorTracker trackPageView should track page view correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should track page view correctly"},{"ancestorTitles":["UserBehaviorTracker","trackPageView"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"UserBehaviorTracker trackPageView should track page view without userId","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should track page view without userId"},{"ancestorTitles":["UserBehaviorTracker","trackPageView"],"duration":35,"failureDetails":[],"failureMessages":[],"fullName":"UserBehaviorTracker trackPageView negative-path: does not throw when transport.log fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"negative-path: does not throw when transport.log fails"},{"ancestorTitles":["UserBehaviorTracker","trackProductView"],"duration":25,"failureDetails":[],"failureMessages":[],"fullName":"UserBehaviorTracker trackProductView should track product view correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should track product view correctly"},{"ancestorTitles":["UserBehaviorTracker","trackProductView"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"UserBehaviorTracker trackProductView negative-path: does not throw when transport.log fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"negative-path: does not throw when transport.log fails"},{"ancestorTitles":["UserBehaviorTracker","trackSearch"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"UserBehaviorTracker trackSearch should track search correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should track search correctly"},{"ancestorTitles":["UserBehaviorTracker","trackCartOperation"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"UserBehaviorTracker trackCartOperation should track cart add correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should track cart add correctly"},{"ancestorTitles":["UserBehaviorTracker","trackCartOperation"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"UserBehaviorTracker trackCartOperation should track cart remove correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should track cart remove correctly"},{"ancestorTitles":["UserBehaviorTracker","trackCheckout"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"UserBehaviorTracker trackCheckout should track checkout correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should track checkout correctly"},{"ancestorTitles":["UserBehaviorTracker","trackPurchase"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"UserBehaviorTracker trackPurchase should track purchase correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should track purchase correctly"},{"ancestorTitles":["UserBehaviorTracker","trackCustomEvent"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"UserBehaviorTracker trackCustomEvent should track custom event correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should track custom event correctly"},{"ancestorTitles":["UserBehaviorTracker","flush"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"UserBehaviorTracker flush should flush logs without errors","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should flush logs without errors"},{"ancestorTitles":["UserBehaviorTracker","extractDeviceInfo"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"UserBehaviorTracker extractDeviceInfo should extract device info correctly","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract device info correctly"},{"ancestorTitles":["UserBehaviorTracker","extractDeviceInfo"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"UserBehaviorTracker extractDeviceInfo should handle missing request","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle missing request"},{"ancestorTitles":["UserBehaviorTracker","getClientIp"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"UserBehaviorTracker getClientIp should get client IP from x-forwarded-for header","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get client IP from x-forwarded-for header"},{"ancestorTitles":["UserBehaviorTracker","getClientIp"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"UserBehaviorTracker getClientIp should get client IP from x-real-ip header","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should get client IP from x-real-ip header"},{"ancestorTitles":["UserBehaviorTracker","getClientIp"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"UserBehaviorTracker getClientIp should return unknown when no IP headers are present","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return unknown when no IP headers are present"}],"endTime":1760120597484,"message":"","name":"D:\\onlinestore\\backend\\src\\logging\\user-behavior-tracker.service.spec.ts","startTime":1760120596762,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["OpenObserveService"],"duration":17,"failureDetails":[],"failureMessages":[],"fullName":"OpenObserveService should be defined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be defined"},{"ancestorTitles":["OpenObserveService","initializeConfig"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"OpenObserveService initializeConfig should initialize OpenObserve configuration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should initialize OpenObserve configuration"},{"ancestorTitles":["OpenObserveService","ingestData"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OpenObserveService ingestData should ingest data to OpenObserve","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should ingest data to OpenObserve"},{"ancestorTitles":["OpenObserveService","ingestData"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"OpenObserveService ingestData should handle ingestion errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should handle ingestion errors"},{"ancestorTitles":["OpenObserveService","querySingleSourceOfTruth"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OpenObserveService querySingleSourceOfTruth should query data from OpenObserve","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should query data from OpenObserve"},{"ancestorTitles":["OpenObserveService","getSystemHealth"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OpenObserveService getSystemHealth should check OpenObserve health","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should check OpenObserve health"},{"ancestorTitles":["OpenObserveService","getSystemHealth"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OpenObserveService getSystemHealth should handle unhealthy status","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle unhealthy status"},{"ancestorTitles":["OpenObserveService","sendLogs"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"OpenObserveService sendLogs should send logs to OpenObserve","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should send logs to OpenObserve"},{"ancestorTitles":["OpenObserveService","sendLogs"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OpenObserveService sendLogs should handle empty logs array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty logs array"},{"ancestorTitles":["OpenObserveService","queryLogs"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"OpenObserveService queryLogs should query logs from OpenObserve","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should query logs from OpenObserve"},{"ancestorTitles":["OpenObserveService","testConnection"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"OpenObserveService testConnection should test OpenObserve connection successfully","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should test OpenObserve connection successfully"},{"ancestorTitles":["OpenObserveService","testConnection"],"duration":66,"failureDetails":[],"failureMessages":[],"fullName":"OpenObserveService testConnection should throw error when connection test fails","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error when connection test fails"}],"endTime":1760120598099,"message":"","name":"D:\\onlinestore\\backend\\src\\common\\openobserve\\openobserve.service.spec.ts","startTime":1760120597513,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CqrsMetricsService"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"CqrsMetricsService should be defined","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be defined"},{"ancestorTitles":["CqrsMetricsService"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"CqrsMetricsService records query metrics and flushes to transport","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"records query metrics and flushes to transport"},{"ancestorTitles":["CqrsMetricsService"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"CqrsMetricsService supports histogram buckets for swr refresh duration","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"supports histogram buckets for swr refresh duration"},{"ancestorTitles":["CqrsMetricsService"],"duration":38,"failureDetails":[],"failureMessages":[],"fullName":"CqrsMetricsService negative-path: when transport.log throws, metrics are re-buffered","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"negative-path: when transport.log throws, metrics are re-buffered"}],"endTime":1760120598799,"message":"","name":"D:\\onlinestore\\backend\\src\\cqrs\\metrics\\cqrs-metrics.service.spec.ts","startTime":1760120598142,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SWRService"],"duration":38,"failureDetails":[],"failureMessages":[],"fullName":"SWRService 后台刷新应上报直方图与计数器（带 metrics mock）","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"后台刷新应上报直方图与计数器（带 metrics mock）"},{"ancestorTitles":["SWRService"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"SWRService 未过期缓存应直接返回且不调用 fetcher","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"未过期缓存应直接返回且不调用 fetcher"},{"ancestorTitles":["SWRService"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"SWRService 过期但未到 staleAt 时应返回旧值并后台刷新","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"过期但未到 staleAt 时应返回旧值并后台刷新"},{"ancestorTitles":["SWRService"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"SWRService 并发去重：同 key 并发只触发一次 fetcher","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"并发去重：同 key 并发只触发一次 fetcher"},{"ancestorTitles":["SWRService"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"SWRService invalidate 与 invalidatePattern 应清理对应缓存","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"invalidate 与 invalidatePattern 应清理对应缓存"}],"endTime":1760120599298,"message":"","name":"D:\\onlinestore\\backend\\src\\cqrs\\cache\\swr.service.spec.ts","startTime":1760120598810,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CartConcurrencyTest","并发添加商品测试"],"duration":12,"failureDetails":[],"failureMessages":[],"fullName":"CartConcurrencyTest 并发添加商品测试 应该正确处理并发添加相同商品","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"应该正确处理并发添加相同商品"},{"ancestorTitles":["CartConcurrencyTest","并发添加商品测试"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"CartConcurrencyTest 并发添加商品测试 应该处理领域服务异常","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"应该处理领域服务异常"},{"ancestorTitles":["CartConcurrencyTest","应用服务异常处理测试"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"CartConcurrencyTest 应用服务异常处理测试 应该正确处理领域服务异常","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该正确处理领域服务异常"},{"ancestorTitles":["CartConcurrencyTest","应用服务异常处理测试"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"CartConcurrencyTest 应用服务异常处理测试 应该正确处理参数验证异常","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"应该正确处理参数验证异常"},{"ancestorTitles":["CartConcurrencyTest","应用服务功能测试"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"CartConcurrencyTest 应用服务功能测试 应该正确转换领域对象为DTO","invocations":1,"location":null,"numPassingAsserts":11,"retryReasons":[],"status":"passed","title":"应该正确转换领域对象为DTO"},{"ancestorTitles":["CartConcurrencyTest","应用服务功能测试"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"CartConcurrencyTest 应用服务功能测试 应该正确处理空属性值","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"应该正确处理空属性值"}],"endTime":1760120599844,"message":"","name":"D:\\onlinestore\\backend\\src\\cart\\test\\cart-concurrency.spec.ts","startTime":1760120599314,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["JwtAuthGuard","token extraction through canActivate"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"JwtAuthGuard token extraction through canActivate should throw UnauthorizedException for missing authorization header","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw UnauthorizedException for missing authorization header"},{"ancestorTitles":["JwtAuthGuard","token extraction through canActivate"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JwtAuthGuard token extraction through canActivate should throw UnauthorizedException for invalid token format","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw UnauthorizedException for invalid token format"},{"ancestorTitles":["JwtAuthGuard","token extraction through canActivate"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JwtAuthGuard token extraction through canActivate should throw UnauthorizedException for missing Bearer prefix","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw UnauthorizedException for missing Bearer prefix"},{"ancestorTitles":["JwtAuthGuard","token extraction through canActivate"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JwtAuthGuard token extraction through canActivate should throw UnauthorizedException for Bearer without token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw UnauthorizedException for Bearer without token"},{"ancestorTitles":["JwtAuthGuard","canActivate"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JwtAuthGuard canActivate should return true for public routes","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true for public routes"},{"ancestorTitles":["JwtAuthGuard","canActivate"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"JwtAuthGuard canActivate should throw UnauthorizedException when no authorization header is present","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw UnauthorizedException when no authorization header is present"},{"ancestorTitles":["JwtAuthGuard","handleRequest"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"JwtAuthGuard handleRequest should throw UnauthorizedException for expired token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw UnauthorizedException for expired token"},{"ancestorTitles":["JwtAuthGuard","handleRequest"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"JwtAuthGuard handleRequest should throw UnauthorizedException for invalid token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw UnauthorizedException for invalid token"},{"ancestorTitles":["JwtAuthGuard","handleRequest"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"JwtAuthGuard handleRequest should throw UnauthorizedException for not-yet-active token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw UnauthorizedException for not-yet-active token"},{"ancestorTitles":["JwtAuthGuard","handleRequest"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"JwtAuthGuard handleRequest should return user for valid token","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return user for valid token"},{"ancestorTitles":["JwtAuthGuard","handleRequest"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"JwtAuthGuard handleRequest should throw generic UnauthorizedException for other errors","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw generic UnauthorizedException for other errors"}],"endTime":1760120600475,"message":"","name":"D:\\onlinestore\\backend\\src\\auth\\guards\\jwt-auth.guard.spec.ts","startTime":1760120599880,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["JwtAuthGuard Debug"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"JwtAuthGuard Debug should create guard instance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create guard instance"},{"ancestorTitles":["JwtAuthGuard Debug"],"duration":20,"failureDetails":[],"failureMessages":[],"fullName":"JwtAuthGuard Debug should throw UnauthorizedException when no token","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should throw UnauthorizedException when no token"},{"ancestorTitles":["JwtAuthGuard Debug"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"JwtAuthGuard Debug should return true for public routes","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true for public routes"}],"endTime":1760120601004,"message":"","name":"D:\\onlinestore\\backend\\src\\auth\\guards\\jwt-auth.guard.debug.spec.ts","startTime":1760120600498,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["cqrs-openobserve.config (adapter priority with env fallback)"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"cqrs-openobserve.config (adapter priority with env fallback) defaults when env not set and adapter missing","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"defaults when env not set and adapter missing"},{"ancestorTitles":["cqrs-openobserve.config (adapter priority with env fallback)"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"cqrs-openobserve.config (adapter priority with env fallback) maps env variables correctly when adapter empty","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"maps env variables correctly when adapter empty"},{"ancestorTitles":["cqrs-openobserve.config (adapter priority with env fallback)"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"cqrs-openobserve.config (adapter priority with env fallback) uses adapter values when available (adapter priority)","invocations":1,"location":null,"numPassingAsserts":10,"retryReasons":[],"status":"passed","title":"uses adapter values when available (adapter priority)"}],"endTime":1760120601210,"message":"","name":"D:\\onlinestore\\backend\\src\\config\\cqrs-openobserve.config.spec.ts","startTime":1760120601032,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Basic Tests"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Basic Tests should pass basic test","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should pass basic test"},{"ancestorTitles":["Basic Tests"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"Basic Tests should handle simple calculations","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle simple calculations"},{"ancestorTitles":["Basic Tests"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Basic Tests should work with objects","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should work with objects"}],"endTime":1760120601381,"message":"","name":"D:\\onlinestore\\backend\\src\\app.controller.spec.ts","startTime":1760120601230,"status":"passed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1760120608733,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    配置验证失败: \"JWT_SECRET\" length must be at least 32 characters long\n\n    \u001b[0m \u001b[90m 339 |\u001b[39m   \u001b[36mif\u001b[39m (error) {\n     \u001b[90m 340 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mskipValidation) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 341 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`配置验证失败: ${error.message}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 342 |\u001b[39m     } \u001b[36melse\u001b[39m {\n     \u001b[90m 343 |\u001b[39m       \u001b[90m// 在开发或显式跳过验证时，仅警告并继续\u001b[39m\n     \u001b[90m 344 |\u001b[39m       console\u001b[33m.\u001b[39mwarn(\u001b[32m`⚠️ 跳过严格配置验证: ${error.message}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat createMasterConfiguration (\u001b[22mconfig/unified-master.config.ts\u001b[2m:341:13)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22mauth/auth.service.ts\u001b[2m:23:48)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[0m\u001b[36musers/users.controller.spec.ts\u001b[39m\u001b[0m\u001b[2m:4:1)\u001b[22m\n","name":"D:\\onlinestore\\backend\\src\\users\\users.controller.spec.ts","startTime":1760120608733,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1760120608733,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    配置验证失败: \"JWT_SECRET\" length must be at least 32 characters long\n\n    \u001b[0m \u001b[90m 339 |\u001b[39m   \u001b[36mif\u001b[39m (error) {\n     \u001b[90m 340 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mskipValidation) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 341 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`配置验证失败: ${error.message}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 342 |\u001b[39m     } \u001b[36melse\u001b[39m {\n     \u001b[90m 343 |\u001b[39m       \u001b[90m// 在开发或显式跳过验证时，仅警告并继续\u001b[39m\n     \u001b[90m 344 |\u001b[39m       console\u001b[33m.\u001b[39mwarn(\u001b[32m`⚠️ 跳过严格配置验证: ${error.message}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat createMasterConfiguration (\u001b[22mconfig/unified-master.config.ts\u001b[2m:341:13)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[0m\u001b[36mredis/redis-health.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:13:47)\u001b[22m\n","name":"D:\\onlinestore\\backend\\src\\redis\\redis-health.service.spec.ts","startTime":1760120608733,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1760120608733,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    配置验证失败: \"JWT_SECRET\" length must be at least 32 characters long\n\n    \u001b[0m \u001b[90m 339 |\u001b[39m   \u001b[36mif\u001b[39m (error) {\n     \u001b[90m 340 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mskipValidation) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 341 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`配置验证失败: ${error.message}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 342 |\u001b[39m     } \u001b[36melse\u001b[39m {\n     \u001b[90m 343 |\u001b[39m       \u001b[90m// 在开发或显式跳过验证时，仅警告并继续\u001b[39m\n     \u001b[90m 344 |\u001b[39m       console\u001b[33m.\u001b[39mwarn(\u001b[32m`⚠️ 跳过严格配置验证: ${error.message}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat createMasterConfiguration (\u001b[22mconfig/unified-master.config.ts\u001b[2m:341:13)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22mdatabase/database.module.ts\u001b[2m:13:47)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[0m\u001b[36mdatabase/database.module.spec.ts\u001b[39m\u001b[0m\u001b[2m:14:1)\u001b[22m\n","name":"D:\\onlinestore\\backend\\src\\database\\database.module.spec.ts","startTime":1760120608733,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1760120608733,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    配置验证失败: \"JWT_SECRET\" length must be at least 32 characters long\n\n    \u001b[0m \u001b[90m 339 |\u001b[39m   \u001b[36mif\u001b[39m (error) {\n     \u001b[90m 340 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mskipValidation) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 341 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`配置验证失败: ${error.message}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 342 |\u001b[39m     } \u001b[36melse\u001b[39m {\n     \u001b[90m 343 |\u001b[39m       \u001b[90m// 在开发或显式跳过验证时，仅警告并继续\u001b[39m\n     \u001b[90m 344 |\u001b[39m       console\u001b[33m.\u001b[39mwarn(\u001b[32m`⚠️ 跳过严格配置验证: ${error.message}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat createMasterConfiguration (\u001b[22mconfig/unified-master.config.ts\u001b[2m:341:13)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22mauth/auth.service.ts\u001b[2m:23:48)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[0m\u001b[36mauth/auth.service.spec.ts\u001b[39m\u001b[0m\u001b[2m:13:1)\u001b[22m\n","name":"D:\\onlinestore\\backend\\src\\auth\\auth.service.spec.ts","startTime":1760120608733,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1760120608733,"message":"  \u001b[1m● \u001b[22mTest suite failed to run\n\n    配置验证失败: \"JWT_SECRET\" length must be at least 32 characters long\n\n    \u001b[0m \u001b[90m 339 |\u001b[39m   \u001b[36mif\u001b[39m (error) {\n     \u001b[90m 340 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mskipValidation) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 341 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mError\u001b[39m(\u001b[32m`配置验证失败: ${error.message}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 342 |\u001b[39m     } \u001b[36melse\u001b[39m {\n     \u001b[90m 343 |\u001b[39m       \u001b[90m// 在开发或显式跳过验证时，仅警告并继续\u001b[39m\n     \u001b[90m 344 |\u001b[39m       console\u001b[33m.\u001b[39mwarn(\u001b[32m`⚠️ 跳过严格配置验证: ${error.message}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\n      \u001b[2mat createMasterConfiguration (\u001b[22mconfig/unified-master.config.ts\u001b[2m:341:13)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22mauth/auth.service.ts\u001b[2m:23:48)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22mauth/auth.controller.ts\u001b[2m:28:1)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[0m\u001b[36mauth/auth.controller.spec.ts\u001b[39m\u001b[0m\u001b[2m:2:1)\u001b[22m\n","name":"D:\\onlinestore\\backend\\src\\auth\\auth.controller.spec.ts","startTime":1760120608733,"status":"failed","summary":""}],"wasInterrupted":false}
