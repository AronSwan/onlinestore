# 部分服务的 Docker Compose 配置文件（排除网络问题的镜像）

version: '3.8'

services:
  # 前端服务
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shopping-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - shopping-network
    depends_on:
      - backend

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: shopping-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_TYPE=postgres
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - EMAIL_VERIFIER_API_URL=http://email-verifier:8080
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=http://localhost
      # Required backend configs
      - DB_DATABASE=${POSTGRES_DB}
      - DB_USERNAME=postgres
      - DB_PORT=5432
      - ENCRYPTION_KEY=0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
      - CORS_ORIGINS=http://localhost
      # Production strict config fixes
      - DB_HOST=postgres
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - KAFKA_ENABLED=false
      - KAFKA_HOST=redpanda:9092
      # OpenObserve required envs to avoid startup error
      - OPENOBSERVE_URL=http://localhost:5080
      - OPENOBSERVE_ORGANIZATION=default
      - OPENOBSERVE_TOKEN=dummy-token
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - shopping-network
    depends_on:
      - postgres
      - redis
      - email-verifier

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: shopping-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-shopping_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
      - ./logs/postgres:/var/log/postgresql
    networks:
      - shopping-network
    ports:
      - "5432:5432"

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: shopping-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - shopping-network
    ports:
      - "6379:6379"

  # Email Verifier 微服务
  email-verifier:
    build:
      context: ./backend/docker/email-verifier
      dockerfile: Dockerfile
    container_name: shopping-email-verifier
    restart: unless-stopped
    environment:
      - PORT=8080
      - HOST=0.0.0.0
      - ENABLE_SMTP_CHECK=false
      - AUTO_UPDATE_DISPOSABLE=true
      - LOG_LEVEL=info
    volumes:
      - email_verifier_data:/app/data
    networks:
      - shopping-network
    ports:
      - "8080:8080"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  email_verifier_data:
    driver: local

networks:
  shopping-network:
    driver: bridge