version: '3.8'

services:
  # 前端服务
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shopping-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - shopping-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: shopping-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - EMAIL_VERIFIER_API_URL=http://email-verifier:8080
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=http://localhost
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/.env:/app/.env:ro
    networks:
      - shopping-network
    depends_on:
      - postgres
      - redis
      - email-verifier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: shopping-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-shopping_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
      - ./logs/postgres:/var/log/postgresql
    networks:
      - shopping-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-shopping_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: shopping-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - shopping-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Email Verifier 微服务
  email-verifier:
    build:
      context: ./docker/email-verifier
      dockerfile: Dockerfile
    container_name: shopping-email-verifier
    restart: unless-stopped
    environment:
      - PORT=8080
      - HOST=0.0.0.0
      - ENABLE_SMTP_CHECK=false
      - AUTO_UPDATE_DISPOSABLE=true
      - LOG_LEVEL=info
    volumes:
      - email_verifier_data:/app/data
    networks:
      - shopping-network
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Elasticsearch (搜索服务)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: shopping-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - shopping-network
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Kibana (可选 - 用于 Elasticsearch 管理)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: shopping-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    networks:
      - shopping-network
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    profiles:
      - monitoring

  # Prometheus (监控)
  prometheus:
    image: prom/prometheus:latest
    container_name: shopping-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - shopping-network
    ports:
      - "9090:9090"
    profiles:
      - monitoring

  # Grafana (监控面板)
  grafana:
    image: grafana/grafana:latest
    container_name: shopping-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - shopping-network
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Nginx 负载均衡器 (生产环境)
  nginx-lb:
    image: nginx:alpine
    container_name: shopping-nginx-lb
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx-lb.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx-lb:/var/log/nginx
    networks:
      - shopping-network
    ports:
      - "8000:80"
      - "8443:443"
    depends_on:
      - frontend
      - backend
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  email_verifier_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  shopping-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16