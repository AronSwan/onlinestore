
services:
  # 前端服务
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shopping-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - shopping-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: shopping-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_TYPE=postgres
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - EMAIL_VERIFIER_API_URL=http://email-verifier:8080
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=http://localhost
      # Required backend configs
      - DB_DATABASE=${POSTGRES_DB}
      - DB_USERNAME=postgres
      - DB_PORT=5432
      - ENCRYPTION_KEY=0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
      - CORS_ORIGINS=http://localhost
      # Production strict config fixes
      - DB_HOST=postgres
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - KAFKA_ENABLED=false
      - KAFKA_HOST=redpanda:9092
      # OpenObserve required envs to avoid startup error
      - OPENOBSERVE_URL=http://localhost:5080
      - OPENOBSERVE_ORGANIZATION=default
      - OPENOBSERVE_TOKEN=dummy-token
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - shopping-network
    depends_on:
      - postgres
      - redis
      - email-verifier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: shopping-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-shopping_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
      - ./logs/postgres:/var/log/postgresql
    networks:
      - shopping-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-shopping_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: shopping-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - shopping-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Email Verifier 微服务
  email-verifier:
    build:
      context: ./backend/docker/email-verifier
      dockerfile: Dockerfile
    container_name: shopping-email-verifier
    restart: unless-stopped
    environment:
      - PORT=8080
      - HOST=0.0.0.0
      - ENABLE_SMTP_CHECK=false
      - AUTO_UPDATE_DISPOSABLE=true
      - LOG_LEVEL=info
    volumes:
      - email_verifier_data:/app/data
    networks:
      - shopping-network
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # MeiliSearch (主要搜索引擎)
  meilisearch:
    image: getmeili/meilisearch:v1.7.4
    container_name: shopping-meilisearch
    restart: unless-stopped
    environment:
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY:-master-key-change-in-production}
      - MEILI_ENV=development
      - MEILI_NO_ANALYTICS=true
    volumes:
      - meili_data:/meili_data
    networks:
      - shopping-network
    ports:
      - "7700:7700"
    # 移除健康检查以避免镜像缺少wget导致的误报
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # ZincSearch (备用搜索引擎)
  zincsearch:
    image: public.ecr.aws/zinclabs/zincsearch:latest
    container_name: shopping-zincsearch
    restart: unless-stopped
    environment:
      - ZINC_FIRST_ADMIN_USER=${ZINC_ADMIN_USER:-admin}
      - ZINC_FIRST_ADMIN_PASSWORD=${ZINC_ADMIN_PASSWORD:-Complexpass#123}
      - ZINC_DATA_PATH=/data
    volumes:
      - zinc_data:/data
    networks:
      - shopping-network
    ports:
      - "4080:4080"
    # 移除健康检查以避免镜像缺少wget导致的误报
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Prometheus (监控)
  prometheus:
    image: prom/prometheus:latest
    container_name: shopping-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - shopping-network
    ports:
      - "9090:9090"
    profiles:
      - monitoring

  # Grafana (监控面板)
  grafana:
    image: grafana/grafana:latest
    container_name: shopping-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - shopping-network
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Nginx 负载均衡器 (生产环境)
  nginx-lb:
    image: nginx:alpine
    container_name: shopping-nginx-lb
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx-lb.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx-lb:/var/log/nginx
    networks:
      - shopping-network
    ports:
      - "8000:80"
      - "8443:443"
    depends_on:
      - frontend
      - backend
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  meili_data:
    driver: local
  zinc_data:
    driver: local
  email_verifier_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  shopping-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16