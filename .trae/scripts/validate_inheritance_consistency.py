#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Inheritance Consistency Validator
Validates consistency of inherited configuration items across refactor rules

Generated by AI assistant on 2025-01-26
Source: Refactor rules validation requirements
"""

import json
import sys
import os
from pathlib import Path
from typing import Dict, Any, List, Tuple

def validate_docker_image_consistency(config: Dict[str, Any]) -> List[str]:
    """
    Validate that all Docker image references are consistent
    """
    issues = []
    expected_image = 'onlinestore-audit:latest'
    
    # Check environment configuration
    if 'environment' in config and 'docker' in config['environment']:
        docker_config = config['environment']['docker']
        if docker_config.get('image') != expected_image:
            issues.append(f"Environment Docker image should be '{expected_image}', found '{docker_config.get('image')}'")
    
    # Check execution scripts
    if 'execution_scripts' in config:
        for script_name, script_config in config['execution_scripts'].items():
            if isinstance(script_config, dict) and 'docker' in script_config:
                docker_config = script_config['docker']
                if docker_config.get('image') != expected_image:
                    issues.append(f"Script '{script_name}' Docker image should be '{expected_image}', found '{docker_config.get('image')}'")
    
    return issues

def validate_output_path_consistency(config: Dict[str, Any]) -> List[str]:
    """
    Validate that output paths follow the expected pattern
    """
    issues = []
    expected_base_path = 'audit-reports/refactor'
    
    # Check reporting configuration
    if 'reporting' in config:
        output_path = config['reporting'].get('output_path')
        if output_path and not output_path.startswith('audit-reports'):
            issues.append(f"Reporting output path should start with 'audit-reports', found '{output_path}'")
    
    # Check audit configuration
    if 'audit' in config:
        output_path = config['audit'].get('output_path')
        if output_path and not output_path.startswith('audit-reports'):
            issues.append(f"Audit output path should start with 'audit-reports', found '{output_path}'")
    
    return issues

def validate_script_references(config: Dict[str, Any]) -> List[str]:
    """
    Validate that all script references point to existing files
    """
    issues = []
    
    # Check execution scripts
    if 'execution_scripts' in config:
        for script_name, script_config in config['execution_scripts'].items():
            if isinstance(script_config, dict):
                script_path = script_config.get('script') or script_config.get('path')
                if script_path and not os.path.exists(script_path):
                    # Check if it's a relative path from project root
                    alt_path = os.path.join(os.getcwd(), script_path)
                    if not os.path.exists(alt_path):
                        issues.append(f"Script '{script_name}' references non-existent file: {script_path}")
    
    return issues

def validate_version_consistency(config: Dict[str, Any]) -> List[str]:
    """
    Validate version consistency across configuration
    """
    issues = []
    
    version = config.get('version')
    if not version:
        issues.append("Configuration missing version field")
        return issues
    
    # Check migration configuration
    if 'migration' in config and 'supported_versions' in config['migration']:
        supported_versions = config['migration']['supported_versions']
        if version not in supported_versions:
            issues.append(f"Current version '{version}' not in supported versions: {supported_versions}")
    
    return issues

def main():
    if len(sys.argv) != 2:
        print("Usage: python validate_inheritance_consistency.py <config_file>")
        sys.exit(1)
    
    config_file = sys.argv[1]
    
    if not os.path.exists(config_file):
        print(f"Error: Config file '{config_file}' does not exist")
        sys.exit(1)
    
    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)
    except Exception as e:
        print(f"Error reading config file: {e}")
        sys.exit(1)
    
    # Run all validation checks
    all_issues = []
    all_issues.extend(validate_docker_image_consistency(config))
    all_issues.extend(validate_output_path_consistency(config))
    all_issues.extend(validate_script_references(config))
    all_issues.extend(validate_version_consistency(config))
    
    if all_issues:
        print("Validation Issues Found:")
        for i, issue in enumerate(all_issues, 1):
            print(f"  {i}. {issue}")
        sys.exit(1)
    else:
        print("All inheritance consistency checks passed.")
        sys.exit(0)

if __name__ == '__main__':
    main()