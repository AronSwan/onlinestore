#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Refactor Configuration Migration Script
Migrates refactor configuration from one version to another

Generated by AI assistant on 2025-01-26
Source: Refactor rules migration requirements
"""

import json
import sys
import os
from pathlib import Path
from typing import Dict, Any

def migrate_v1_0_to_v1_1(config: Dict[str, Any]) -> Dict[str, Any]:
    """
    Migrate configuration from v1.0 to v1.1
    
    Changes in v1.1:
    - Added new audit integration settings
    - Updated Docker image references
    - Enhanced reporting configuration
    """
    migrated = config.copy()
    
    # Update version
    migrated['version'] = 'v1.1'
    
    # Migrate Docker image references
    if 'environment' in migrated and 'docker' in migrated['environment']:
        docker_config = migrated['environment']['docker']
        if docker_config.get('image') == 'trae-audit-image':
            docker_config['image'] = 'onlinestore-audit:latest'
    
    # Add new audit integration if missing
    if 'audit' not in migrated:
        migrated['audit'] = {
            'enabled': True,
            'profile': 'balanced',
            'output_path': 'audit-reports/refactor'
        }
    
    # Enhance reporting configuration
    if 'reporting' in migrated:
        reporting = migrated['reporting']
        if 'formats' not in reporting:
            reporting['formats'] = ['json', 'markdown']
        if 'output_path' not in reporting:
            reporting['output_path'] = 'audit-reports/refactor'
    
    return migrated

def main():
    if len(sys.argv) != 4:
        print("Usage: python migrate_refactor_config.py <input_file> <from_version> <to_version>")
        sys.exit(1)
    
    input_file = sys.argv[1]
    from_version = sys.argv[2]
    to_version = sys.argv[3]
    
    if not os.path.exists(input_file):
        print(f"Error: Input file '{input_file}' does not exist")
        sys.exit(1)
    
    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            config = json.load(f)
    except Exception as e:
        print(f"Error reading config file: {e}")
        sys.exit(1)
    
    # Perform migration based on version
    if from_version == 'v1.0' and to_version == 'v1.1':
        migrated_config = migrate_v1_0_to_v1_1(config)
    else:
        print(f"Migration from {from_version} to {to_version} is not supported")
        sys.exit(1)
    
    # Write migrated configuration
    output_file = input_file.replace('.json', f'_migrated_{to_version}.json')
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(migrated_config, f, indent=2, ensure_ascii=False)
        print(f"Configuration migrated successfully to {output_file}")
    except Exception as e:
        print(f"Error writing migrated config: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()