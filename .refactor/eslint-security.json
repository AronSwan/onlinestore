[{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\CodeAnalyzer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\analyzers\\ASTAnalyzer.js","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\[.","line":23,"column":94,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":23,"endColumn":95,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1220,1221],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1220,1220],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":488,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":488,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":510,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":510,"endColumn":38},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":537,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":537,"endColumn":40},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":562,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":562,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":648,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":648,"endColumn":32},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\[.","line":650,"column":38,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":650,"endColumn":39,"suggestions":[{"messageId":"removeEscape","fix":{"range":[19754,19755],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[19754,19754],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":656,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":656,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":656,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":656,"endColumn":35},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":657,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":657,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":657,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":657,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":658,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":658,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":658,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":658,"endColumn":35},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":682,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":682,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":682,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":682,"endColumn":35},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":683,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":683,"endColumn":35},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":683,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":683,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":684,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":684,"endColumn":35},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":684,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":684,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":685,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":685,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":685,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":685,"endColumn":47},{"ruleId":"no-unused-vars","severity":2,"message":"'dependencies' is defined but never used. Allowed unused args must match /^_/u.","line":686,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":686,"endColumn":40},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":687,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":687,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":687,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":687,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":688,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":688,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":688,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":688,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":689,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":689,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":689,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":689,"endColumn":46},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":690,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":690,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":690,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":690,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":691,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":691,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":691,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":691,"endColumn":38},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":692,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":692,"endColumn":33},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":692,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":692,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'symbols' is defined but never used. Allowed unused args must match /^_/u.","line":693,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":693,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'symbols' is defined but never used. Allowed unused args must match /^_/u.","line":694,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":694,"endColumn":30},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":695,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":695,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'symbols' is defined but never used. Allowed unused args must match /^_/u.","line":695,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":695,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'symbols' is defined but never used. Allowed unused args must match /^_/u.","line":696,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":696,"endColumn":33},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":696,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":696,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":697,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":697,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":697,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":697,"endColumn":41},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":698,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":698,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":698,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":698,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":699,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":699,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":699,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":699,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":700,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":700,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":700,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":700,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":701,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":701,"endColumn":33},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":701,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":701,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'practices' is defined but never used. Allowed unused args must match /^_/u.","line":702,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":702,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'conventions' is defined but never used. Allowed unused args must match /^_/u.","line":703,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":703,"endColumn":39}],"suppressedMessages":[],"errorCount":52,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AST分析器 - 负责抽象语法树分析\n * 符合单一职责原则：专门处理AST解析和分析功能\n */\nclass ASTAnalyzer {\n  constructor() {\n    this.supportedLanguages = ['javascript', 'python', 'java', 'css', 'html'];\n    this.astCache = new Map();\n    this.analysisPatterns = {\n      javascript: {\n        functions: /function\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\([^)]*\\)|([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*[:=]\\s*function|([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*=>|class\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*{/g,\n        classes: /class\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*(?:extends\\s+[a-zA-Z_$][a-zA-Z0-9_$]*)?\\s*{/g,\n        imports: /import\\s+.*?from\\s+['\"]([^'\"]+)['\"]|require\\s*\\(\\s*['\"]([^'\"]+)['\"]\\s*\\)/g,\n        exports: /export\\s+(?:default\\s+)?(?:class|function|const|let|var)\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)|module\\.exports\\s*=|exports\\.[a-zA-Z_$][a-zA-Z0-9_$]*/g\n      },\n      python: {\n        functions: /def\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(/g,\n        classes: /class\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?:\\([^)]*\\))?\\s*:/g,\n        imports: /from\\s+([a-zA-Z_][a-zA-Z0-9_.]*)\\s+import|import\\s+([a-zA-Z_][a-zA-Z0-9_.]*)/g,\n        exports: /__all__\\s*=\\s*\\[([^\\]]+)\\]/g\n      },\n      java: {\n        functions: /(?:public|private|protected)?\\s*(?:static)?\\s*(?:[a-zA-Z_$][a-zA-Z0-9_$<>\\[\\]]*\\s+)?([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\([^)]*\\)\\s*(?:throws\\s+[^{]+)?\\s*{/g,\n        classes: /(?:public|private|protected)?\\s*(?:abstract|final)?\\s*class\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*(?:extends\\s+[a-zA-Z_$][a-zA-Z0-9_$]*)?\\s*(?:implements\\s+[^{]+)?\\s*{/g,\n        imports: /import\\s+(?:static\\s+)?([a-zA-Z_$][a-zA-Z0-9_$.]*)/g,\n        exports: /public\\s+(?:class|interface|enum)\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)/g\n      }\n    };\n  }\n\n  /**\n     * 执行AST分析\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @param {Object} options - 分析选项\n     * @returns {Object} AST分析结果\n     */\n  performASTAnalysis(content, language = 'javascript', options = {}) {\n    try {\n      const cacheKey = this.generateCacheKey(content, language, options);\n\n      // 检查缓存\n      if (this.astCache.has(cacheKey) && !options.forceRefresh) {\n        return {\n          success: true,\n          fromCache: true,\n          analysis: this.astCache.get(cacheKey),\n          timestamp: new Date().toISOString()\n        };\n      }\n\n      // 执行分析\n      const analysis = {\n        language: language,\n        structure: this.analyzeCodeStructure(content, language),\n        dependencies: this.analyzeDependencies(content, language),\n        symbols: this.extractSymbols(content, language),\n        patterns: this.analyzePatterns(content, language),\n        metrics: this.calculateASTMetrics(content, language),\n        issues: this.detectStructuralIssues(content, language)\n      };\n\n      // 缓存结果\n      this.astCache.set(cacheKey, analysis);\n\n      // 清理过期缓存\n      this.cleanupCache();\n\n      return {\n        success: true,\n        fromCache: false,\n        analysis: analysis,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `AST分析失败: ${error.message}`,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  /**\n     * 分析代码结构\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @returns {Object} 代码结构信息\n     */\n  analyzeCodeStructure(content, language) {\n    const structure = {\n      functions: this.extractFunctions(content, language),\n      classes: this.extractClasses(content, language),\n      modules: this.extractModules(content, language),\n      blocks: this.analyzeBlockStructure(content, language),\n      hierarchy: this.buildHierarchy(content, language)\n    };\n\n    // 计算结构统计\n    structure.statistics = {\n      totalFunctions: structure.functions.length,\n      totalClasses: structure.classes.length,\n      totalModules: structure.modules.length,\n      averageFunctionLength: this.calculateAverageFunctionLength(structure.functions),\n      averageClassSize: this.calculateAverageClassSize(structure.classes),\n      nestingDepth: this.calculateMaxNestingDepth(content)\n    };\n\n    return structure;\n  }\n\n  /**\n     * 分析依赖关系\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @returns {Object} 依赖分析结果\n     */\n  analyzeDependencies(content, language) {\n    const dependencies = {\n      imports: this.extractImports(content, language),\n      exports: this.extractExports(content, language),\n      internal: this.findInternalDependencies(content, language),\n      external: this.findExternalDependencies(content, language),\n      circular: this.detectCircularDependencies(content, language)\n    };\n\n    // 依赖统计\n    dependencies.statistics = {\n      totalImports: dependencies.imports.length,\n      totalExports: dependencies.exports.length,\n      internalCount: dependencies.internal.length,\n      externalCount: dependencies.external.length,\n      circularCount: dependencies.circular.length,\n      dependencyRatio: this.calculateDependencyRatio(dependencies)\n    };\n\n    return dependencies;\n  }\n\n  /**\n     * 提取符号信息\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @returns {Object} 符号信息\n     */\n  extractSymbols(content, language) {\n    const symbols = {\n      variables: this.extractVariables(content, language),\n      constants: this.extractConstants(content, language),\n      functions: this.extractFunctionSignatures(content, language),\n      classes: this.extractClassDefinitions(content, language),\n      interfaces: this.extractInterfaces(content, language),\n      types: this.extractTypeDefinitions(content, language)\n    };\n\n    // 符号统计\n    symbols.statistics = {\n      totalSymbols: Object.values(symbols).reduce((sum, arr) => sum + (Array.isArray(arr) ? arr.length : 0), 0),\n      publicSymbols: this.countPublicSymbols(symbols),\n      privateSymbols: this.countPrivateSymbols(symbols),\n      unusedSymbols: this.findUnusedSymbols(content, symbols),\n      namingConventions: this.checkNamingConventions(symbols, language)\n    };\n\n    return symbols;\n  }\n\n  /**\n     * 分析代码模式\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @returns {Object} 模式分析结果\n     */\n  analyzePatterns(content, language) {\n    const patterns = {\n      designPatterns: this.detectDesignPatterns(content, language),\n      antiPatterns: this.detectAntiPatterns(content, language),\n      codeSmells: this.detectCodeSmells(content, language),\n      bestPractices: this.checkBestPractices(content, language),\n      conventions: this.checkCodingConventions(content, language)\n    };\n\n    // 模式统计\n    patterns.statistics = {\n      designPatternCount: patterns.designPatterns.length,\n      antiPatternCount: patterns.antiPatterns.length,\n      codeSmellCount: patterns.codeSmells.length,\n      bestPracticeScore: this.calculateBestPracticeScore(patterns.bestPractices),\n      conventionScore: this.calculateConventionScore(patterns.conventions)\n    };\n\n    return patterns;\n  }\n\n  /**\n     * 计算AST指标\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @returns {Object} AST指标\n     */\n  calculateASTMetrics(content, language) {\n    const lines = content.split('\\n');\n    const nonEmptyLines = lines.filter(line => line.trim().length > 0);\n    const commentLines = this.extractCommentLines(content, language);\n\n    return {\n      totalLines: lines.length,\n      codeLines: nonEmptyLines.length - commentLines.length,\n      commentLines: commentLines.length,\n      blankLines: lines.length - nonEmptyLines.length,\n      commentRatio: commentLines.length / nonEmptyLines.length,\n      averageLineLength: this.calculateAverageLineLength(nonEmptyLines),\n      longestLine: this.findLongestLine(lines),\n      indentationConsistency: this.checkIndentationConsistency(lines),\n      bracketBalance: this.checkBracketBalance(content),\n      tokenCount: this.countTokens(content, language)\n    };\n  }\n\n  /**\n     * 检测结构性问题\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @returns {Array} 问题列表\n     */\n  detectStructuralIssues(content, language) {\n    const issues = [];\n\n    // 检查大型函数\n    const largeFunctions = this.findLargeFunctions(content, language);\n    largeFunctions.forEach(func => {\n      issues.push({\n        type: 'large_function',\n        severity: 'medium',\n        message: `函数 '${func.name}' 过长 (${func.lines} 行)`,\n        line: func.startLine,\n        suggestion: '考虑拆分为更小的函数'\n      });\n    });\n\n    // 检查深度嵌套\n    const deepNesting = this.findDeepNesting(content, language);\n    deepNesting.forEach(nest => {\n      issues.push({\n        type: 'deep_nesting',\n        severity: 'high',\n        message: `嵌套层次过深 (${nest.depth} 层)`,\n        line: nest.line,\n        suggestion: '使用早期返回或提取函数来减少嵌套'\n      });\n    });\n\n    // 检查重复代码\n    const duplicates = this.findDuplicateCode(content, language);\n    duplicates.forEach(dup => {\n      issues.push({\n        type: 'duplicate_code',\n        severity: 'medium',\n        message: `发现重复代码块 (${dup.lines} 行)`,\n        line: dup.startLine,\n        suggestion: '提取为公共函数或方法'\n      });\n    });\n\n    // 检查未使用的变量\n    const unusedVars = this.findUnusedVariables(content, language);\n    unusedVars.forEach(variable => {\n      issues.push({\n        type: 'unused_variable',\n        severity: 'low',\n        message: `未使用的变量 '${variable.name}'`,\n        line: variable.line,\n        suggestion: '删除未使用的变量'\n      });\n    });\n\n    // 检查魔法数字\n    const magicNumbers = this.findMagicNumbers(content, language);\n    magicNumbers.forEach(magic => {\n      issues.push({\n        type: 'magic_number',\n        severity: 'low',\n        message: `魔法数字 '${magic.value}'`,\n        line: magic.line,\n        suggestion: '使用命名常量替换魔法数字'\n      });\n    });\n\n    return issues.sort((a, b) => {\n      const severityOrder = { 'high': 3, 'medium': 2, 'low': 1 };\n      return severityOrder[b.severity] - severityOrder[a.severity];\n    });\n  }\n\n  // 辅助方法实现\n  extractFunctions(content, language) {\n    const functions = [];\n    const pattern = this.analysisPatterns[language]?.functions;\n    if (!pattern) {return functions;}\n\n    let match;\n    while ((match = pattern.exec(content)) !== null) {\n      const functionName = match[1] || match[2] || match[3] || match[4] || 'anonymous';\n      const startLine = content.substring(0, match.index).split('\\n').length;\n      const functionBody = this.extractFunctionBody(content, match.index);\n\n      functions.push({\n        name: functionName,\n        startLine: startLine,\n        endLine: startLine + functionBody.split('\\n').length - 1,\n        length: functionBody.split('\\n').length,\n        parameters: this.extractParameters(match[0]),\n        body: functionBody,\n        complexity: this.calculateFunctionComplexity(functionBody)\n      });\n    }\n\n    return functions;\n  }\n\n  extractClasses(content, language) {\n    const classes = [];\n    const pattern = this.analysisPatterns[language]?.classes;\n    if (!pattern) {return classes;}\n\n    let match;\n    while ((match = pattern.exec(content)) !== null) {\n      const className = match[1];\n      const startLine = content.substring(0, match.index).split('\\n').length;\n      const classBody = this.extractClassBody(content, match.index);\n\n      classes.push({\n        name: className,\n        startLine: startLine,\n        endLine: startLine + classBody.split('\\n').length - 1,\n        length: classBody.split('\\n').length,\n        methods: this.extractClassMethods(classBody, language),\n        properties: this.extractClassProperties(classBody, language),\n        inheritance: this.extractInheritance(match[0])\n      });\n    }\n\n    return classes;\n  }\n\n  extractImports(content, language) {\n    const imports = [];\n    const pattern = this.analysisPatterns[language]?.imports;\n    if (!pattern) {return imports;}\n\n    let match;\n    while ((match = pattern.exec(content)) !== null) {\n      const moduleName = match[1] || match[2];\n      const startLine = content.substring(0, match.index).split('\\n').length;\n\n      imports.push({\n        module: moduleName,\n        line: startLine,\n        type: this.determineImportType(moduleName),\n        statement: match[0].trim()\n      });\n    }\n\n    return imports;\n  }\n\n  generateCacheKey(content, language, options) {\n    const contentHash = this.simpleHash(content);\n    const optionsHash = this.simpleHash(JSON.stringify(options));\n    return `${language}_${contentHash}_${optionsHash}`;\n  }\n\n  simpleHash(str) {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return Math.abs(hash).toString(36);\n  }\n\n  cleanupCache() {\n    if (this.astCache.size > 100) {\n      const entries = Array.from(this.astCache.entries());\n      const toDelete = entries.slice(0, 50);\n      toDelete.forEach(([key]) => this.astCache.delete(key));\n    }\n  }\n\n  extractFunctionBody(content, startIndex) {\n    let braceCount = 0;\n    let inFunction = false;\n    let body = '';\n\n    for (let i = startIndex; i < content.length; i++) {\n      const char = content[i];\n\n      if (char === '{') {\n        braceCount++;\n        inFunction = true;\n      } else if (char === '}') {\n        braceCount--;\n      }\n\n      if (inFunction) {\n        body += char;\n      }\n\n      if (inFunction && braceCount === 0) {\n        break;\n      }\n    }\n\n    return body;\n  }\n\n  extractParameters(functionSignature) {\n    const paramMatch = functionSignature.match(/\\(([^)]*)\\)/);\n    if (!paramMatch) {return [];}\n\n    const paramString = paramMatch[1].trim();\n    if (!paramString) {return [];}\n\n    return paramString.split(',').map(param => param.trim());\n  }\n\n  calculateFunctionComplexity(functionBody) {\n    const complexityPatterns = [\n      /\\bif\\b/g, /\\belse\\b/g, /\\bwhile\\b/g, /\\bfor\\b/g,\n      /\\bcase\\b/g, /\\bcatch\\b/g, /&&/g, /\\|\\|/g\n    ];\n\n    let complexity = 1;\n    complexityPatterns.forEach(pattern => {\n      const matches = functionBody.match(pattern) || [];\n      complexity += matches.length;\n    });\n\n    return complexity;\n  }\n\n  extractClassBody(content, startIndex) {\n    return this.extractFunctionBody(content, startIndex);\n  }\n\n  extractClassMethods(classBody, language) {\n    return this.extractFunctions(classBody, language);\n  }\n\n  extractClassProperties(classBody, language) {\n    const properties = [];\n    const lines = classBody.split('\\n');\n\n    lines.forEach((line, index) => {\n      const trimmed = line.trim();\n      if (language === 'javascript') {\n        const propMatch = trimmed.match(/^(\\w+)\\s*[=:]/);\n        if (propMatch && !trimmed.includes('function')) {\n          properties.push({\n            name: propMatch[1],\n            line: index + 1,\n            type: 'property'\n          });\n        }\n      }\n    });\n\n    return properties;\n  }\n\n  extractInheritance(classSignature) {\n    const extendsMatch = classSignature.match(/extends\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)/);\n    return extendsMatch ? extendsMatch[1] : null;\n  }\n\n  determineImportType(moduleName) {\n    if (moduleName.startsWith('.')) {return 'relative';}\n    if (moduleName.includes('/') && !moduleName.startsWith('@')) {return 'absolute';}\n    return 'external';\n  }\n\n  findLargeFunctions(content, language) {\n    const functions = this.extractFunctions(content, language);\n    return functions.filter(func => func.length > 50);\n  }\n\n  findDeepNesting(content, language) {\n    const lines = content.split('\\n');\n    const deepNesting = [];\n    let currentDepth = 0;\n\n    lines.forEach((line, index) => {\n      const openBraces = (line.match(/{/g) || []).length;\n      const closeBraces = (line.match(/}/g) || []).length;\n\n      currentDepth += openBraces - closeBraces;\n\n      if (currentDepth > 4) {\n        deepNesting.push({\n          line: index + 1,\n          depth: currentDepth\n        });\n      }\n    });\n\n    return deepNesting;\n  }\n\n  findDuplicateCode(content, language) {\n    // 简化的重复代码检测\n    const lines = content.split('\\n');\n    const duplicates = [];\n    const minBlockSize = 5;\n\n    for (let i = 0; i < lines.length - minBlockSize; i++) {\n      const block = lines.slice(i, i + minBlockSize).join('\\n');\n      const blockHash = this.simpleHash(block.trim());\n\n      for (let j = i + minBlockSize; j < lines.length - minBlockSize; j++) {\n        const compareBlock = lines.slice(j, j + minBlockSize).join('\\n');\n        const compareHash = this.simpleHash(compareBlock.trim());\n\n        if (blockHash === compareHash && block.trim().length > 50) {\n          duplicates.push({\n            startLine: i + 1,\n            lines: minBlockSize\n          });\n          break;\n        }\n      }\n    }\n\n    return duplicates;\n  }\n\n  findUnusedVariables(content, language) {\n    // 简化的未使用变量检测\n    const variables = [];\n    const varPattern = /(?:var|let|const)\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*=/g;\n    let match;\n\n    while ((match = varPattern.exec(content)) !== null) {\n      const varName = match[1];\n      const line = content.substring(0, match.index).split('\\n').length;\n\n      // 简单检查：如果变量名在声明后没有再次出现，认为未使用\n      const afterDeclaration = content.substring(match.index + match[0].length);\n      const usagePattern = new RegExp(`\\\\b${varName}\\\\b`, 'g');\n\n      if (!usagePattern.test(afterDeclaration)) {\n        variables.push({\n          name: varName,\n          line: line\n        });\n      }\n    }\n\n    return variables;\n  }\n\n  findMagicNumbers(content, language) {\n    const magicNumbers = [];\n    const numberPattern = /\\b(\\d+(?:\\.\\d+)?)\\b/g;\n    let match;\n\n    while ((match = numberPattern.exec(content)) !== null) {\n      const number = parseFloat(match[1]);\n      const line = content.substring(0, match.index).split('\\n').length;\n\n      // 排除常见的非魔法数字\n      if (number !== 0 && number !== 1 && number !== -1 && number !== 2) {\n        magicNumbers.push({\n          value: match[1],\n          line: line\n        });\n      }\n    }\n\n    return magicNumbers;\n  }\n\n  extractCommentLines(content, language) {\n    const commentPatterns = {\n      javascript: [/\\/\\/.*$/gm, /\\/\\*[\\s\\S]*?\\*\\//gm],\n      python: [/#.*$/gm, /\"\"\"[\\s\\S]*?\"\"\"/gm, /'''[\\s\\S]*?'''/gm],\n      java: [/\\/\\/.*$/gm, /\\/\\*[\\s\\S]*?\\*\\//gm]\n    };\n\n    const patterns = commentPatterns[language] || commentPatterns.javascript;\n    const comments = [];\n\n    patterns.forEach(pattern => {\n      let match;\n      while ((match = pattern.exec(content)) !== null) {\n        const commentLines = match[0].split('\\n').length;\n        comments.push(...Array(commentLines).fill(0));\n      }\n    });\n\n    return comments;\n  }\n\n  calculateAverageLineLength(lines) {\n    if (lines.length === 0) {return 0;}\n    const totalLength = lines.reduce((sum, line) => sum + line.length, 0);\n    return Math.round(totalLength / lines.length * 100) / 100;\n  }\n\n  findLongestLine(lines) {\n    return Math.max(...lines.map(line => line.length));\n  }\n\n  checkIndentationConsistency(lines) {\n    const indentations = new Set();\n\n    lines.forEach(line => {\n      if (line.trim().length > 0) {\n        const leadingSpaces = line.match(/^\\s*/)[0].length;\n        if (leadingSpaces > 0) {\n          indentations.add(leadingSpaces);\n        }\n      }\n    });\n\n    return {\n      consistent: indentations.size <= 2,\n      patterns: Array.from(indentations).sort((a, b) => a - b)\n    };\n  }\n\n  checkBracketBalance(content) {\n    const brackets = { '(': 0, '[': 0, '{': 0 };\n    const closing = { ')': '(', ']': '[', '}': '{' };\n\n    for (const char of content) {\n      if (char in brackets) {\n        brackets[char]++;\n      } else if (char in closing) {\n        brackets[closing[char]]--;\n      }\n    }\n\n    const balanced = Object.values(brackets).every(count => count === 0);\n    return { balanced, counts: brackets };\n  }\n\n  countTokens(content, language) {\n    // 简化的token计数\n    const tokenPattern = /\\b\\w+\\b|[{}\\[\\]();,.]|[+\\-*/%=<>!&|^~]/g;\n    const tokens = content.match(tokenPattern) || [];\n    return tokens.length;\n  }\n\n  // 占位符方法（简化实现）\n  extractModules(content, language) { return []; }\n  analyzeBlockStructure(content, language) { return {}; }\n  buildHierarchy(content, language) { return {}; }\n  calculateAverageFunctionLength(functions) {\n    if (functions.length === 0) {return 0;}\n    return functions.reduce((sum, fn) => sum + fn.length, 0) / functions.length;\n  }\n  calculateAverageClassSize(classes) {\n    if (classes.length === 0) {return 0;}\n    return classes.reduce((sum, cls) => sum + cls.length, 0) / classes.length;\n  }\n  calculateMaxNestingDepth(content) {\n    let maxDepth = 0;\n    let currentDepth = 0;\n\n    for (const char of content) {\n      if (char === '{') {\n        currentDepth++;\n        maxDepth = Math.max(maxDepth, currentDepth);\n      } else if (char === '}') {\n        currentDepth--;\n      }\n    }\n\n    return maxDepth;\n  }\n  extractExports(content, language) { return []; }\n  findInternalDependencies(content, language) { return []; }\n  findExternalDependencies(content, language) { return []; }\n  detectCircularDependencies(content, language) { return []; }\n  calculateDependencyRatio(dependencies) { return 0; }\n  extractVariables(content, language) { return []; }\n  extractConstants(content, language) { return []; }\n  extractFunctionSignatures(content, language) { return []; }\n  extractClassDefinitions(content, language) { return []; }\n  extractInterfaces(content, language) { return []; }\n  extractTypeDefinitions(content, language) { return []; }\n  countPublicSymbols(symbols) { return 0; }\n  countPrivateSymbols(symbols) { return 0; }\n  findUnusedSymbols(content, symbols) { return []; }\n  checkNamingConventions(symbols, language) { return {}; }\n  detectDesignPatterns(content, language) { return []; }\n  detectAntiPatterns(content, language) { return []; }\n  detectCodeSmells(content, language) { return []; }\n  checkBestPractices(content, language) { return []; }\n  checkCodingConventions(content, language) { return []; }\n  calculateBestPracticeScore(practices) { return 0; }\n  calculateConventionScore(conventions) { return 0; }\n}\n\n// 导出类\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = ASTAnalyzer;\n} else if (typeof window !== 'undefined') {\n  window.ASTAnalyzer = ASTAnalyzer;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\analyzers\\AnalysisCache.js","messages":[{"ruleId":"no-undefined","severity":2,"message":"Unexpected use of undefined.","line":28,"column":12,"nodeType":"Identifier","messageId":"unexpectedUndefined","endLine":28,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 分析缓存器 - 负责分析结果的缓存管理\n * 符合单一职责原则：专门处理缓存相关功能\n */\nclass AnalysisCache {\n  constructor() {\n    this.cache = new Map();\n    this.maxSize = 1000; // 最大缓存条目数\n    this.hitCount = 0;\n    this.missCount = 0;\n  }\n\n  /**\n     * 获取缓存值\n     * @param {string} key - 缓存键\n     * @returns {*} 缓存值或undefined\n     */\n  get(key) {\n    if (this.cache.has(key)) {\n      this.hitCount++;\n      // 更新访问时间（LRU策略）\n      const value = this.cache.get(key);\n      this.cache.delete(key);\n      this.cache.set(key, value);\n      return value;\n    }\n    this.missCount++;\n    return undefined;\n  }\n\n  /**\n     * 设置缓存值\n     * @param {string} key - 缓存键\n     * @param {*} value - 缓存值\n     */\n  set(key, value) {\n    // 如果已存在，先删除\n    if (this.cache.has(key)) {\n      this.cache.delete(key);\n    }\n    // 检查缓存大小限制\n    else if (this.cache.size >= this.maxSize) {\n      // 删除最旧的条目（LRU策略）\n      const firstKey = this.cache.keys().next().value;\n      this.cache.delete(firstKey);\n    }\n\n    this.cache.set(key, value);\n  }\n\n  /**\n     * 检查缓存是否存在\n     * @param {string} key - 缓存键\n     * @returns {boolean} 是否存在\n     */\n  has(key) {\n    return this.cache.has(key);\n  }\n\n  /**\n     * 生成缓存键\n     * @param {string} filePath - 文件路径\n     * @param {string} content - 文件内容\n     * @returns {string} 缓存键\n     */\n  generateCacheKey(filePath, content) {\n    const contentHash = this.simpleHash(content);\n    return `${filePath}:${contentHash}`;\n  }\n\n  /**\n     * 清空缓存\n     */\n  clearCache() {\n    this.cache.clear();\n    this.hitCount = 0;\n    this.missCount = 0;\n  }\n\n  /**\n     * 获取缓存统计信息\n     * @returns {Object} 缓存统计\n     */\n  getCacheStats() {\n    const totalRequests = this.hitCount + this.missCount;\n    const hitRate = totalRequests > 0 ? (this.hitCount / totalRequests * 100).toFixed(2) : 0;\n\n    return {\n      size: this.cache.size,\n      maxSize: this.maxSize,\n      hitCount: this.hitCount,\n      missCount: this.missCount,\n      hitRate: `${hitRate}%`,\n      memoryUsage: this.estimateMemoryUsage()\n    };\n  }\n\n  /**\n     * 估算内存使用量\n     * @returns {string} 内存使用量描述\n     */\n  estimateMemoryUsage() {\n    let totalSize = 0;\n    for (const [key, value] of this.cache) {\n      totalSize += key.length * 2; // 字符串按2字节计算\n      totalSize += JSON.stringify(value).length * 2;\n    }\n\n    if (totalSize < 1024) {\n      return `${totalSize} bytes`;\n    } else if (totalSize < 1024 * 1024) {\n      return `${(totalSize / 1024).toFixed(2)} KB`;\n    }\n    return `${(totalSize / (1024 * 1024)).toFixed(2)} MB`;\n\n  }\n\n  /**\n     * 简单哈希函数\n     * @param {string} str - 输入字符串\n     * @returns {string} 哈希值\n     */\n  simpleHash(str) {\n    let hash = 0;\n    if (str.length === 0) {return hash.toString();}\n\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // 转换为32位整数\n    }\n\n    return Math.abs(hash).toString(36);\n  }\n\n  /**\n     * 设置最大缓存大小\n     * @param {number} size - 最大缓存条目数\n     */\n  setMaxSize(size) {\n    this.maxSize = size;\n    // 如果当前缓存超过新的限制，清理多余条目\n    while (this.cache.size > this.maxSize) {\n      const firstKey = this.cache.keys().next().value;\n      this.cache.delete(firstKey);\n    }\n  }\n\n  /**\n     * 获取所有缓存键\n     * @returns {Array<string>} 缓存键数组\n     */\n  getKeys() {\n    return Array.from(this.cache.keys());\n  }\n\n  /**\n     * 删除指定缓存\n     * @param {string} key - 缓存键\n     * @returns {boolean} 是否删除成功\n     */\n  delete(key) {\n    return this.cache.delete(key);\n  }\n}\n\n// 导出类\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = AnalysisCache;\n} else if (typeof window !== 'undefined') {\n  window.AnalysisCache = AnalysisCache;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\analyzers\\BasicAnalyzer.js","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":6,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":6,"endColumn":5,"fix":{"range":[77,81],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":7,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":7,"endColumn":9,"fix":{"range":[97,105],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":8,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":8,"endColumn":13,"fix":{"range":[123,135],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":9,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":9,"endColumn":13,"fix":{"range":[162,174],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":10,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":10,"endColumn":17,"fix":{"range":[188,204],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":11,"column":1,"nodeType":"RegularExpression","messageId":"wrongIndentation","endLine":11,"endColumn":21,"fix":{"range":[217,237],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":12,"column":1,"nodeType":"RegularExpression","messageId":"wrongIndentation","endLine":12,"endColumn":21,"fix":{"range":[284,304],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":13,"column":1,"nodeType":"RegularExpression","messageId":"wrongIndentation","endLine":13,"endColumn":21,"fix":{"range":[358,378],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":14,"column":1,"nodeType":"RegularExpression","messageId":"wrongIndentation","endLine":14,"endColumn":21,"fix":{"range":[433,453],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":15,"column":1,"nodeType":"RegularExpression","messageId":"wrongIndentation","endLine":15,"endColumn":21,"fix":{"range":[508,528],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":16,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":16,"endColumn":17,"fix":{"range":[574,590],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":17,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":17,"endColumn":17,"fix":{"range":[593,609],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":18,"column":1,"nodeType":"RegularExpression","messageId":"wrongIndentation","endLine":18,"endColumn":21,"fix":{"range":[620,640],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":19,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":19,"endColumn":17,"fix":{"range":[724,740],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":20,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":20,"endColumn":17,"fix":{"range":[743,759],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":21,"column":1,"nodeType":"RegularExpression","messageId":"wrongIndentation","endLine":21,"endColumn":21,"fix":{"range":[772,792],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":22,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":22,"endColumn":17,"fix":{"range":[858,874],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":23,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":23,"endColumn":17,"fix":{"range":[877,893],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":24,"column":1,"nodeType":"RegularExpression","messageId":"wrongIndentation","endLine":24,"endColumn":21,"fix":{"range":[904,924],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":25,"column":1,"nodeType":"RegularExpression","messageId":"wrongIndentation","endLine":25,"endColumn":21,"fix":{"range":[964,984],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":26,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":26,"endColumn":17,"fix":{"range":[1024,1040],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":27,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":27,"endColumn":13,"fix":{"range":[1042,1054],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":28,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":28,"endColumn":13,"fix":{"range":[1057,1069],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":29,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":29,"endColumn":13,"fix":{"range":[1081,1093],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":30,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":30,"endColumn":17,"fix":{"range":[1103,1119],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":31,"column":1,"nodeType":"RegularExpression","messageId":"wrongIndentation","endLine":31,"endColumn":21,"fix":{"range":[1132,1152],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":32,"column":1,"nodeType":"RegularExpression","messageId":"wrongIndentation","endLine":32,"endColumn":21,"fix":{"range":[1192,1212],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":33,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":33,"endColumn":17,"fix":{"range":[1259,1275],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":34,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":34,"endColumn":17,"fix":{"range":[1278,1294],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":35,"column":1,"nodeType":"RegularExpression","messageId":"wrongIndentation","endLine":35,"endColumn":21,"fix":{"range":[1305,1325],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":36,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":36,"endColumn":17,"fix":{"range":[1382,1398],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":37,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":37,"endColumn":17,"fix":{"range":[1401,1417],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":38,"column":1,"nodeType":"RegularExpression","messageId":"wrongIndentation","endLine":38,"endColumn":21,"fix":{"range":[1430,1450],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":39,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":39,"endColumn":17,"fix":{"range":[1487,1503],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":40,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":40,"endColumn":17,"fix":{"range":[1506,1522],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":41,"column":1,"nodeType":"RegularExpression","messageId":"wrongIndentation","endLine":41,"endColumn":21,"fix":{"range":[1533,1553],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":42,"column":1,"nodeType":"RegularExpression","messageId":"wrongIndentation","endLine":42,"endColumn":21,"fix":{"range":[1599,1619],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":43,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":43,"endColumn":17,"fix":{"range":[1657,1673],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":44,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":44,"endColumn":13,"fix":{"range":[1675,1687],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":45,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":45,"endColumn":13,"fix":{"range":[1690,1702],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":46,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":46,"endColumn":13,"fix":{"range":[1712,1724],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":47,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":47,"endColumn":17,"fix":{"range":[1732,1748],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":48,"column":1,"nodeType":"RegularExpression","messageId":"wrongIndentation","endLine":48,"endColumn":21,"fix":{"range":[1761,1781],"text":"          "}},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\[.","line":48,"column":197,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":48,"endColumn":198,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1957,1958],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1957,1957],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":49,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":49,"endColumn":17,"fix":{"range":[2057,2073],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":50,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":50,"endColumn":17,"fix":{"range":[2076,2092],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":51,"column":1,"nodeType":"RegularExpression","messageId":"wrongIndentation","endLine":51,"endColumn":21,"fix":{"range":[2103,2123],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":52,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":52,"endColumn":17,"fix":{"range":[2302,2318],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":53,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":53,"endColumn":17,"fix":{"range":[2321,2337],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":54,"column":1,"nodeType":"RegularExpression","messageId":"wrongIndentation","endLine":54,"endColumn":21,"fix":{"range":[2350,2370],"text":"          "}},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\[.","line":54,"column":136,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":54,"endColumn":137,"suggestions":[{"messageId":"removeEscape","fix":{"range":[2485,2486],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[2485,2485],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":55,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":55,"endColumn":17,"fix":{"range":[2530,2546],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":56,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":56,"endColumn":17,"fix":{"range":[2549,2565],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":57,"column":1,"nodeType":"RegularExpression","messageId":"wrongIndentation","endLine":57,"endColumn":21,"fix":{"range":[2576,2596],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":58,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":58,"endColumn":17,"fix":{"range":[2660,2676],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":59,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":59,"endColumn":13,"fix":{"range":[2678,2690],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":60,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":60,"endColumn":9,"fix":{"range":[2692,2700],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":61,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":61,"endColumn":5,"fix":{"range":[2703,2707],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":63,"column":1,"nodeType":"Block","messageId":"wrongIndentation","endLine":63,"endColumn":5,"fix":{"range":[2710,2714],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":69,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":69,"endColumn":5,"fix":{"range":[2857,2861],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":70,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":70,"endColumn":9,"fix":{"range":[2918,2926],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":71,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":71,"endColumn":13,"fix":{"range":[2932,2944],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":73,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":73,"endColumn":13,"fix":{"range":[3006,3018],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":74,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":74,"endColumn":17,"fix":{"range":[3037,3053],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":75,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":75,"endColumn":17,"fix":{"range":[3073,3089],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":76,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":76,"endColumn":17,"fix":{"range":[3129,3145],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":77,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":77,"endColumn":17,"fix":{"range":[3192,3208],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":78,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":78,"endColumn":17,"fix":{"range":[3271,3287],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":79,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":79,"endColumn":17,"fix":{"range":[3346,3362],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":80,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":80,"endColumn":17,"fix":{"range":[3425,3441],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":81,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":81,"endColumn":17,"fix":{"range":[3510,3526],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":82,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":82,"endColumn":17,"fix":{"range":[3587,3603],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":83,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":83,"endColumn":13,"fix":{"range":[3673,3685],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":85,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":85,"endColumn":13,"fix":{"range":[3689,3701],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":86,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":86,"endColumn":13,"fix":{"range":[3711,3723],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":88,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":88,"endColumn":13,"fix":{"range":[3776,3788],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":89,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":89,"endColumn":17,"fix":{"range":[3797,3813],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":90,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":90,"endColumn":17,"fix":{"range":[3828,3844],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":91,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":91,"endColumn":17,"fix":{"range":[3864,3880],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":92,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":92,"endColumn":13,"fix":{"range":[3916,3928],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":93,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":93,"endColumn":9,"fix":{"range":[3931,3939],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":94,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":94,"endColumn":13,"fix":{"range":[3957,3969],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":95,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":95,"endColumn":17,"fix":{"range":[3978,3994],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":96,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":96,"endColumn":17,"fix":{"range":[4010,4026],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":97,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":97,"endColumn":17,"fix":{"range":[4061,4077],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":98,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":98,"endColumn":13,"fix":{"range":[4113,4125],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":99,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":99,"endColumn":9,"fix":{"range":[4128,4136],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":100,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":100,"endColumn":5,"fix":{"range":[4138,4142],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":102,"column":1,"nodeType":"Block","messageId":"wrongIndentation","endLine":102,"endColumn":5,"fix":{"range":[4145,4149],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":107,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":107,"endColumn":5,"fix":{"range":[4253,4257],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":108,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":108,"endColumn":9,"fix":{"range":[4288,4296],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":109,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":109,"endColumn":9,"fix":{"range":[4331,4339],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":110,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":110,"endColumn":9,"fix":{"range":[4407,4415],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":111,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":111,"endColumn":13,"fix":{"range":[4456,4468],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":112,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":112,"endColumn":13,"fix":{"range":[4497,4509],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":113,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":113,"endColumn":9,"fix":{"range":[4568,4576],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":115,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":115,"endColumn":9,"fix":{"range":[4581,4589],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":116,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":116,"endColumn":13,"fix":{"range":[4598,4610],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":117,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":117,"endColumn":13,"fix":{"range":[4636,4648],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":118,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":118,"endColumn":13,"fix":{"range":[4685,4697],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":119,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":119,"endColumn":13,"fix":{"range":[4726,4738],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":120,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":120,"endColumn":13,"fix":{"range":[4787,4799],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":121,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":121,"endColumn":13,"fix":{"range":[4827,4839],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":122,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":122,"endColumn":13,"fix":{"range":[4894,4906],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":123,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":123,"endColumn":13,"fix":{"range":[4974,4986],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":124,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":124,"endColumn":9,"fix":{"range":[5071,5079],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":125,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":125,"endColumn":5,"fix":{"range":[5082,5086],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":127,"column":1,"nodeType":"Block","messageId":"wrongIndentation","endLine":127,"endColumn":5,"fix":{"range":[5089,5093],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":133,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":133,"endColumn":5,"fix":{"range":[5235,5239],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":134,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":134,"endColumn":9,"fix":{"range":[5277,5285],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":135,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":135,"endColumn":9,"fix":{"range":[5307,5315],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":137,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":137,"endColumn":9,"fix":{"range":[5407,5415],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":138,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":138,"endColumn":13,"fix":{"range":[5445,5457],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":139,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":139,"endColumn":13,"fix":{"range":[5468,5480],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":141,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":141,"endColumn":13,"fix":{"range":[5538,5550],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":142,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":142,"endColumn":17,"fix":{"range":[5599,5615],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":143,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":143,"endColumn":17,"fix":{"range":[5673,5689],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":144,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":144,"endColumn":17,"fix":{"range":[5721,5737],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":146,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":146,"endColumn":17,"fix":{"range":[5798,5814],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":147,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":147,"endColumn":17,"fix":{"range":[5830,5846],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":149,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":149,"endColumn":17,"fix":{"range":[5915,5931],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":150,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":150,"endColumn":21,"fix":{"range":[5948,5968],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":151,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":151,"endColumn":21,"fix":{"range":[5988,6008],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":152,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":152,"endColumn":21,"fix":{"range":[6026,6046],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":153,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":153,"endColumn":21,"fix":{"range":[6070,6090],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":154,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":154,"endColumn":21,"fix":{"range":[6123,6143],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":155,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":155,"endColumn":21,"fix":{"range":[6187,6207],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":156,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":156,"endColumn":21,"fix":{"range":[6261,6281],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":157,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":157,"endColumn":21,"fix":{"range":[6318,6338],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":158,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":158,"endColumn":17,"fix":{"range":[6381,6397],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":159,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":159,"endColumn":13,"fix":{"range":[6401,6413],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":160,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":160,"endColumn":9,"fix":{"range":[6415,6423],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":162,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":162,"endColumn":9,"fix":{"range":[6428,6436],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":163,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":163,"endColumn":5,"fix":{"range":[6481,6485],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":165,"column":1,"nodeType":"Block","messageId":"wrongIndentation","endLine":165,"endColumn":5,"fix":{"range":[6488,6492],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":171,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":171,"endColumn":5,"fix":{"range":[6632,6636],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":172,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":172,"endColumn":9,"fix":{"range":[6672,6680],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":173,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":173,"endColumn":9,"fix":{"range":[6700,6708],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":175,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":175,"endColumn":9,"fix":{"range":[6796,6804],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":176,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":176,"endColumn":13,"fix":{"range":[6834,6846],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":177,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":177,"endColumn":13,"fix":{"range":[6857,6869],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":179,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":179,"endColumn":13,"fix":{"range":[6927,6939],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":180,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":180,"endColumn":17,"fix":{"range":[6988,7004],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":181,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":181,"endColumn":17,"fix":{"range":[7032,7048],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":182,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":182,"endColumn":17,"fix":{"range":[7080,7096],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":184,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":184,"endColumn":17,"fix":{"range":[7157,7173],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":185,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":185,"endColumn":17,"fix":{"range":[7181,7197],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":186,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":186,"endColumn":17,"fix":{"range":[7259,7275],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":188,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":188,"endColumn":17,"fix":{"range":[7339,7355],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":189,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":189,"endColumn":21,"fix":{"range":[7370,7390],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":190,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":190,"endColumn":21,"fix":{"range":[7407,7427],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":191,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":191,"endColumn":21,"fix":{"range":[7445,7465],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":192,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":192,"endColumn":21,"fix":{"range":[7489,7509],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":193,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":193,"endColumn":21,"fix":{"range":[7539,7559],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":194,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":194,"endColumn":21,"fix":{"range":[7600,7620],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":195,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":195,"endColumn":21,"fix":{"range":[7638,7658],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":196,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":196,"endColumn":21,"fix":{"range":[7687,7707],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":197,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":197,"endColumn":21,"fix":{"range":[7755,7775],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":198,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":198,"endColumn":17,"fix":{"range":[7817,7833],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":199,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":199,"endColumn":13,"fix":{"range":[7837,7849],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":200,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":200,"endColumn":9,"fix":{"range":[7851,7859],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":202,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":202,"endColumn":9,"fix":{"range":[7864,7872],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":203,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":203,"endColumn":5,"fix":{"range":[7888,7892],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":205,"column":1,"nodeType":"Block","messageId":"wrongIndentation","endLine":205,"endColumn":5,"fix":{"range":[7895,7899],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":211,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":211,"endColumn":5,"fix":{"range":[8041,8045],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":212,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":212,"endColumn":9,"fix":{"range":[8083,8091],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":213,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":213,"endColumn":9,"fix":{"range":[8113,8121],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":215,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":215,"endColumn":9,"fix":{"range":[8213,8221],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":216,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":216,"endColumn":13,"fix":{"range":[8251,8263],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":217,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":217,"endColumn":13,"fix":{"range":[8274,8286],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":219,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":219,"endColumn":13,"fix":{"range":[8344,8356],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":220,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":220,"endColumn":17,"fix":{"range":[8405,8421],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":221,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":221,"endColumn":17,"fix":{"range":[8452,8468],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":222,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":222,"endColumn":17,"fix":{"range":[8500,8516],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":224,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":224,"endColumn":17,"fix":{"range":[8577,8593],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":225,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":225,"endColumn":21,"fix":{"range":[8610,8630],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":226,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":226,"endColumn":21,"fix":{"range":[8650,8670],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":227,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":227,"endColumn":21,"fix":{"range":[8688,8708],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":228,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":228,"endColumn":21,"fix":{"range":[8732,8752],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":229,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":229,"endColumn":21,"fix":{"range":[8808,8828],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":230,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":230,"endColumn":17,"fix":{"range":[8884,8900],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":231,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":231,"endColumn":13,"fix":{"range":[8904,8916],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":232,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":232,"endColumn":9,"fix":{"range":[8918,8926],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":234,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":234,"endColumn":9,"fix":{"range":[8931,8939],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":235,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":235,"endColumn":5,"fix":{"range":[8984,8988],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":237,"column":1,"nodeType":"Block","messageId":"wrongIndentation","endLine":237,"endColumn":5,"fix":{"range":[8991,8995],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":243,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":243,"endColumn":5,"fix":{"range":[9137,9141],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":244,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":244,"endColumn":9,"fix":{"range":[9182,9190],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":245,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":245,"endColumn":9,"fix":{"range":[9215,9223],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":247,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":247,"endColumn":9,"fix":{"range":[9311,9319],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":248,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":248,"endColumn":13,"fix":{"range":[9349,9361],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":249,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":249,"endColumn":13,"fix":{"range":[9372,9384],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":251,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":251,"endColumn":13,"fix":{"range":[9442,9454],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":252,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":252,"endColumn":17,"fix":{"range":[9503,9519],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":253,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":253,"endColumn":17,"fix":{"range":[9552,9568],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":255,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":255,"endColumn":17,"fix":{"range":[9630,9646],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":256,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":256,"endColumn":21,"fix":{"range":[9666,9686],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":257,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":257,"endColumn":21,"fix":{"range":[9708,9728],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":258,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":258,"endColumn":21,"fix":{"range":[9746,9766],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":259,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":259,"endColumn":21,"fix":{"range":[9818,9838],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":260,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":260,"endColumn":21,"fix":{"range":[9893,9913],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":261,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":261,"endColumn":17,"fix":{"range":[9946,9962],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":262,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":262,"endColumn":13,"fix":{"range":[9966,9978],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":263,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":263,"endColumn":9,"fix":{"range":[9980,9988],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":265,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":265,"endColumn":9,"fix":{"range":[9993,10001],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":266,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":266,"endColumn":5,"fix":{"range":[10022,10026],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":268,"column":1,"nodeType":"Block","messageId":"wrongIndentation","endLine":268,"endColumn":5,"fix":{"range":[10029,10033],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":274,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":274,"endColumn":5,"fix":{"range":[10176,10180],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":275,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":275,"endColumn":9,"fix":{"range":[10217,10225],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":276,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":276,"endColumn":13,"fix":{"range":[10244,10256],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":277,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":277,"endColumn":13,"fix":{"range":[10272,10284],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":278,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":278,"endColumn":13,"fix":{"range":[10299,10311],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":279,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":279,"endColumn":13,"fix":{"range":[10326,10338],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":280,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":280,"endColumn":9,"fix":{"range":[10354,10362],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":282,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":282,"endColumn":9,"fix":{"range":[10366,10374],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":283,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":283,"endColumn":9,"fix":{"range":[10409,10417],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":284,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":284,"endColumn":9,"fix":{"range":[10449,10457],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":286,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":286,"endColumn":9,"fix":{"range":[10483,10491],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":287,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":287,"endColumn":13,"fix":{"range":[10524,10536],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":289,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":289,"endColumn":13,"fix":{"range":[10566,10578],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":290,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":290,"endColumn":13,"fix":{"range":[10588,10600],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":291,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":291,"endColumn":17,"fix":{"range":[10656,10672],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":292,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":292,"endColumn":21,"fix":{"range":[10725,10745],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":293,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":293,"endColumn":21,"fix":{"range":[10772,10792],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":294,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":294,"endColumn":17,"fix":{"range":[10820,10836],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":295,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":295,"endColumn":17,"fix":{"range":[10838,10854],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":296,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":296,"endColumn":21,"fix":{"range":[10906,10926],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":297,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":297,"endColumn":21,"fix":{"range":[10954,10974],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 24.","line":298,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":298,"endColumn":25,"fix":{"range":[11000,11024],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 24.","line":299,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":299,"endColumn":25,"fix":{"range":[11051,11075],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 24.","line":300,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":300,"endColumn":25,"fix":{"range":[11095,11119],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":301,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":301,"endColumn":21,"fix":{"range":[11157,11177],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":302,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":302,"endColumn":21,"fix":{"range":[11181,11201],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":303,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":303,"endColumn":17,"fix":{"range":[11256,11272],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":304,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":304,"endColumn":13,"fix":{"range":[11274,11286],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":306,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":306,"endColumn":13,"fix":{"range":[11289,11301],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":307,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":307,"endColumn":13,"fix":{"range":[11311,11323],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":308,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":308,"endColumn":17,"fix":{"range":[11350,11366],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":310,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":310,"endColumn":17,"fix":{"range":[11400,11416],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":311,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":311,"endColumn":21,"fix":{"range":[11502,11522],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":312,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":312,"endColumn":17,"fix":{"range":[11550,11566],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":313,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":313,"endColumn":21,"fix":{"range":[11629,11649],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":314,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":314,"endColumn":17,"fix":{"range":[11677,11693],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":316,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":316,"endColumn":17,"fix":{"range":[11696,11712],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":317,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":317,"endColumn":21,"fix":{"range":[11739,11759],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 24.","line":318,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":318,"endColumn":25,"fix":{"range":[11786,11810],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 24.","line":319,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":319,"endColumn":25,"fix":{"range":[11827,11851],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":320,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":320,"endColumn":21,"fix":{"range":[11868,11888],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":321,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":321,"endColumn":21,"fix":{"range":[11892,11912],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":322,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":322,"endColumn":17,"fix":{"range":[11935,11951],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":323,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":323,"endColumn":13,"fix":{"range":[11953,11965],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":324,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":324,"endColumn":9,"fix":{"range":[11967,11975],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":326,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":326,"endColumn":9,"fix":{"range":[11980,11988],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":327,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":327,"endColumn":9,"fix":{"range":[11998,12006],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":328,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":328,"endColumn":9,"fix":{"range":[12082,12090],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":330,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":330,"endColumn":9,"fix":{"range":[12197,12205],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":331,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":331,"endColumn":5,"fix":{"range":[12222,12226],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":333,"column":1,"nodeType":"Block","messageId":"wrongIndentation","endLine":333,"endColumn":5,"fix":{"range":[12229,12233],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":339,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":339,"endColumn":5,"fix":{"range":[12378,12382],"text":"  "}},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":339,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":339,"endColumn":43},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":340,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":340,"endColumn":9,"fix":{"range":[12424,12432],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":341,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":341,"endColumn":13,"fix":{"range":[12452,12464],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":342,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":342,"endColumn":13,"fix":{"range":[12484,12496],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":343,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":343,"endColumn":13,"fix":{"range":[12520,12532],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":344,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":344,"endColumn":13,"fix":{"range":[12547,12559],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":345,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":345,"endColumn":13,"fix":{"range":[12581,12593],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":346,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":346,"endColumn":13,"fix":{"range":[12608,12620],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":347,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":347,"endColumn":9,"fix":{"range":[12633,12641],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":349,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":349,"endColumn":9,"fix":{"range":[12645,12653],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":350,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":350,"endColumn":9,"fix":{"range":[12688,12696],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":351,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":351,"endColumn":9,"fix":{"range":[12720,12728],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":352,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":352,"endColumn":9,"fix":{"range":[12750,12758],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":354,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":354,"endColumn":9,"fix":{"range":[12778,12786],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":355,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":355,"endColumn":13,"fix":{"range":[12810,12822],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":356,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":356,"endColumn":13,"fix":{"range":[12851,12863],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":358,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":358,"endColumn":13,"fix":{"range":[12902,12914],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":360,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":360,"endColumn":13,"fix":{"range":[12928,12940],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":361,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":361,"endColumn":13,"fix":{"range":[12950,12962],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":362,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":362,"endColumn":13,"fix":{"range":[13017,13029],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":364,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":364,"endColumn":13,"fix":{"range":[13086,13098],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":365,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":365,"endColumn":13,"fix":{"range":[13142,13154],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":367,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":367,"endColumn":13,"fix":{"range":[13187,13199],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":368,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":368,"endColumn":17,"fix":{"range":[13249,13265],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":369,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":369,"endColumn":13,"fix":{"range":[13309,13321],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":371,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":371,"endColumn":13,"fix":{"range":[13324,13336],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":372,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":372,"endColumn":13,"fix":{"range":[13350,13362],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":373,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":373,"endColumn":17,"fix":{"range":[13384,13400],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":375,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":375,"endColumn":17,"fix":{"range":[13425,13441],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":376,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":376,"endColumn":21,"fix":{"range":[13490,13510],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":377,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":377,"endColumn":17,"fix":{"range":[13541,13557],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":378,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":378,"endColumn":17,"fix":{"range":[13559,13575],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":379,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":379,"endColumn":21,"fix":{"range":[13617,13637],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":380,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":380,"endColumn":17,"fix":{"range":[13661,13677],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":381,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":381,"endColumn":17,"fix":{"range":[13679,13695],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":382,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":382,"endColumn":21,"fix":{"range":[13742,13762],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":383,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":383,"endColumn":17,"fix":{"range":[13785,13801],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":384,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":384,"endColumn":13,"fix":{"range":[13803,13815],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":385,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":385,"endColumn":9,"fix":{"range":[13817,13825],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":387,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":387,"endColumn":9,"fix":{"range":[13830,13838],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":389,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":389,"endColumn":9,"fix":{"range":[13930,13938],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":390,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":390,"endColumn":5,"fix":{"range":[13956,13960],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":392,"column":1,"nodeType":"Block","messageId":"wrongIndentation","endLine":392,"endColumn":5,"fix":{"range":[13963,13967],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":397,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":397,"endColumn":5,"fix":{"range":[14068,14072],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":398,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":398,"endColumn":9,"fix":{"range":[14101,14109],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":399,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":399,"endColumn":9,"fix":{"range":[14144,14152],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":400,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":400,"endColumn":9,"fix":{"range":[14190,14198],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":402,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":402,"endColumn":9,"fix":{"range":[14233,14241],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":403,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":403,"endColumn":13,"fix":{"range":[14250,14262],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":404,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":404,"endColumn":13,"fix":{"range":[14326,14338],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":405,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":405,"endColumn":17,"fix":{"range":[14384,14400],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":406,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":406,"endColumn":13,"fix":{"range":[14490,14502],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":407,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":407,"endColumn":17,"fix":{"range":[14541,14557],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":408,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":408,"endColumn":13,"fix":{"range":[14645,14657],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":409,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":409,"endColumn":17,"fix":{"range":[14696,14712],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":410,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":410,"endColumn":13,"fix":{"range":[14771,14783],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":411,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":411,"endColumn":17,"fix":{"range":[14819,14835],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":412,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":412,"endColumn":13,"fix":{"range":[14892,14904],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":413,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":413,"endColumn":17,"fix":{"range":[14943,14959],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":414,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":414,"endColumn":9,"fix":{"range":[15017,15025],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":415,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":415,"endColumn":5,"fix":{"range":[15028,15032],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":417,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":417,"endColumn":5,"fix":{"range":[15035,15039],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":418,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":418,"endColumn":5,"fix":{"range":[15047,15051],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":419,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":419,"endColumn":9,"fix":{"range":[15081,15089],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":420,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":420,"endColumn":9,"fix":{"range":[15132,15140],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":421,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":421,"endColumn":9,"fix":{"range":[15218,15226],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":422,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":422,"endColumn":9,"fix":{"range":[15280,15288],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":423,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":423,"endColumn":9,"fix":{"range":[15342,15350],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":424,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":424,"endColumn":5,"fix":{"range":[15377,15381],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":426,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":426,"endColumn":5,"fix":{"range":[15384,15388],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":427,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":427,"endColumn":9,"fix":{"range":[15420,15428],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":428,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":428,"endColumn":5,"fix":{"range":[15483,15487],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":430,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":430,"endColumn":5,"fix":{"range":[15490,15494],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":431,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":431,"endColumn":9,"fix":{"range":[15516,15524],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":433,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":433,"endColumn":5,"fix":{"range":[15664,15668],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":435,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":435,"endColumn":5,"fix":{"range":[15671,15675],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":436,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":436,"endColumn":9,"fix":{"range":[15718,15726],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":437,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":437,"endColumn":9,"fix":{"range":[15740,15748],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":438,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":438,"endColumn":9,"fix":{"range":[15768,15776],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":439,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":439,"endColumn":9,"fix":{"range":[15796,15804],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":441,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":441,"endColumn":9,"fix":{"range":[15834,15842],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":442,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":442,"endColumn":13,"fix":{"range":[15871,15883],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":443,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":443,"endColumn":17,"fix":{"range":[15909,15925],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":444,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":444,"endColumn":17,"fix":{"range":[15939,15955],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":445,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":445,"endColumn":13,"fix":{"range":[15979,15991],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":446,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":446,"endColumn":17,"fix":{"range":[16024,16040],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":447,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":447,"endColumn":17,"fix":{"range":[16054,16070],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 10 spaces but found 20.","line":448,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":448,"endColumn":21,"fix":{"range":[16113,16133],"text":"          "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 16.","line":449,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":449,"endColumn":17,"fix":{"range":[16178,16194],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":450,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":450,"endColumn":13,"fix":{"range":[16196,16208],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":451,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":451,"endColumn":13,"fix":{"range":[16210,16222],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":452,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":452,"endColumn":9,"fix":{"range":[16227,16235],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":454,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":454,"endColumn":9,"fix":{"range":[16238,16246],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":455,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":455,"endColumn":5,"fix":{"range":[16328,16332],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":457,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":457,"endColumn":5,"fix":{"range":[16335,16339],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":458,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":458,"endColumn":9,"fix":{"range":[16379,16387],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":459,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":459,"endColumn":5,"fix":{"range":[16451,16455],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":461,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":461,"endColumn":5,"fix":{"range":[16458,16462],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":462,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":462,"endColumn":9,"fix":{"range":[16505,16513],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":463,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":463,"endColumn":5,"fix":{"range":[16564,16568],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":465,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":465,"endColumn":5,"fix":{"range":[16571,16575],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":466,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":466,"endColumn":9,"fix":{"range":[16624,16632],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":467,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":467,"endColumn":9,"fix":{"range":[16688,16696],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":469,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":469,"endColumn":9,"fix":{"range":[16724,16732],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":470,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":470,"endColumn":5,"fix":{"range":[16821,16825],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":472,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":472,"endColumn":5,"fix":{"range":[16828,16832],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":473,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":473,"endColumn":9,"fix":{"range":[16869,16877],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":474,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":474,"endColumn":9,"fix":{"range":[16932,16940],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":475,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":475,"endColumn":9,"fix":{"range":[16992,17000],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":476,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":476,"endColumn":9,"fix":{"range":[17061,17069],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":477,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":477,"endColumn":5,"fix":{"range":[17086,17090],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":479,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":479,"endColumn":5,"fix":{"range":[17093,17097],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":480,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":480,"endColumn":9,"fix":{"range":[17136,17144],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":481,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":481,"endColumn":9,"fix":{"range":[17229,17237],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":483,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":483,"endColumn":9,"fix":{"range":[17332,17340],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":484,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":484,"endColumn":13,"fix":{"range":[17349,17361],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":485,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":485,"endColumn":13,"fix":{"range":[17409,17421],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":486,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":486,"endColumn":9,"fix":{"range":[17505,17513],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":487,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":487,"endColumn":5,"fix":{"range":[17516,17520],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":489,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":489,"endColumn":5,"fix":{"range":[17523,17527],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":490,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":490,"endColumn":9,"fix":{"range":[17565,17573],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":491,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":491,"endColumn":9,"fix":{"range":[17628,17636],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":492,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":492,"endColumn":9,"fix":{"range":[17687,17695],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":493,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":493,"endColumn":9,"fix":{"range":[17746,17754],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":494,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":494,"endColumn":5,"fix":{"range":[17772,17776],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":496,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":496,"endColumn":5,"fix":{"range":[17779,17783],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":497,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":497,"endColumn":9,"fix":{"range":[17824,17832],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":498,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":498,"endColumn":9,"fix":{"range":[17844,17852],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":499,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":499,"endColumn":9,"fix":{"range":[17903,17911],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":500,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":500,"endColumn":9,"fix":{"range":[18015,18023],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":501,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":501,"endColumn":5,"fix":{"range":[18067,18071],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":503,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":503,"endColumn":5,"fix":{"range":[18074,18078],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":504,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":504,"endColumn":9,"fix":{"range":[18110,18118],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":505,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":505,"endColumn":9,"fix":{"range":[18194,18202],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":506,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":506,"endColumn":9,"fix":{"range":[18251,18259],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":507,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":507,"endColumn":5,"fix":{"range":[18276,18280],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":509,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":509,"endColumn":5,"fix":{"range":[18283,18287],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":510,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":510,"endColumn":9,"fix":{"range":[18316,18324],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":511,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":511,"endColumn":5,"fix":{"range":[18407,18411],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":513,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":513,"endColumn":5,"fix":{"range":[18414,18418],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":514,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":514,"endColumn":9,"fix":{"range":[18452,18460],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":515,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":515,"endColumn":9,"fix":{"range":[18484,18492],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":516,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":516,"endColumn":13,"fix":{"range":[18524,18536],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":517,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":517,"endColumn":13,"fix":{"range":[18573,18585],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":518,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":518,"endColumn":13,"fix":{"range":[18622,18634],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":519,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":519,"endColumn":13,"fix":{"range":[18649,18661],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":520,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":520,"endColumn":9,"fix":{"range":[18674,18682],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":521,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":521,"endColumn":5,"fix":{"range":[18686,18690],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":523,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":523,"endColumn":5,"fix":{"range":[18693,18697],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":524,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":524,"endColumn":9,"fix":{"range":[18731,18739],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":525,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":525,"endColumn":9,"fix":{"range":[18763,18771],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":526,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":526,"endColumn":13,"fix":{"range":[18809,18821],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":527,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":527,"endColumn":13,"fix":{"range":[18870,18882],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":528,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":528,"endColumn":13,"fix":{"range":[18919,18931],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":529,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":529,"endColumn":13,"fix":{"range":[18946,18958],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":530,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":530,"endColumn":9,"fix":{"range":[18971,18979],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":531,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":531,"endColumn":5,"fix":{"range":[18983,18987],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":536,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":536,"endColumn":5,"fix":{"range":[19054,19058],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":538,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":538,"endColumn":5,"fix":{"range":[19134,19138],"text":"  "}}],"suppressedMessages":[],"errorCount":418,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":415,"fixableWarningCount":0,"source":"/**\n * 基础分析器 - 负责基础代码统计分析\n * 符合单一职责原则：专门处理基础代码统计功能\n */\nclass BasicAnalyzer {\n    constructor() {\n        this.patterns = {\n            // JavaScript/TypeScript模式\n            javascript: {\n                functions: [\n                    /function\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\(/g,\n                    /([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*[:=]\\s*function\\s*\\(/g,\n                    /([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*[:=]\\s*\\([^)]*\\)\\s*=>/g,\n                    /async\\s+function\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\(/g,\n                    /([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\([^)]*\\)\\s*{/g\n                ],\n                classes: [\n                    /class\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)(?:\\s+extends\\s+[a-zA-Z_$][a-zA-Z0-9_$]*)?\\s*{/g\n                ],\n                variables: [\n                    /(?:var|let|const)\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)(?:\\s*[=,]|\\s*;)/g\n                ],\n                imports: [\n                    /import\\s+.*?from\\s+['\"]([^'\"]+)['\"]/g,\n                    /require\\s*\\(\\s*['\"]([^'\"]+)['\"]\\s*\\)/g\n                ]\n            },\n            // Python模式\n            python: {\n                functions: [\n                    /def\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(/g,\n                    /async\\s+def\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(/g\n                ],\n                classes: [\n                    /class\\s+([a-zA-Z_][a-zA-Z0-9_]*)(?:\\s*\\([^)]*\\))?\\s*:/g\n                ],\n                variables: [\n                    /^\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*=/gm\n                ],\n                imports: [\n                    /from\\s+([a-zA-Z_][a-zA-Z0-9_.]*)\\s+import/g,\n                    /import\\s+([a-zA-Z_][a-zA-Z0-9_.]*)/g\n                ]\n            },\n            // Java模式\n            java: {\n                functions: [\n                    /(?:public|private|protected|static|final|abstract|synchronized|native)?\\s*(?:public|private|protected|static|final|abstract|synchronized|native)?\\s*(?:[a-zA-Z_$][a-zA-Z0-9_$<>\\[\\]]*\\s+)?([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\([^)]*\\)\\s*(?:throws\\s+[a-zA-Z_$][a-zA-Z0-9_$,\\s]*)?\\s*{/g\n                ],\n                classes: [\n                    /(?:public|private|protected|abstract|final)?\\s*class\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)(?:\\s+extends\\s+[a-zA-Z_$][a-zA-Z0-9_$]*)?(?:\\s+implements\\s+[a-zA-Z_$][a-zA-Z0-9_$,\\s]*)?\\s*{/g\n                ],\n                variables: [\n                    /(?:public|private|protected|static|final)?\\s*(?:public|private|protected|static|final)?\\s*[a-zA-Z_$][a-zA-Z0-9_$<>\\[\\]]*\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*[=;]/g\n                ],\n                imports: [\n                    /import\\s+(?:static\\s+)?([a-zA-Z_$][a-zA-Z0-9_$.]*(?:\\.\\*)?);/g\n                ]\n            }\n        };\n    }\n\n    /**\n       * 执行基础分析\n       * @param {string} content - 文件内容\n       * @param {string} language - 编程语言\n       * @returns {Object} 分析结果\n       */\n    performBasicAnalysis(content, language = 'javascript') {\n        try {\n            const normalizedLanguage = this.normalizeLanguage(language);\n\n            const analysis = {\n                language: language,\n                normalizedLanguage: normalizedLanguage,\n                basicStats: this.calculateBasicStats(content),\n                functions: this.extractFunctions(content, normalizedLanguage),\n                classes: this.extractClasses(content, normalizedLanguage),\n                variables: this.extractVariables(content, normalizedLanguage),\n                dependencies: this.extractDependencies(content, normalizedLanguage),\n                comments: this.extractComments(content, normalizedLanguage),\n                codeStructure: this.analyzeCodeStructure(content, normalizedLanguage)\n            };\n\n            // 计算衍生指标\n            analysis.metrics = this.calculateMetrics(analysis);\n\n            return {\n                success: true,\n                analysis: analysis,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: `基础分析失败: ${error.message}`,\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n\n    /**\n       * 计算基础统计信息\n       * @param {string} content - 文件内容\n       * @returns {Object} 基础统计\n       */\n    calculateBasicStats(content) {\n        const lines = content.split('\\n');\n        const nonEmptyLines = lines.filter(line => line.trim().length > 0);\n        const codeLines = lines.filter(line => {\n            const trimmed = line.trim();\n            return trimmed.length > 0 && !this.isCommentLine(trimmed);\n        });\n\n        return {\n            totalLines: lines.length,\n            nonEmptyLines: nonEmptyLines.length,\n            codeLines: codeLines.length,\n            emptyLines: lines.length - nonEmptyLines.length,\n            characters: content.length,\n            charactersNoSpaces: content.replace(/\\s/g, '').length,\n            words: content.split(/\\s+/).filter(word => word.length > 0).length,\n            averageLineLength: lines.length > 0 ? (content.length / lines.length).toFixed(2) : 0\n        };\n    }\n\n    /**\n       * 提取函数信息\n       * @param {string} content - 文件内容\n       * @param {string} language - 编程语言\n       * @returns {Array} 函数列表\n       */\n    extractFunctions(content, language) {\n        const functions = [];\n        const patterns = this.patterns[language]?.functions || this.patterns.javascript.functions;\n\n        patterns.forEach(pattern => {\n            let match;\n            const regex = new RegExp(pattern.source, pattern.flags);\n\n            while ((match = regex.exec(content)) !== null) {\n                const functionName = match[1] || match[2] || 'anonymous';\n                const startIndex = match.index;\n                const lineNumber = this.getLineNumber(content, startIndex);\n\n                // 尝试找到函数体的结束位置\n                const functionBody = this.extractFunctionBody(content, startIndex);\n\n                functions.push({\n                    name: functionName,\n                    line: lineNumber,\n                    startIndex: startIndex,\n                    bodyLength: functionBody.length,\n                    bodyLines: functionBody.split('\\n').length,\n                    parameters: this.extractFunctionParameters(match[0]),\n                    isAsync: match[0].includes('async'),\n                    type: this.determineFunctionType(match[0])\n                });\n            }\n        });\n\n        return this.deduplicateFunctions(functions);\n    }\n\n    /**\n       * 提取类信息\n       * @param {string} content - 文件内容\n       * @param {string} language - 编程语言\n       * @returns {Array} 类列表\n       */\n    extractClasses(content, language) {\n        const classes = [];\n        const patterns = this.patterns[language]?.classes || this.patterns.javascript.classes;\n\n        patterns.forEach(pattern => {\n            let match;\n            const regex = new RegExp(pattern.source, pattern.flags);\n\n            while ((match = regex.exec(content)) !== null) {\n                const className = match[1];\n                const startIndex = match.index;\n                const lineNumber = this.getLineNumber(content, startIndex);\n\n                // 提取类体\n                const classBody = this.extractClassBody(content, startIndex);\n                const methods = this.extractClassMethods(classBody, language);\n\n                classes.push({\n                    name: className,\n                    line: lineNumber,\n                    startIndex: startIndex,\n                    bodyLength: classBody.length,\n                    bodyLines: classBody.split('\\n').length,\n                    methods: methods,\n                    methodCount: methods.length,\n                    inheritance: this.extractInheritance(match[0]),\n                    isAbstract: match[0].includes('abstract')\n                });\n            }\n        });\n\n        return classes;\n    }\n\n    /**\n       * 提取变量信息\n       * @param {string} content - 文件内容\n       * @param {string} language - 编程语言\n       * @returns {Array} 变量列表\n       */\n    extractVariables(content, language) {\n        const variables = [];\n        const patterns = this.patterns[language]?.variables || this.patterns.javascript.variables;\n\n        patterns.forEach(pattern => {\n            let match;\n            const regex = new RegExp(pattern.source, pattern.flags);\n\n            while ((match = regex.exec(content)) !== null) {\n                const variableName = match[1];\n                const startIndex = match.index;\n                const lineNumber = this.getLineNumber(content, startIndex);\n\n                variables.push({\n                    name: variableName,\n                    line: lineNumber,\n                    startIndex: startIndex,\n                    declarationType: this.extractDeclarationType(match[0]),\n                    scope: this.determineVariableScope(content, startIndex)\n                });\n            }\n        });\n\n        return this.deduplicateVariables(variables);\n    }\n\n    /**\n       * 提取依赖信息\n       * @param {string} content - 文件内容\n       * @param {string} language - 编程语言\n       * @returns {Array} 依赖列表\n       */\n    extractDependencies(content, language) {\n        const dependencies = [];\n        const patterns = this.patterns[language]?.imports || this.patterns.javascript.imports;\n\n        patterns.forEach(pattern => {\n            let match;\n            const regex = new RegExp(pattern.source, pattern.flags);\n\n            while ((match = regex.exec(content)) !== null) {\n                const dependencyPath = match[1];\n                const lineNumber = this.getLineNumber(content, match.index);\n\n                dependencies.push({\n                    path: dependencyPath,\n                    line: lineNumber,\n                    type: this.determineDependencyType(dependencyPath),\n                    isExternal: this.isExternalDependency(dependencyPath),\n                    importStatement: match[0].trim()\n                });\n            }\n        });\n\n        return dependencies;\n    }\n\n    /**\n       * 提取注释信息\n       * @param {string} content - 文件内容\n       * @param {string} language - 编程语言\n       * @returns {Object} 注释统计\n       */\n    extractComments(content, language) {\n        const comments = {\n            singleLine: [],\n            multiLine: [],\n            totalLines: 0,\n            commentRatio: 0\n        };\n\n        const lines = content.split('\\n');\n        let inMultiLineComment = false;\n        let multiLineStart = -1;\n\n        lines.forEach((line, index) => {\n            const trimmed = line.trim();\n\n            // 检查多行注释\n            if (language === 'javascript' || language === 'java') {\n                if (trimmed.includes('/*') && !inMultiLineComment) {\n                    inMultiLineComment = true;\n                    multiLineStart = index + 1;\n                }\n                if (trimmed.includes('*/') && inMultiLineComment) {\n                    inMultiLineComment = false;\n                    comments.multiLine.push({\n                        startLine: multiLineStart,\n                        endLine: index + 1,\n                        lines: index + 1 - multiLineStart + 1\n                    });\n                    comments.totalLines += index + 1 - multiLineStart + 1;\n                }\n            }\n\n            // 检查单行注释\n            if (!inMultiLineComment) {\n                let isSingleLineComment = false;\n\n                if ((language === 'javascript' || language === 'java') && trimmed.startsWith('//')) {\n                    isSingleLineComment = true;\n                } else if (language === 'python' && trimmed.startsWith('#')) {\n                    isSingleLineComment = true;\n                }\n\n                if (isSingleLineComment) {\n                    comments.singleLine.push({\n                        line: index + 1,\n                        content: trimmed\n                    });\n                    comments.totalLines++;\n                }\n            }\n        });\n\n        // 计算注释比例\n        const totalCodeLines = lines.filter(line => line.trim().length > 0).length;\n        comments.commentRatio = totalCodeLines > 0 ? (comments.totalLines / totalCodeLines * 100).toFixed(2) : 0;\n\n        return comments;\n    }\n\n    /**\n       * 分析代码结构\n       * @param {string} content - 文件内容\n       * @param {string} language - 编程语言\n       * @returns {Object} 代码结构信息\n       */\n    analyzeCodeStructure(content, language) {\n        const structure = {\n            maxNestingLevel: 0,\n            averageNestingLevel: 0,\n            blockCount: 0,\n            conditionalBlocks: 0,\n            loopBlocks: 0,\n            tryBlocks: 0\n        };\n\n        const lines = content.split('\\n');\n        let currentNesting = 0;\n        let totalNesting = 0;\n        let lineCount = 0;\n\n        lines.forEach(line => {\n            const trimmed = line.trim();\n            if (trimmed.length === 0) { return; }\n\n            lineCount++;\n\n            // 计算嵌套级别\n            const openBraces = (trimmed.match(/{/g) || []).length;\n            const closeBraces = (trimmed.match(/}/g) || []).length;\n\n            currentNesting += openBraces - closeBraces;\n            totalNesting += currentNesting;\n\n            if (currentNesting > structure.maxNestingLevel) {\n                structure.maxNestingLevel = currentNesting;\n            }\n\n            // 统计不同类型的代码块\n            if (openBraces > 0) {\n                structure.blockCount++;\n\n                if (/\\b(if|else|switch|case)\\b/.test(trimmed)) {\n                    structure.conditionalBlocks++;\n                }\n                if (/\\b(for|while|do)\\b/.test(trimmed)) {\n                    structure.loopBlocks++;\n                }\n                if (/\\b(try|catch|finally)\\b/.test(trimmed)) {\n                    structure.tryBlocks++;\n                }\n            }\n        });\n\n        structure.averageNestingLevel = lineCount > 0 ? (totalNesting / lineCount).toFixed(2) : 0;\n\n        return structure;\n    }\n\n    /**\n       * 计算衍生指标\n       * @param {Object} analysis - 分析结果\n       * @returns {Object} 指标\n       */\n    calculateMetrics(analysis) {\n        const stats = analysis.basicStats;\n        const functions = analysis.functions;\n        const classes = analysis.classes;\n\n        return {\n            codeToCommentRatio: parseFloat(analysis.comments.commentRatio),\n            averageFunctionLength: functions.length > 0 ?\n                (functions.reduce((sum, fn) => sum + fn.bodyLines, 0) / functions.length).toFixed(2) : 0,\n            averageClassSize: classes.length > 0 ?\n                (classes.reduce((sum, cls) => sum + cls.bodyLines, 0) / classes.length).toFixed(2) : 0,\n            functionDensity: stats.codeLines > 0 ?\n                (functions.length / stats.codeLines * 100).toFixed(2) : 0,\n            classDensity: stats.codeLines > 0 ?\n                (classes.length / stats.codeLines * 100).toFixed(2) : 0,\n            codeEfficiency: stats.totalLines > 0 ?\n                (stats.codeLines / stats.totalLines * 100).toFixed(2) : 0\n        };\n    }\n\n    // 辅助方法\n    normalizeLanguage(language) {\n        const normalized = language.toLowerCase();\n        if (['js', 'jsx', 'ts', 'tsx'].includes(normalized)) { return 'javascript'; }\n        if (['py'].includes(normalized)) { return 'python'; }\n        if (['java'].includes(normalized)) { return 'java'; }\n        return 'javascript'; // 默认\n    }\n\n    getLineNumber(content, index) {\n        return content.substring(0, index).split('\\n').length;\n    }\n\n    isCommentLine(line) {\n        return line.startsWith('//') || line.startsWith('#') ||\n            line.startsWith('/*') || line.startsWith('*') || line.startsWith('*/');\n    }\n\n    extractFunctionBody(content, startIndex) {\n        // 简化的函数体提取逻辑\n        let braceCount = 0;\n        let i = startIndex;\n        let foundFirstBrace = false;\n\n        while (i < content.length) {\n            if (content[i] === '{') {\n                braceCount++;\n                foundFirstBrace = true;\n            } else if (content[i] === '}') {\n                braceCount--;\n                if (foundFirstBrace && braceCount === 0) {\n                    return content.substring(startIndex, i + 1);\n                }\n            }\n            i++;\n        }\n\n        return content.substring(startIndex, Math.min(startIndex + 500, content.length));\n    }\n\n    extractClassBody(content, startIndex) {\n        return this.extractFunctionBody(content, startIndex); // 使用相同逻辑\n    }\n\n    extractClassMethods(classBody, language) {\n        return this.extractFunctions(classBody, language);\n    }\n\n    extractFunctionParameters(functionDeclaration) {\n        const match = functionDeclaration.match(/\\(([^)]*)\\)/);\n        if (!match) { return []; }\n\n        return match[1].split(',').map(param => param.trim()).filter(param => param.length > 0);\n    }\n\n    determineFunctionType(declaration) {\n        if (declaration.includes('async')) { return 'async'; }\n        if (declaration.includes('=>')) { return 'arrow'; }\n        if (declaration.includes('function')) { return 'function'; }\n        return 'method';\n    }\n\n    extractInheritance(classDeclaration) {\n        const extendsMatch = classDeclaration.match(/extends\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)/);\n        const implementsMatch = classDeclaration.match(/implements\\s+([a-zA-Z_$][a-zA-Z0-9_$,\\s]*)/);\n\n        return {\n            extends: extendsMatch ? extendsMatch[1] : null,\n            implements: implementsMatch ? implementsMatch[1].split(',').map(i => i.trim()) : []\n        };\n    }\n\n    extractDeclarationType(declaration) {\n        if (declaration.includes('const')) { return 'const'; }\n        if (declaration.includes('let')) { return 'let'; }\n        if (declaration.includes('var')) { return 'var'; }\n        return 'unknown';\n    }\n\n    determineVariableScope(content, index) {\n        // 简化的作用域判断\n        const beforeContent = content.substring(0, index);\n        const braceCount = (beforeContent.match(/{/g) || []).length - (beforeContent.match(/}/g) || []).length;\n        return braceCount > 0 ? 'local' : 'global';\n    }\n\n    determineDependencyType(path) {\n        if (path.startsWith('./') || path.startsWith('../')) { return 'relative'; }\n        if (path.startsWith('/')) { return 'absolute'; }\n        return 'module';\n    }\n\n    isExternalDependency(path) {\n        return !path.startsWith('./') && !path.startsWith('../') && !path.startsWith('/');\n    }\n\n    deduplicateFunctions(functions) {\n        const seen = new Set();\n        return functions.filter(fn => {\n            const key = `${fn.name}:${fn.line}`;\n            if (seen.has(key)) { return false; }\n            seen.add(key);\n            return true;\n        });\n    }\n\n    deduplicateVariables(variables) {\n        const seen = new Set();\n        return variables.filter(variable => {\n            const key = `${variable.name}:${variable.line}`;\n            if (seen.has(key)) { return false; }\n            seen.add(key);\n            return true;\n        });\n    }\n}\n\n// 导出类\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = BasicAnalyzer;\n} else if (typeof window !== 'undefined') {\n    window.BasicAnalyzer = BasicAnalyzer;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\analyzers\\ComplexityAnalyzer.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":167,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":167,"endColumn":42},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: -5.","line":214,"column":35,"nodeType":"UnaryExpression","messageId":"noMagic","endLine":214,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 18.","line":239,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":239,"endColumn":29},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 171.","line":275,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":275,"endColumn":17},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 5.2.","line":275,"column":20,"nodeType":"Literal","messageId":"noMagic","endLine":275,"endColumn":23},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.23.","line":275,"column":54,"nodeType":"Literal","messageId":"noMagic","endLine":275,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 16.2.","line":275,"column":74,"nodeType":"Literal","messageId":"noMagic","endLine":275,"endColumn":78},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.4.","line":311,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":311,"endColumn":33},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":453,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":453,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":466,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":466,"endColumn":37},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\[.","line":469,"column":11,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":469,"endColumn":12,"suggestions":[{"messageId":"removeEscape","fix":{"range":[13771,13772],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[13771,13771],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":487,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":487,"endColumn":36},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.4.","line":530,"column":117,"nodeType":"Literal","messageId":"noMagic","endLine":530,"endColumn":120},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0.4.","line":562,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":562,"endColumn":21}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 复杂度分析器 - 负责各种复杂度计算\n * 符合单一职责原则：专门处理复杂度分析功能\n */\nclass ComplexityAnalyzer {\n  constructor() {\n    this.complexityThresholds = {\n      cyclomatic: {\n        low: 10,\n        medium: 20,\n        high: 30\n      },\n      cognitive: {\n        low: 15,\n        medium: 25,\n        high: 40\n      },\n      nesting: {\n        low: 3,\n        medium: 5,\n        high: 7\n      }\n    };\n\n    this.complexityWeights = {\n      cyclomatic: 0.4,\n      cognitive: 0.4,\n      nesting: 0.2\n    };\n  }\n\n  /**\n     * 分析代码复杂度\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @returns {Object} 复杂度分析结果\n     */\n  analyzeComplexity(content, language = 'javascript') {\n    try {\n      const analysis = {\n        language: language,\n        cyclomatic: this.calculateCyclomaticComplexity(content, language),\n        cognitive: this.calculateCognitiveComplexity(content, language),\n        nesting: this.calculateNestingDepth(content, language),\n        halstead: this.calculateHalsteadMetrics(content, language),\n        maintainability: this.calculateMaintainabilityIndex(content, language)\n      };\n\n      // 计算综合复杂度分数\n      analysis.overall = this.calculateOverallComplexity(analysis);\n\n      // 生成复杂度建议\n      analysis.suggestions = this.generateComplexitySuggestions(analysis);\n\n      // 计算复杂度趋势\n      analysis.trends = this.analyzeComplexityTrends(content, language);\n\n      return {\n        success: true,\n        analysis: analysis,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `复杂度分析失败: ${error.message}`,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  /**\n     * 计算圈复杂度（Cyclomatic Complexity）\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @returns {Object} 圈复杂度信息\n     */\n  calculateCyclomaticComplexity(content, language) {\n    const patterns = this.getCyclomaticPatterns(language);\n    let complexity = 1; // 基础复杂度为1\n    const details = [];\n\n    patterns.forEach(pattern => {\n      const matches = content.match(pattern.regex) || [];\n      complexity += matches.length * pattern.weight;\n\n      if (matches.length > 0) {\n        details.push({\n          type: pattern.type,\n          count: matches.length,\n          weight: pattern.weight,\n          contribution: matches.length * pattern.weight\n        });\n      }\n    });\n\n    return {\n      value: complexity,\n      level: this.getComplexityLevel(complexity, 'cyclomatic'),\n      details: details,\n      description: this.getCyclomaticDescription(complexity)\n    };\n  }\n\n  /**\n     * 计算认知复杂度（Cognitive Complexity）\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @returns {Object} 认知复杂度信息\n     */\n  calculateCognitiveComplexity(content, language) {\n    const lines = content.split('\\n');\n    let complexity = 0;\n    let nestingLevel = 0;\n    const details = [];\n\n    lines.forEach((line, index) => {\n      const trimmed = line.trim();\n      if (trimmed.length === 0) {return;}\n\n      // 计算嵌套级别变化\n      const openBraces = (trimmed.match(/{/g) || []).length;\n      const closeBraces = (trimmed.match(/}/g) || []).length;\n\n      // 检查认知复杂度增加的模式\n      const cognitivePatterns = this.getCognitivePatterns(language);\n\n      cognitivePatterns.forEach(pattern => {\n        if (pattern.regex.test(trimmed)) {\n          let increment = pattern.baseWeight;\n\n          // 嵌套增加认知负担\n          if (pattern.affectedByNesting && nestingLevel > 0) {\n            increment += nestingLevel * pattern.nestingMultiplier;\n          }\n\n          complexity += increment;\n          details.push({\n            line: index + 1,\n            type: pattern.type,\n            nestingLevel: nestingLevel,\n            increment: increment,\n            code: trimmed.substring(0, 50) + (trimmed.length > 50 ? '...' : '')\n          });\n        }\n      });\n\n      // 更新嵌套级别\n      nestingLevel += openBraces - closeBraces;\n      nestingLevel = Math.max(0, nestingLevel);\n    });\n\n    return {\n      value: complexity,\n      level: this.getComplexityLevel(complexity, 'cognitive'),\n      details: details,\n      description: this.getCognitiveDescription(complexity)\n    };\n  }\n\n  /**\n     * 计算嵌套深度\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @returns {Object} 嵌套深度信息\n     */\n  calculateNestingDepth(content, language) {\n    const lines = content.split('\\n');\n    let currentDepth = 0;\n    let maxDepth = 0;\n    let totalDepth = 0;\n    let lineCount = 0;\n    const depthDetails = [];\n\n    lines.forEach((line, index) => {\n      const trimmed = line.trim();\n      if (trimmed.length === 0) {return;}\n\n      lineCount++;\n\n      // 计算当前行的嵌套深度变化\n      const openBraces = (trimmed.match(/{/g) || []).length;\n      const closeBraces = (trimmed.match(/}/g) || []).length;\n\n      // 先处理闭合括号\n      currentDepth -= closeBraces;\n      currentDepth = Math.max(0, currentDepth);\n\n      // 记录当前深度\n      if (currentDepth > 0) {\n        totalDepth += currentDepth;\n\n        if (currentDepth > maxDepth) {\n          maxDepth = currentDepth;\n          depthDetails.push({\n            line: index + 1,\n            depth: currentDepth,\n            code: trimmed.substring(0, 50) + (trimmed.length > 50 ? '...' : ''),\n            isMaxDepth: true\n          });\n        }\n      }\n\n      // 再处理开放括号\n      currentDepth += openBraces;\n    });\n\n    const averageDepth = lineCount > 0 ? (totalDepth / lineCount).toFixed(2) : 0;\n\n    return {\n      maximum: maxDepth,\n      average: parseFloat(averageDepth),\n      level: this.getComplexityLevel(maxDepth, 'nesting'),\n      details: depthDetails.slice(-5), // 只保留最后5个最大深度点\n      description: this.getNestingDescription(maxDepth)\n    };\n  }\n\n  /**\n     * 计算Halstead复杂度指标\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @returns {Object} Halstead指标\n     */\n  calculateHalsteadMetrics(content, language) {\n    const operators = this.extractOperators(content, language);\n    const operands = this.extractOperands(content, language);\n\n    const n1 = operators.unique.length; // 不同操作符数量\n    const n2 = operands.unique.length;  // 不同操作数数量\n    const N1 = operators.total;         // 操作符总数\n    const N2 = operands.total;          // 操作数总数\n\n    const vocabulary = n1 + n2;         // 词汇表大小\n    const length = N1 + N2;             // 程序长度\n    const volume = length * Math.log2(vocabulary || 1); // 程序体积\n    const difficulty = (n1 / 2) * (N2 / (n2 || 1)); // 程序难度\n    const effort = difficulty * volume;  // 编程工作量\n    const time = effort / 18;           // 编程时间（秒）\n    const bugs = volume / 3000;         // 预期错误数\n\n    return {\n      vocabulary: vocabulary,\n      length: length,\n      volume: Math.round(volume),\n      difficulty: Math.round(difficulty * 100) / 100,\n      effort: Math.round(effort),\n      time: Math.round(time * 100) / 100,\n      bugs: Math.round(bugs * 100) / 100,\n      operators: {\n        unique: n1,\n        total: N1,\n        list: operators.unique.slice(0, 10) // 只显示前10个\n      },\n      operands: {\n        unique: n2,\n        total: N2,\n        list: operands.unique.slice(0, 10) // 只显示前10个\n      }\n    };\n  }\n\n  /**\n     * 计算可维护性指数\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @returns {Object} 可维护性指数\n     */\n  calculateMaintainabilityIndex(content, language) {\n    const lines = content.split('\\n').filter(line => line.trim().length > 0).length;\n    const cyclomatic = this.calculateCyclomaticComplexity(content, language).value;\n    const halstead = this.calculateHalsteadMetrics(content, language);\n\n    // 使用修改后的可维护性指数公式\n    let mi = 171 - 5.2 * Math.log(halstead.volume) - 0.23 * cyclomatic - 16.2 * Math.log(lines);\n    mi = Math.max(0, Math.min(100, mi)); // 限制在0-100范围内\n\n    let level = 'high';\n    if (mi < 20) {level = 'low';}\n    else if (mi < 50) {level = 'medium';}\n\n    return {\n      value: Math.round(mi * 100) / 100,\n      level: level,\n      factors: {\n        volume: halstead.volume,\n        cyclomatic: cyclomatic,\n        lines: lines\n      },\n      description: this.getMaintainabilityDescription(mi)\n    };\n  }\n\n  /**\n     * 计算综合复杂度分数\n     * @param {Object} analysis - 复杂度分析结果\n     * @returns {Object} 综合复杂度\n     */\n  calculateOverallComplexity(analysis) {\n    const cyclomaticScore = this.normalizeComplexityScore(analysis.cyclomatic.value, 'cyclomatic');\n    const cognitiveScore = this.normalizeComplexityScore(analysis.cognitive.value, 'cognitive');\n    const nestingScore = this.normalizeComplexityScore(analysis.nesting.maximum, 'nesting');\n\n    const weightedScore =\n            cyclomaticScore * this.complexityWeights.cyclomatic +\n            cognitiveScore * this.complexityWeights.cognitive +\n            nestingScore * this.complexityWeights.nesting;\n\n    let level = 'low';\n    if (weightedScore > 0.7) {level = 'high';}\n    else if (weightedScore > 0.4) {level = 'medium';}\n\n    return {\n      score: Math.round(weightedScore * 100) / 100,\n      level: level,\n      components: {\n        cyclomatic: cyclomaticScore,\n        cognitive: cognitiveScore,\n        nesting: nestingScore\n      },\n      description: this.getOverallComplexityDescription(weightedScore)\n    };\n  }\n\n  /**\n     * 生成复杂度改进建议\n     * @param {Object} analysis - 复杂度分析结果\n     * @returns {Array} 建议列表\n     */\n  generateComplexitySuggestions(analysis) {\n    const suggestions = [];\n\n    // 圈复杂度建议\n    if (analysis.cyclomatic.level === 'high') {\n      suggestions.push({\n        type: 'cyclomatic',\n        priority: 'high',\n        title: '降低圈复杂度',\n        description: '考虑拆分函数，减少条件分支和循环嵌套',\n        techniques: ['提取方法', '使用策略模式', '简化条件表达式']\n      });\n    }\n\n    // 认知复杂度建议\n    if (analysis.cognitive.level === 'high') {\n      suggestions.push({\n        type: 'cognitive',\n        priority: 'high',\n        title: '降低认知复杂度',\n        description: '减少嵌套层次，简化逻辑流程',\n        techniques: ['早期返回', '提取子函数', '使用卫语句']\n      });\n    }\n\n    // 嵌套深度建议\n    if (analysis.nesting.level === 'high') {\n      suggestions.push({\n        type: 'nesting',\n        priority: 'medium',\n        title: '减少嵌套深度',\n        description: '避免过深的嵌套结构',\n        techniques: ['合并条件', '提取函数', '使用多态']\n      });\n    }\n\n    // 可维护性建议\n    if (analysis.maintainability.level === 'low') {\n      suggestions.push({\n        type: 'maintainability',\n        priority: 'high',\n        title: '提高可维护性',\n        description: '代码可维护性较低，需要重构',\n        techniques: ['重构大函数', '提高代码可读性', '增加注释']\n      });\n    }\n\n    return suggestions;\n  }\n\n  /**\n     * 分析复杂度趋势\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @returns {Object} 趋势分析\n     */\n  analyzeComplexityTrends(content, language) {\n    const functions = this.extractFunctionComplexities(content, language);\n\n    if (functions.length === 0) {\n      return {\n        functionCount: 0,\n        averageComplexity: 0,\n        complexityDistribution: {},\n        hotspots: []\n      };\n    }\n\n    const complexities = functions.map(fn => fn.complexity);\n    const averageComplexity = complexities.reduce((sum, c) => sum + c, 0) / complexities.length;\n\n    // 复杂度分布\n    const distribution = {\n      low: functions.filter(fn => fn.complexity <= 10).length,\n      medium: functions.filter(fn => fn.complexity > 10 && fn.complexity <= 20).length,\n      high: functions.filter(fn => fn.complexity > 20).length\n    };\n\n    // 复杂度热点（最复杂的函数）\n    const hotspots = functions\n      .sort((a, b) => b.complexity - a.complexity)\n      .slice(0, 5)\n      .map(fn => ({\n        name: fn.name,\n        complexity: fn.complexity,\n        line: fn.line,\n        suggestion: this.getFunctionComplexitySuggestion(fn.complexity)\n      }));\n\n    return {\n      functionCount: functions.length,\n      averageComplexity: Math.round(averageComplexity * 100) / 100,\n      complexityDistribution: distribution,\n      hotspots: hotspots\n    };\n  }\n\n  // 辅助方法\n  getCyclomaticPatterns(language) {\n    const basePatterns = [\n      { type: 'if', regex: /\\bif\\b/g, weight: 1 },\n      { type: 'else', regex: /\\belse\\b/g, weight: 1 },\n      { type: 'while', regex: /\\bwhile\\b/g, weight: 1 },\n      { type: 'for', regex: /\\bfor\\b/g, weight: 1 },\n      { type: 'case', regex: /\\bcase\\b/g, weight: 1 },\n      { type: 'catch', regex: /\\bcatch\\b/g, weight: 1 },\n      { type: 'and', regex: /&&/g, weight: 1 },\n      { type: 'or', regex: /\\|\\|/g, weight: 1 },\n      { type: 'ternary', regex: /\\?.*:/g, weight: 1 }\n    ];\n\n    if (language === 'python') {\n      basePatterns.push(\n        { type: 'elif', regex: /\\belif\\b/g, weight: 1 },\n        { type: 'except', regex: /\\bexcept\\b/g, weight: 1 },\n        { type: 'and', regex: /\\band\\b/g, weight: 1 },\n        { type: 'or', regex: /\\bor\\b/g, weight: 1 }\n      );\n    }\n\n    return basePatterns;\n  }\n\n  getCognitivePatterns(language) {\n    return [\n      { type: 'if', regex: /\\bif\\b/, baseWeight: 1, affectedByNesting: true, nestingMultiplier: 1 },\n      { type: 'else', regex: /\\belse\\b/, baseWeight: 1, affectedByNesting: false, nestingMultiplier: 0 },\n      { type: 'switch', regex: /\\bswitch\\b/, baseWeight: 1, affectedByNesting: true, nestingMultiplier: 1 },\n      { type: 'for', regex: /\\bfor\\b/, baseWeight: 1, affectedByNesting: true, nestingMultiplier: 1 },\n      { type: 'while', regex: /\\bwhile\\b/, baseWeight: 1, affectedByNesting: true, nestingMultiplier: 1 },\n      { type: 'catch', regex: /\\bcatch\\b/, baseWeight: 1, affectedByNesting: true, nestingMultiplier: 1 },\n      { type: 'break', regex: /\\bbreak\\b/, baseWeight: 1, affectedByNesting: false, nestingMultiplier: 0 },\n      { type: 'continue', regex: /\\bcontinue\\b/, baseWeight: 1, affectedByNesting: false, nestingMultiplier: 0 }\n    ];\n  }\n\n  extractOperators(content, language) {\n    const operatorPatterns = [\n      /[+\\-*/%]/g, /[=!<>]=?/g, /&&|\\|\\|/g, /[&|^~]/g,\n      /[{}\\[\\]()]/g, /[;,.:]/g, /\\?/g\n    ];\n\n    const operators = new Set();\n    let totalCount = 0;\n\n    operatorPatterns.forEach(pattern => {\n      const matches = content.match(pattern) || [];\n      matches.forEach(match => operators.add(match));\n      totalCount += matches.length;\n    });\n\n    return {\n      unique: Array.from(operators),\n      total: totalCount\n    };\n  }\n\n  extractOperands(content, language) {\n    // 简化的操作数提取\n    const operandPattern = /\\b[a-zA-Z_$][a-zA-Z0-9_$]*\\b|\\b\\d+(?:\\.\\d+)?\\b|[\"'][^\"']*[\"']/g;\n    const matches = content.match(operandPattern) || [];\n    const operands = new Set(matches);\n\n    return {\n      unique: Array.from(operands),\n      total: matches.length\n    };\n  }\n\n  extractFunctionComplexities(content, language) {\n    // 简化的函数复杂度提取\n    const functionPattern = /function\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\([^)]*\\)\\s*{([^}]*)}/g;\n    const functions = [];\n    let match;\n\n    while ((match = functionPattern.exec(content)) !== null) {\n      const functionBody = match[2];\n      const complexity = this.calculateCyclomaticComplexity(functionBody, language).value;\n      const lineNumber = content.substring(0, match.index).split('\\n').length;\n\n      functions.push({\n        name: match[1],\n        complexity: complexity,\n        line: lineNumber\n      });\n    }\n\n    return functions;\n  }\n\n  getComplexityLevel(value, type) {\n    const thresholds = this.complexityThresholds[type];\n    if (value <= thresholds.low) {return 'low';}\n    if (value <= thresholds.medium) {return 'medium';}\n    return 'high';\n  }\n\n  normalizeComplexityScore(value, type) {\n    const thresholds = this.complexityThresholds[type];\n    if (value <= thresholds.low) {return value / thresholds.low * 0.3;}\n    if (value <= thresholds.medium) {return 0.3 + (value - thresholds.low) / (thresholds.medium - thresholds.low) * 0.4;}\n    return 0.7 + Math.min(0.3, (value - thresholds.medium) / thresholds.medium * 0.3);\n  }\n\n  getCyclomaticDescription(complexity) {\n    if (complexity <= 10) {return '代码结构简单，易于理解和维护';}\n    if (complexity <= 20) {return '代码复杂度适中，需要注意维护';}\n    if (complexity <= 30) {return '代码复杂度较高，建议重构';}\n    return '代码复杂度过高，强烈建议重构';\n  }\n\n  getCognitiveDescription(complexity) {\n    if (complexity <= 15) {return '认知负担较低，代码易于理解';}\n    if (complexity <= 25) {return '认知负担适中，需要一定理解成本';}\n    if (complexity <= 40) {return '认知负担较高，理解困难';}\n    return '认知负担过高，极难理解';\n  }\n\n  getNestingDescription(depth) {\n    if (depth <= 3) {return '嵌套层次合理';}\n    if (depth <= 5) {return '嵌套层次较深，建议优化';}\n    if (depth <= 7) {return '嵌套层次过深，影响可读性';}\n    return '嵌套层次极深，严重影响代码质量';\n  }\n\n  getMaintainabilityDescription(mi) {\n    if (mi >= 50) {return '可维护性良好';}\n    if (mi >= 20) {return '可维护性一般，需要改进';}\n    return '可维护性较差，需要重构';\n  }\n\n  getOverallComplexityDescription(score) {\n    if (score <= 0.4) {return '整体复杂度较低，代码质量良好';}\n    if (score <= 0.7) {return '整体复杂度适中，有改进空间';}\n    return '整体复杂度较高，建议重构';\n  }\n\n  getFunctionComplexitySuggestion(complexity) {\n    if (complexity <= 10) {return '复杂度合理';}\n    if (complexity <= 20) {return '考虑拆分函数';}\n    return '强烈建议重构';\n  }\n}\n\n// 导出类\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = ComplexityAnalyzer;\n} else if (typeof window !== 'undefined') {\n  window.ComplexityAnalyzer = ComplexityAnalyzer;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\analyzers\\FileParser.js","messages":[{"ruleId":"no-undefined","severity":2,"message":"Unexpected use of undefined.","line":75,"column":41,"nodeType":"Identifier","messageId":"unexpectedUndefined","endLine":75,"endColumn":50},{"ruleId":"no-control-regex","severity":2,"message":"Unexpected control character(s) in regular expression: \\x00, \\x08, \\x0b, \\x0c, \\x0e, \\x1f.","line":183,"column":47,"nodeType":"Literal","messageId":"unexpected","endLine":183,"endColumn":82},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 0xFEFF.","line":241,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":241,"endColumn":43}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 文件解析器 - 负责文件读取、验证、预处理\n * 符合单一职责原则：专门处理文件解析相关功能\n */\nclass FileParser {\n  constructor() {\n    this.supportedExtensions = new Set([\n      'js', 'jsx', 'ts', 'tsx', 'vue', 'py', 'java', 'cpp', 'c', 'h',\n      'cs', 'php', 'rb', 'go', 'rs', 'swift', 'kt', 'scala', 'html',\n      'css', 'scss', 'less', 'json', 'xml', 'yaml', 'yml'\n    ]);\n    this.maxFileSize = 10 * 1024 * 1024; // 10MB\n  }\n\n  /**\n     * 解析文件\n     * @param {string} filePath - 文件路径\n     * @param {string} content - 文件内容\n     * @returns {Object} 解析结果\n     */\n  parseFile(filePath, content) {\n    try {\n      // 验证文件\n      const validation = this.validateFile(filePath, content);\n      if (!validation.isValid) {\n        return {\n          success: false,\n          error: validation.error,\n          filePath: filePath\n        };\n      }\n\n      // 获取文件信息\n      const fileInfo = this.getFileInfo(filePath, content);\n\n      // 预处理内容\n      const processedContent = this.preprocessContent(content, fileInfo.extension);\n\n      return {\n        success: true,\n        filePath: filePath,\n        content: processedContent,\n        originalContent: content,\n        fileInfo: fileInfo,\n        metadata: {\n          parseTime: new Date().toISOString(),\n          contentHash: this.generateContentHash(content)\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `解析文件时发生错误: ${error.message}`,\n        filePath: filePath\n      };\n    }\n  }\n\n  /**\n     * 验证文件\n     * @param {string} filePath - 文件路径\n     * @param {string} content - 文件内容\n     * @returns {Object} 验证结果\n     */\n  validateFile(filePath, content) {\n    // 检查文件路径\n    if (!filePath || typeof filePath !== 'string') {\n      return {\n        isValid: false,\n        error: '文件路径无效'\n      };\n    }\n\n    // 检查文件内容\n    if (content === null || content === undefined) {\n      return {\n        isValid: false,\n        error: '文件内容为空'\n      };\n    }\n\n    // 检查文件大小\n    const sizeCheck = this.checkFileSize(content);\n    if (!sizeCheck.isValid) {\n      return sizeCheck;\n    }\n\n    // 检查文件扩展名\n    const extension = this.getFileExtension(filePath);\n    const extensionCheck = this.checkSupportedExtension(extension);\n    if (!extensionCheck.isValid) {\n      return extensionCheck;\n    }\n\n    // 检查文件编码（基本检查）\n    const encodingCheck = this.checkFileEncoding(content);\n    if (!encodingCheck.isValid) {\n      return encodingCheck;\n    }\n\n    return {\n      isValid: true,\n      extension: extension\n    };\n  }\n\n  /**\n     * 获取文件扩展名\n     * @param {string} filePath - 文件路径\n     * @returns {string} 文件扩展名\n     */\n  getFileExtension(filePath) {\n    if (!filePath || typeof filePath !== 'string') {\n      return '';\n    }\n\n    const lastDot = filePath.lastIndexOf('.');\n    if (lastDot === -1 || lastDot === filePath.length - 1) {\n      return '';\n    }\n\n    return filePath.substring(lastDot + 1).toLowerCase();\n  }\n\n  /**\n     * 检查文件大小\n     * @param {string} content - 文件内容\n     * @returns {Object} 检查结果\n     */\n  checkFileSize(content) {\n    const size = new Blob([content]).size;\n\n    if (size > this.maxFileSize) {\n      return {\n        isValid: false,\n        error: `文件过大 (${this.formatFileSize(size)})，最大支持 ${this.formatFileSize(this.maxFileSize)}`\n      };\n    }\n\n    return {\n      isValid: true,\n      size: size\n    };\n  }\n\n  /**\n     * 检查支持的扩展名\n     * @param {string} extension - 文件扩展名\n     * @returns {Object} 检查结果\n     */\n  checkSupportedExtension(extension) {\n    if (!extension) {\n      return {\n        isValid: false,\n        error: '无法识别文件类型（缺少扩展名）'\n      };\n    }\n\n    if (!this.supportedExtensions.has(extension)) {\n      return {\n        isValid: false,\n        error: `不支持的文件类型: .${extension}`\n      };\n    }\n\n    return {\n      isValid: true\n    };\n  }\n\n  /**\n     * 检查文件编码\n     * @param {string} content - 文件内容\n     * @returns {Object} 检查结果\n     */\n  checkFileEncoding(content) {\n    try {\n      // 基本的UTF-8检查\n      const encoded = encodeURIComponent(content);\n      decodeURIComponent(encoded);\n\n      // 检查是否包含过多的控制字符\n      const controlCharCount = (content.match(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]/g) || []).length;\n      const controlCharRatio = controlCharCount / content.length;\n\n      if (controlCharRatio > 0.1) {\n        return {\n          isValid: false,\n          error: '文件可能是二进制文件或编码异常'\n        };\n      }\n\n      return {\n        isValid: true\n      };\n    } catch (error) {\n      return {\n        isValid: false,\n        error: '文件编码异常'\n      };\n    }\n  }\n\n  /**\n     * 获取文件信息\n     * @param {string} filePath - 文件路径\n     * @param {string} content - 文件内容\n     * @returns {Object} 文件信息\n     */\n  getFileInfo(filePath, content) {\n    const extension = this.getFileExtension(filePath);\n    const lines = content.split('\\n');\n    const size = new Blob([content]).size;\n\n    return {\n      path: filePath,\n      name: filePath.split(/[\\\\/]/).pop() || '',\n      extension: extension,\n      size: size,\n      formattedSize: this.formatFileSize(size),\n      lineCount: lines.length,\n      characterCount: content.length,\n      language: this.detectLanguage(extension),\n      isEmpty: content.trim().length === 0\n    };\n  }\n\n  /**\n     * 预处理文件内容\n     * @param {string} content - 原始内容\n     * @param {string} extension - 文件扩展名\n     * @returns {string} 处理后的内容\n     */\n  preprocessContent(content, extension) {\n    let processed = content;\n\n    // 统一换行符\n    processed = processed.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n\n    // 移除BOM标记\n    if (processed.charCodeAt(0) === 0xFEFF) {\n      processed = processed.slice(1);\n    }\n\n    // 根据文件类型进行特定预处理\n    switch (extension) {\n    case 'js':\n    case 'jsx':\n    case 'ts':\n    case 'tsx':\n      // JavaScript/TypeScript特定处理\n      processed = this.preprocessJavaScript(processed);\n      break;\n    case 'py':\n      // Python特定处理\n      processed = this.preprocessPython(processed);\n      break;\n    case 'java':\n      // Java特定处理\n      processed = this.preprocessJava(processed);\n      break;\n    }\n\n    return processed;\n  }\n\n  /**\n     * JavaScript预处理\n     * @param {string} content - 内容\n     * @returns {string} 处理后的内容\n     */\n  preprocessJavaScript(content) {\n    // 移除shebang行\n    if (content.startsWith('#!')) {\n      const firstNewline = content.indexOf('\\n');\n      if (firstNewline !== -1) {\n        content = content.substring(firstNewline + 1);\n      }\n    }\n    return content;\n  }\n\n  /**\n     * Python预处理\n     * @param {string} content - 内容\n     * @returns {string} 处理后的内容\n     */\n  preprocessPython(content) {\n    // 移除shebang行\n    if (content.startsWith('#!')) {\n      const firstNewline = content.indexOf('\\n');\n      if (firstNewline !== -1) {\n        content = content.substring(firstNewline + 1);\n      }\n    }\n    return content;\n  }\n\n  /**\n     * Java预处理\n     * @param {string} content - 内容\n     * @returns {string} 处理后的内容\n     */\n  preprocessJava(content) {\n    // Java通常不需要特殊预处理\n    return content;\n  }\n\n  /**\n     * 检测编程语言\n     * @param {string} extension - 文件扩展名\n     * @returns {string} 语言名称\n     */\n  detectLanguage(extension) {\n    const languageMap = {\n      'js': 'JavaScript',\n      'jsx': 'JavaScript (React)',\n      'ts': 'TypeScript',\n      'tsx': 'TypeScript (React)',\n      'vue': 'Vue.js',\n      'py': 'Python',\n      'java': 'Java',\n      'cpp': 'C++',\n      'c': 'C',\n      'h': 'C/C++ Header',\n      'cs': 'C#',\n      'php': 'PHP',\n      'rb': 'Ruby',\n      'go': 'Go',\n      'rs': 'Rust',\n      'swift': 'Swift',\n      'kt': 'Kotlin',\n      'scala': 'Scala',\n      'html': 'HTML',\n      'css': 'CSS',\n      'scss': 'SCSS',\n      'less': 'Less',\n      'json': 'JSON',\n      'xml': 'XML',\n      'yaml': 'YAML',\n      'yml': 'YAML'\n    };\n\n    return languageMap[extension] || 'Unknown';\n  }\n\n  /**\n     * 格式化文件大小\n     * @param {number} bytes - 字节数\n     * @returns {string} 格式化的大小\n     */\n  formatFileSize(bytes) {\n    if (bytes === 0) {return '0 Bytes';}\n\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  /**\n     * 生成内容哈希\n     * @param {string} content - 文件内容\n     * @returns {string} 哈希值\n     */\n  generateContentHash(content) {\n    let hash = 0;\n    if (content.length === 0) {return hash.toString();}\n\n    for (let i = 0; i < content.length; i++) {\n      const char = content.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash;\n    }\n\n    return Math.abs(hash).toString(36);\n  }\n\n  /**\n     * 设置最大文件大小\n     * @param {number} size - 最大文件大小（字节）\n     */\n  setMaxFileSize(size) {\n    this.maxFileSize = size;\n  }\n\n  /**\n     * 添加支持的扩展名\n     * @param {string|Array<string>} extensions - 扩展名\n     */\n  addSupportedExtensions(extensions) {\n    if (Array.isArray(extensions)) {\n      extensions.forEach(ext => this.supportedExtensions.add(ext.toLowerCase()));\n    } else {\n      this.supportedExtensions.add(extensions.toLowerCase());\n    }\n  }\n\n  /**\n     * 获取支持的扩展名列表\n     * @returns {Array<string>} 扩展名数组\n     */\n  getSupportedExtensions() {\n    return Array.from(this.supportedExtensions).sort();\n  }\n}\n\n// 导出类\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = FileParser;\n} else if (typeof window !== 'undefined') {\n  window.FileParser = FileParser;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\analyzers\\ProjectAnalyzer.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'supportedExtensions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":111,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":111,"endColumn":30},{"ruleId":"no-unused-vars","severity":2,"message":"'ignoredPatterns' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":141,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":141,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'options' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":207,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":207,"endColumn":52},{"ruleId":"no-unused-vars","severity":2,"message":"'options' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":256,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":256,"endColumn":55},{"ruleId":"no-unused-vars","severity":2,"message":"'options' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":290,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":290,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'options' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":328,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":328,"endColumn":54},{"ruleId":"no-unused-vars","severity":2,"message":"'options' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":366,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":366,"endColumn":53},{"ruleId":"no-unused-vars","severity":2,"message":"'options' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":404,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":404,"endColumn":54},{"ruleId":"no-magic-numbers","severity":1,"message":"Number constants declarations must use 'const'.","line":699,"column":17,"nodeType":"Literal","messageId":"useConst","endLine":699,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":709,"column":24,"nodeType":"Literal","messageId":"noMagic","endLine":709,"endColumn":26},{"ruleId":"no-magic-numbers","severity":1,"message":"Number constants declarations must use 'const'.","line":860,"column":17,"nodeType":"Literal","messageId":"useConst","endLine":860,"endColumn":19},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":872,"column":24,"nodeType":"Literal","messageId":"noMagic","endLine":872,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'fileStructure' is defined but never used. Allowed unused args must match /^_/u.","line":876,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":876,"endColumn":41},{"ruleId":"no-unused-vars","severity":2,"message":"'fileStructure' is defined but never used. Allowed unused args must match /^_/u.","line":892,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":892,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'fileStructure' is defined but never used. Allowed unused args must match /^_/u.","line":950,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":950,"endColumn":39},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 75.","line":967,"column":34,"nodeType":"Literal","messageId":"noMagic","endLine":967,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'fileStructure' is defined but never used. Allowed unused args must match /^_/u.","line":1143,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":1143,"endColumn":47},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":1200,"column":18,"nodeType":"Literal","messageId":"noMagic","endLine":1200,"endColumn":20},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 75.","line":1272,"column":12,"nodeType":"Literal","messageId":"noMagic","endLine":1272,"endColumn":14},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 75.","line":1305,"column":51,"nodeType":"Literal","messageId":"noMagic","endLine":1305,"endColumn":53}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 项目分析器 - 负责项目级别的代码分析\n * 符合单一职责原则：专门处理项目整体分析、依赖关系、架构评估等功能\n */\nclass ProjectAnalyzer {\n  constructor() {\n    this.projectMetrics = {\n      structure: {\n        weight: 0.25,\n        factors: ['directoryStructure', 'fileOrganization', 'namingConsistency']\n      },\n      dependencies: {\n        weight: 0.2,\n        factors: ['coupling', 'cohesion', 'circularDependencies', 'unusedDependencies']\n      },\n      maintainability: {\n        weight: 0.2,\n        factors: ['codeReuse', 'modularity', 'testability', 'documentation']\n      },\n      quality: {\n        weight: 0.2,\n        factors: ['codeStandards', 'complexity', 'duplication', 'coverage']\n      },\n      security: {\n        weight: 0.15,\n        factors: ['vulnerabilities', 'secretsManagement', 'inputValidation', 'accessControl']\n      }\n    };\n\n    this.analysisCache = new Map();\n    this.dependencyGraph = new Map();\n    this.fileRegistry = new Map();\n  }\n\n  /**\n     * 分析整个项目\n     * @param {string} projectPath - 项目根路径\n     * @param {Object} options - 分析选项\n     * @returns {Object} 项目分析结果\n     */\n  async analyzeProject(projectPath, options = {}) {\n    try {\n      const startTime = Date.now();\n\n      // 扫描项目文件\n      const fileStructure = await this.scanProjectFiles(projectPath, options);\n\n      // 构建依赖图\n      await this.buildDependencyGraph(fileStructure, options);\n\n      // 执行各项分析\n      const analysis = {\n        projectPath: projectPath,\n        scanTime: new Date().toISOString(),\n        fileCount: fileStructure.files.length,\n        directoryCount: fileStructure.directories.length,\n\n        structure: await this.analyzeProjectStructure(fileStructure, options),\n        dependencies: await this.analyzeDependencies(options),\n        maintainability: await this.analyzeMaintainability(fileStructure, options),\n        quality: await this.analyzeProjectQuality(fileStructure, options),\n        security: await this.analyzeProjectSecurity(fileStructure, options),\n\n        metrics: this.calculateProjectMetrics(fileStructure),\n        recommendations: this.generateProjectRecommendations(fileStructure),\n        summary: this.generateProjectSummary(fileStructure),\n\n        performance: {\n          analysisTime: Date.now() - startTime,\n          filesAnalyzed: fileStructure.files.length,\n          cacheHits: this.getCacheHitRate()\n        }\n      };\n\n      // 计算总体评分\n      analysis.overallScore = this.calculateOverallScore(analysis);\n      analysis.grade = this.determineProjectGrade(analysis.overallScore);\n\n      return {\n        success: true,\n        analysis: analysis,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `项目分析失败: ${error.message}`,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  /**\n     * 扫描项目文件\n     * @param {string} projectPath - 项目路径\n     * @param {Object} options - 扫描选项\n     * @returns {Object} 文件结构信息\n     */\n  async scanProjectFiles(projectPath, options = {}) {\n    const fileStructure = {\n      root: projectPath,\n      files: [],\n      directories: [],\n      languages: new Map(),\n      fileTypes: new Map(),\n      totalSize: 0,\n      totalLines: 0\n    };\n\n    // 支持的文件扩展名\n    const supportedExtensions = {\n      '.js': 'javascript',\n      '.jsx': 'javascript',\n      '.ts': 'typescript',\n      '.tsx': 'typescript',\n      '.py': 'python',\n      '.java': 'java',\n      '.cpp': 'cpp',\n      '.c': 'c',\n      '.cs': 'csharp',\n      '.php': 'php',\n      '.rb': 'ruby',\n      '.go': 'go',\n      '.rs': 'rust',\n      '.swift': 'swift',\n      '.kt': 'kotlin',\n      '.scala': 'scala',\n      '.html': 'html',\n      '.css': 'css',\n      '.scss': 'scss',\n      '.less': 'less',\n      '.json': 'json',\n      '.xml': 'xml',\n      '.yaml': 'yaml',\n      '.yml': 'yaml',\n      '.md': 'markdown',\n      '.sql': 'sql'\n    };\n\n    // 忽略的目录和文件\n    const ignoredPatterns = [\n      'node_modules', '.git', '.svn', '.hg',\n      'dist', 'build', 'target', 'bin', 'obj',\n      '.idea', '.vscode', '.vs',\n      '__pycache__', '.pytest_cache',\n      'coverage', '.nyc_output',\n      'logs', 'tmp', 'temp',\n      ...(options.ignorePatterns || [])\n    ];\n\n    // 递归扫描文件（模拟实现）\n    const mockFiles = [\n      { path: 'js/cart.js', size: 25600, lines: 816, language: 'javascript' },\n      { path: 'js/code-analyzer.js', size: 28800, lines: 920, language: 'javascript' },\n      { path: 'js/auth-manager.js', size: 12800, lines: 410, language: 'javascript' },\n      { path: 'js/config-manager.js', size: 9600, lines: 290, language: 'javascript' },\n      { path: 'js/analyzers/AnalysisCache.js', size: 3200, lines: 120, language: 'javascript' },\n      { path: 'js/analyzers/FileParser.js', size: 4800, lines: 180, language: 'javascript' },\n      { path: 'js/analyzers/BasicAnalyzer.js', size: 6400, lines: 240, language: 'javascript' },\n      { path: 'js/analyzers/ComplexityAnalyzer.js', size: 8000, lines: 300, language: 'javascript' },\n      { path: 'js/analyzers/ASTAnalyzer.js', size: 5600, lines: 210, language: 'javascript' },\n      { path: 'js/analyzers/QualityAnalyzer.js', size: 12000, lines: 450, language: 'javascript' },\n      { path: 'css/styles.css', size: 4800, lines: 200, language: 'css' },\n      { path: 'css/buttons.css', size: 1600, lines: 80, language: 'css' },\n      { path: 'index.html', size: 3200, lines: 120, language: 'html' },\n      { path: 'package.json', size: 800, lines: 32, language: 'json' },\n      { path: 'README.md', size: 1200, lines: 48, language: 'markdown' }\n    ];\n\n    mockFiles.forEach(file => {\n      fileStructure.files.push(file);\n      fileStructure.totalSize += file.size;\n      fileStructure.totalLines += file.lines;\n\n      // 统计语言分布\n      const count = fileStructure.languages.get(file.language) || 0;\n      fileStructure.languages.set(file.language, count + 1);\n\n      // 统计文件类型\n      const ext = '.' + file.path.split('.').pop();\n      const typeCount = fileStructure.fileTypes.get(ext) || 0;\n      fileStructure.fileTypes.set(ext, typeCount + 1);\n\n      // 注册文件\n      this.fileRegistry.set(file.path, {\n        ...file,\n        dependencies: [],\n        dependents: [],\n        complexity: 0,\n        quality: 0\n      });\n    });\n\n    // 模拟目录结构\n    fileStructure.directories = [\n      'js', 'js/analyzers', 'css', 'docs', 'tests'\n    ];\n\n    return fileStructure;\n  }\n\n  /**\n     * 构建依赖关系图\n     * @param {Object} fileStructure - 文件结构\n     * @param {Object} options - 选项\n     */\n  async buildDependencyGraph(fileStructure, options = {}) {\n    // 清空依赖图\n    this.dependencyGraph.clear();\n\n    // 模拟依赖关系分析\n    const mockDependencies = {\n      'js/cart.js': ['js/auth-manager.js', 'js/config-manager.js'],\n      'js/code-analyzer.js': [\n        'js/analyzers/AnalysisCache.js',\n        'js/analyzers/FileParser.js',\n        'js/analyzers/BasicAnalyzer.js',\n        'js/analyzers/ComplexityAnalyzer.js',\n        'js/analyzers/ASTAnalyzer.js',\n        'js/analyzers/QualityAnalyzer.js'\n      ],\n      'js/auth-manager.js': ['js/config-manager.js'],\n      'js/analyzers/BasicAnalyzer.js': ['js/analyzers/AnalysisCache.js'],\n      'js/analyzers/ComplexityAnalyzer.js': ['js/analyzers/AnalysisCache.js'],\n      'js/analyzers/ASTAnalyzer.js': ['js/analyzers/AnalysisCache.js'],\n      'js/analyzers/QualityAnalyzer.js': ['js/analyzers/AnalysisCache.js']\n    };\n\n    // 构建依赖图\n    Object.entries(mockDependencies).forEach(([file, deps]) => {\n      this.dependencyGraph.set(file, deps);\n\n      // 更新文件注册信息\n      if (this.fileRegistry.has(file)) {\n        this.fileRegistry.get(file).dependencies = deps;\n      }\n\n      // 更新被依赖文件的dependents\n      deps.forEach(dep => {\n        if (this.fileRegistry.has(dep)) {\n          const dependents = this.fileRegistry.get(dep).dependents;\n          if (!dependents.includes(file)) {\n            dependents.push(file);\n          }\n        }\n      });\n    });\n  }\n\n  /**\n     * 分析项目结构\n     * @param {Object} fileStructure - 文件结构\n     * @param {Object} options - 选项\n     * @returns {Object} 结构分析结果\n     */\n  async analyzeProjectStructure(fileStructure, options = {}) {\n    const structure = {\n      score: 0,\n      details: {},\n      issues: [],\n      recommendations: []\n    };\n\n    // 分析目录结构\n    structure.details.directoryStructure = this.analyzeDirectoryStructure(fileStructure);\n\n    // 分析文件组织\n    structure.details.fileOrganization = this.analyzeFileOrganization(fileStructure);\n\n    // 分析命名一致性\n    structure.details.namingConsistency = this.analyzeNamingConsistency(fileStructure);\n\n    // 计算结构评分\n    structure.score = this.calculateCategoryScore(structure.details);\n\n    // 识别结构问题\n    structure.issues = this.findStructureIssues(fileStructure);\n\n    // 生成结构建议\n    structure.recommendations = this.generateStructureRecommendations(fileStructure);\n\n    return structure;\n  }\n\n  /**\n     * 分析依赖关系\n     * @param {Object} options - 选项\n     * @returns {Object} 依赖分析结果\n     */\n  async analyzeDependencies(options = {}) {\n    const dependencies = {\n      score: 0,\n      details: {},\n      issues: [],\n      recommendations: []\n    };\n\n    // 分析耦合度\n    dependencies.details.coupling = this.analyzeCoupling();\n\n    // 分析内聚性\n    dependencies.details.cohesion = this.analyzeCohesion();\n\n    // 检查循环依赖\n    dependencies.details.circularDependencies = this.findCircularDependencies();\n\n    // 检查未使用的依赖\n    dependencies.details.unusedDependencies = this.findUnusedDependencies();\n\n    // 计算依赖评分\n    dependencies.score = this.calculateCategoryScore(dependencies.details);\n\n    // 识别依赖问题\n    dependencies.issues = this.findDependencyIssues();\n\n    // 生成依赖建议\n    dependencies.recommendations = this.generateDependencyRecommendations();\n\n    return dependencies;\n  }\n\n  /**\n     * 分析可维护性\n     * @param {Object} fileStructure - 文件结构\n     * @param {Object} options - 选项\n     * @returns {Object} 可维护性分析结果\n     */\n  async analyzeMaintainability(fileStructure, options = {}) {\n    const maintainability = {\n      score: 0,\n      details: {},\n      issues: [],\n      recommendations: []\n    };\n\n    // 分析代码重用\n    maintainability.details.codeReuse = this.analyzeCodeReuse(fileStructure);\n\n    // 分析模块化\n    maintainability.details.modularity = this.analyzeModularity(fileStructure);\n\n    // 分析可测试性\n    maintainability.details.testability = this.analyzeTestability(fileStructure);\n\n    // 分析文档完整性\n    maintainability.details.documentation = this.analyzeDocumentation(fileStructure);\n\n    // 计算可维护性评分\n    maintainability.score = this.calculateCategoryScore(maintainability.details);\n\n    // 识别可维护性问题\n    maintainability.issues = this.findMaintainabilityIssues(fileStructure);\n\n    // 生成可维护性建议\n    maintainability.recommendations = this.generateMaintainabilityRecommendations(fileStructure);\n\n    return maintainability;\n  }\n\n  /**\n     * 分析项目质量\n     * @param {Object} fileStructure - 文件结构\n     * @param {Object} options - 选项\n     * @returns {Object} 质量分析结果\n     */\n  async analyzeProjectQuality(fileStructure, options = {}) {\n    const quality = {\n      score: 0,\n      details: {},\n      issues: [],\n      recommendations: []\n    };\n\n    // 分析代码标准\n    quality.details.codeStandards = this.analyzeCodeStandards(fileStructure);\n\n    // 分析复杂度\n    quality.details.complexity = this.analyzeProjectComplexity(fileStructure);\n\n    // 分析重复代码\n    quality.details.duplication = this.analyzeProjectDuplication(fileStructure);\n\n    // 分析测试覆盖率\n    quality.details.coverage = this.analyzeTestCoverage(fileStructure);\n\n    // 计算质量评分\n    quality.score = this.calculateCategoryScore(quality.details);\n\n    // 识别质量问题\n    quality.issues = this.findQualityIssues(fileStructure);\n\n    // 生成质量建议\n    quality.recommendations = this.generateQualityRecommendations(fileStructure);\n\n    return quality;\n  }\n\n  /**\n     * 分析项目安全性\n     * @param {Object} fileStructure - 文件结构\n     * @param {Object} options - 选项\n     * @returns {Object} 安全性分析结果\n     */\n  async analyzeProjectSecurity(fileStructure, options = {}) {\n    const security = {\n      score: 0,\n      details: {},\n      issues: [],\n      recommendations: []\n    };\n\n    // 分析漏洞\n    security.details.vulnerabilities = this.analyzeVulnerabilities(fileStructure);\n\n    // 分析秘密管理\n    security.details.secretsManagement = this.analyzeSecretsManagement(fileStructure);\n\n    // 分析输入验证\n    security.details.inputValidation = this.analyzeInputValidation(fileStructure);\n\n    // 分析访问控制\n    security.details.accessControl = this.analyzeAccessControl(fileStructure);\n\n    // 计算安全评分\n    security.score = this.calculateCategoryScore(security.details);\n\n    // 识别安全问题\n    security.issues = this.findSecurityIssues(fileStructure);\n\n    // 生成安全建议\n    security.recommendations = this.generateSecurityRecommendations(fileStructure);\n\n    return security;\n  }\n\n  /**\n     * 计算项目指标\n     * @param {Object} fileStructure - 文件结构\n     * @returns {Object} 项目指标\n     */\n  calculateProjectMetrics(fileStructure) {\n    const metrics = {\n      size: {\n        files: fileStructure.files.length,\n        directories: fileStructure.directories.length,\n        totalLines: fileStructure.totalLines,\n        totalSize: fileStructure.totalSize,\n        averageFileSize: Math.round(fileStructure.totalSize / fileStructure.files.length),\n        averageFileLines: Math.round(fileStructure.totalLines / fileStructure.files.length)\n      },\n\n      languages: {\n        count: fileStructure.languages.size,\n        distribution: Object.fromEntries(fileStructure.languages),\n        primary: this.getPrimaryLanguage(fileStructure.languages)\n      },\n\n      complexity: {\n        average: this.calculateAverageComplexity(),\n        maximum: this.getMaximumComplexity(),\n        distribution: this.getComplexityDistribution()\n      },\n\n      dependencies: {\n        totalDependencies: this.getTotalDependencies(),\n        averageDependencies: this.getAverageDependencies(),\n        maxDependencies: this.getMaxDependencies(),\n        circularDependencies: this.getCircularDependencyCount()\n      },\n\n      quality: {\n        averageQuality: this.calculateAverageQuality(),\n        qualityDistribution: this.getQualityDistribution(),\n        issueCount: this.getTotalIssueCount(),\n        criticalIssues: this.getCriticalIssueCount()\n      }\n    };\n\n    return metrics;\n  }\n\n  /**\n     * 生成项目建议\n     * @param {Object} fileStructure - 文件结构\n     * @returns {Array} 建议列表\n     */\n  generateProjectRecommendations(fileStructure) {\n    const recommendations = [];\n\n    // 基于文件数量的建议\n    if (fileStructure.files.length > 100) {\n      recommendations.push({\n        category: 'structure',\n        priority: 'medium',\n        title: '项目规模较大',\n        description: `项目包含 ${fileStructure.files.length} 个文件`,\n        action: '考虑拆分为多个子模块或微服务',\n        impact: '提高项目可维护性和团队协作效率'\n      });\n    }\n\n    // 基于语言多样性的建议\n    if (fileStructure.languages.size > 5) {\n      recommendations.push({\n        category: 'structure',\n        priority: 'low',\n        title: '编程语言过多',\n        description: `项目使用了 ${fileStructure.languages.size} 种编程语言`,\n        action: '评估是否可以减少语言种类，统一技术栈',\n        impact: '降低维护复杂度和学习成本'\n      });\n    }\n\n    // 基于平均文件大小的建议\n    const avgFileSize = fileStructure.totalSize / fileStructure.files.length;\n    if (avgFileSize > 10000) {\n      recommendations.push({\n        category: 'maintainability',\n        priority: 'high',\n        title: '文件平均大小过大',\n        description: `平均文件大小为 ${Math.round(avgFileSize)} 字节`,\n        action: '拆分大文件，按功能职责重新组织代码',\n        impact: '提高代码可读性和可维护性'\n      });\n    }\n\n    // 基于依赖关系的建议\n    const totalDeps = this.getTotalDependencies();\n    if (totalDeps > fileStructure.files.length * 2) {\n      recommendations.push({\n        category: 'dependencies',\n        priority: 'high',\n        title: '依赖关系过于复杂',\n        description: `总依赖数量为 ${totalDeps}，平均每个文件依赖 ${Math.round(totalDeps / fileStructure.files.length)} 个其他文件`,\n        action: '简化依赖关系，减少耦合度',\n        impact: '提高代码的可测试性和可维护性'\n      });\n    }\n\n    // 基于测试覆盖率的建议\n    const testFiles = fileStructure.files.filter(f =>\n      f.path.includes('test') || f.path.includes('spec')\n    ).length;\n    const testRatio = testFiles / fileStructure.files.length;\n\n    if (testRatio < 0.3) {\n      recommendations.push({\n        category: 'quality',\n        priority: 'high',\n        title: '测试文件不足',\n        description: `测试文件比例仅为 ${(testRatio * 100).toFixed(1)}%`,\n        action: '增加单元测试和集成测试',\n        impact: '提高代码质量和系统稳定性'\n      });\n    }\n\n    return recommendations.sort((a, b) => {\n      const priorityOrder = { 'critical': 5, 'high': 4, 'medium': 3, 'low': 2, 'info': 1 };\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\n    });\n  }\n\n  /**\n     * 生成项目摘要\n     * @param {Object} fileStructure - 文件结构\n     * @returns {Object} 项目摘要\n     */\n  generateProjectSummary(fileStructure) {\n    const primaryLanguage = this.getPrimaryLanguage(fileStructure.languages);\n    const avgComplexity = this.calculateAverageComplexity();\n    const totalIssues = this.getTotalIssueCount();\n\n    return {\n      overview: {\n        description: `这是一个主要使用 ${primaryLanguage} 的项目`,\n        fileCount: fileStructure.files.length,\n        directoryCount: fileStructure.directories.length,\n        totalLines: fileStructure.totalLines,\n        primaryLanguage: primaryLanguage\n      },\n\n      health: {\n        overallHealth: this.calculateProjectHealth(),\n        complexity: avgComplexity <= 10 ? 'low' : avgComplexity <= 20 ? 'medium' : 'high',\n        maintainability: this.calculateMaintainabilityLevel(),\n        testCoverage: this.calculateTestCoverageLevel()\n      },\n\n      highlights: {\n        strengths: this.identifyProjectStrengths(fileStructure),\n        weaknesses: this.identifyProjectWeaknesses(fileStructure),\n        opportunities: this.identifyImprovementOpportunities(fileStructure)\n      },\n\n      statistics: {\n        languageDistribution: Object.fromEntries(fileStructure.languages),\n        averageFileSize: Math.round(fileStructure.totalSize / fileStructure.files.length),\n        averageComplexity: avgComplexity,\n        totalIssues: totalIssues,\n        criticalIssues: this.getCriticalIssueCount()\n      }\n    };\n  }\n\n  // 结构分析方法\n  analyzeDirectoryStructure(fileStructure) {\n    const score = 80; // 基础分数\n    const hasStandardDirs = fileStructure.directories.some(dir =>\n      ['src', 'lib', 'components', 'utils', 'tests'].includes(dir)\n    );\n\n    return {\n      score: hasStandardDirs ? score : score - 20,\n      hasStandardStructure: hasStandardDirs,\n      directoryCount: fileStructure.directories.length,\n      depth: this.calculateDirectoryDepth(fileStructure.directories),\n      status: hasStandardDirs ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeFileOrganization(fileStructure) {\n    let score = 80;\n\n    // 检查文件是否按类型组织\n    const jsFiles = fileStructure.files.filter(f => f.path.endsWith('.js')).length;\n    const cssFiles = fileStructure.files.filter(f => f.path.endsWith('.css')).length;\n    const htmlFiles = fileStructure.files.filter(f => f.path.endsWith('.html')).length;\n\n    const isWellOrganized = jsFiles > 0 && cssFiles > 0 && htmlFiles > 0;\n\n    if (!isWellOrganized) {score -= 20;}\n\n    return {\n      score: score,\n      isWellOrganized: isWellOrganized,\n      fileTypeDistribution: {\n        javascript: jsFiles,\n        css: cssFiles,\n        html: htmlFiles\n      },\n      status: isWellOrganized ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeNamingConsistency(fileStructure) {\n    let score = 80;\n    let consistentNaming = 0;\n    const totalFiles = fileStructure.files.length;\n\n    fileStructure.files.forEach(file => {\n      const fileName = file.path.split('/').pop().split('.')[0];\n\n      // 检查命名规范（简化实现）\n      if (fileName.match(/^[a-z][a-zA-Z0-9]*$/) || // camelCase\n                fileName.match(/^[a-z][a-z0-9-]*$/) || // kebab-case\n                fileName.match(/^[a-z][a-z0-9_]*$/)) { // snake_case\n        consistentNaming++;\n      }\n    });\n\n    const consistency = totalFiles > 0 ? consistentNaming / totalFiles : 1;\n    score = Math.round(consistency * 100);\n\n    return {\n      score: score,\n      consistency: consistency,\n      consistentFiles: consistentNaming,\n      totalFiles: totalFiles,\n      status: consistency >= 0.8 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  // 依赖分析方法\n  analyzeCoupling() {\n    const totalFiles = this.fileRegistry.size;\n    let totalDependencies = 0;\n\n    this.dependencyGraph.forEach(deps => {\n      totalDependencies += deps.length;\n    });\n\n    const avgCoupling = totalFiles > 0 ? totalDependencies / totalFiles : 0;\n    let score = 100;\n\n    if (avgCoupling > 5) {score = 40;}\n    else if (avgCoupling > 3) {score = 60;}\n    else if (avgCoupling > 2) {score = 80;}\n\n    return {\n      score: score,\n      averageCoupling: avgCoupling,\n      totalDependencies: totalDependencies,\n      status: avgCoupling <= 3 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeCohesion() {\n    // 简化的内聚性分析\n    let score = 75; // 默认分数\n\n    // 检查是否有明确的模块划分\n    const hasModules = this.dependencyGraph.size > 0;\n    if (hasModules) {score += 10;}\n\n    return {\n      score: score,\n      hasModularStructure: hasModules,\n      moduleCount: this.dependencyGraph.size,\n      status: score >= 70 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  findCircularDependencies() {\n    const visited = new Set();\n    const recursionStack = new Set();\n    const circularDeps = [];\n\n    const dfs = (file, path = []) => {\n      if (recursionStack.has(file)) {\n        // 找到循环依赖\n        const cycleStart = path.indexOf(file);\n        if (cycleStart !== -1) {\n          circularDeps.push(path.slice(cycleStart).concat([file]));\n        }\n        return;\n      }\n\n      if (visited.has(file)) {return;}\n\n      visited.add(file);\n      recursionStack.add(file);\n\n      const dependencies = this.dependencyGraph.get(file) || [];\n      dependencies.forEach(dep => {\n        dfs(dep, [...path, file]);\n      });\n\n      recursionStack.delete(file);\n    };\n\n    this.dependencyGraph.forEach((_, file) => {\n      if (!visited.has(file)) {\n        dfs(file);\n      }\n    });\n\n    const score = circularDeps.length === 0 ? 100 : Math.max(0, 100 - circularDeps.length * 20);\n\n    return {\n      score: score,\n      circularDependencies: circularDeps,\n      count: circularDeps.length,\n      status: circularDeps.length === 0 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  findUnusedDependencies() {\n    const allFiles = new Set(this.fileRegistry.keys());\n    const referencedFiles = new Set();\n\n    // 收集所有被引用的文件\n    this.dependencyGraph.forEach(deps => {\n      deps.forEach(dep => referencedFiles.add(dep));\n    });\n\n    // 找出未被引用的文件（除了入口文件）\n    const entryFiles = ['index.js', 'main.js', 'app.js', 'index.html'];\n    const unusedFiles = [];\n\n    allFiles.forEach(file => {\n      const fileName = file.split('/').pop();\n      if (!referencedFiles.has(file) && !entryFiles.includes(fileName)) {\n        unusedFiles.push(file);\n      }\n    });\n\n    const score = unusedFiles.length === 0 ? 100 : Math.max(0, 100 - unusedFiles.length * 10);\n\n    return {\n      score: score,\n      unusedFiles: unusedFiles,\n      count: unusedFiles.length,\n      status: unusedFiles.length === 0 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  // 可维护性分析方法\n  analyzeCodeReuse(fileStructure) {\n    // 简化的代码重用分析\n    const utilFiles = fileStructure.files.filter(f =>\n      f.path.includes('util') || f.path.includes('helper') || f.path.includes('common')\n    ).length;\n\n    const reuseRatio = utilFiles / fileStructure.files.length;\n    const score = Math.min(100, reuseRatio * 200);\n\n    return {\n      score: score,\n      utilityFiles: utilFiles,\n      reuseRatio: reuseRatio,\n      status: reuseRatio >= 0.1 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeModularity(fileStructure) {\n    const moduleCount = this.dependencyGraph.size;\n    const avgModuleSize = fileStructure.totalLines / Math.max(1, moduleCount);\n\n    let score = 80;\n    if (avgModuleSize > 500) {score = 40;}\n    else if (avgModuleSize > 300) {score = 60;}\n\n    return {\n      score: score,\n      moduleCount: moduleCount,\n      averageModuleSize: avgModuleSize,\n      status: avgModuleSize <= 300 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeTestability(fileStructure) {\n    const testFiles = fileStructure.files.filter(f =>\n      f.path.includes('test') || f.path.includes('spec')\n    ).length;\n\n    const testRatio = testFiles / fileStructure.files.length;\n    const score = Math.min(100, testRatio * 200);\n\n    return {\n      score: score,\n      testFiles: testFiles,\n      testRatio: testRatio,\n      status: testRatio >= 0.3 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeDocumentation(fileStructure) {\n    const docFiles = fileStructure.files.filter(f =>\n      f.path.endsWith('.md') || f.path.includes('doc')\n    ).length;\n\n    const hasReadme = fileStructure.files.some(f =>\n      f.path.toLowerCase().includes('readme')\n    );\n\n    let score = hasReadme ? 60 : 30;\n    score += Math.min(40, docFiles * 10);\n\n    return {\n      score: score,\n      documentationFiles: docFiles,\n      hasReadme: hasReadme,\n      status: score >= 60 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  // 质量分析方法\n  analyzeCodeStandards(fileStructure) {\n    // 简化的代码标准分析\n    let score = 75; // 基础分数\n\n    // 检查是否有配置文件\n    const hasLintConfig = fileStructure.files.some(f =>\n      f.path.includes('.eslint') || f.path.includes('.prettier') || f.path.includes('tslint')\n    );\n\n    if (hasLintConfig) {score += 15;}\n\n    return {\n      score: score,\n      hasLintConfiguration: hasLintConfig,\n      status: score >= 70 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeProjectComplexity(fileStructure) {\n    const avgComplexity = this.calculateAverageComplexity();\n    let score = 100;\n\n    if (avgComplexity > 20) {score = 20;}\n    else if (avgComplexity > 15) {score = 40;}\n    else if (avgComplexity > 10) {score = 60;}\n    else if (avgComplexity > 5) {score = 80;}\n\n    return {\n      score: score,\n      averageComplexity: avgComplexity,\n      status: avgComplexity <= 10 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeProjectDuplication(fileStructure) {\n    // 简化的重复代码分析\n    const estimatedDuplication = 0.08; // 8% 重复率（模拟值）\n    const score = Math.max(0, 100 - estimatedDuplication * 500);\n\n    return {\n      score: score,\n      duplicationRatio: estimatedDuplication,\n      status: estimatedDuplication <= 0.1 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeTestCoverage(fileStructure) {\n    const testFiles = fileStructure.files.filter(f =>\n      f.path.includes('test') || f.path.includes('spec')\n    ).length;\n\n    const estimatedCoverage = Math.min(0.9, testFiles / fileStructure.files.length * 2);\n    const score = estimatedCoverage * 100;\n\n    return {\n      score: score,\n      coverage: estimatedCoverage,\n      testFiles: testFiles,\n      status: estimatedCoverage >= 0.7 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  // 安全性分析方法\n  analyzeVulnerabilities(fileStructure) {\n    // 简化的漏洞分析\n    const jsFiles = fileStructure.files.filter(f => f.language === 'javascript').length;\n    const estimatedVulns = Math.max(0, jsFiles * 0.1); // 估算漏洞数量\n\n    const score = Math.max(0, 100 - estimatedVulns * 10);\n\n    return {\n      score: score,\n      estimatedVulnerabilities: estimatedVulns,\n      status: estimatedVulns === 0 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeSecretsManagement(fileStructure) {\n    // 检查是否有配置文件管理\n    const hasConfigFiles = fileStructure.files.some(f =>\n      f.path.includes('.env') || f.path.includes('config')\n    );\n\n    const score = hasConfigFiles ? 80 : 50;\n\n    return {\n      score: score,\n      hasConfigManagement: hasConfigFiles,\n      status: hasConfigFiles ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeInputValidation(fileStructure) {\n    // 简化的输入验证分析\n    const score = 70; // 默认分数\n\n    return {\n      score: score,\n      hasValidation: true,\n      status: 'fair'\n    };\n  }\n\n  analyzeAccessControl(fileStructure) {\n    // 检查是否有认证相关文件\n    const hasAuthFiles = fileStructure.files.some(f =>\n      f.path.includes('auth') || f.path.includes('login') || f.path.includes('permission')\n    );\n\n    const score = hasAuthFiles ? 75 : 50;\n\n    return {\n      score: score,\n      hasAccessControl: hasAuthFiles,\n      status: hasAuthFiles ? 'good' : 'needs_improvement'\n    };\n  }\n\n  // 问题查找方法\n  findStructureIssues(fileStructure) {\n    const issues = [];\n\n    // 检查大文件\n    fileStructure.files.forEach(file => {\n      if (file.lines > 500) {\n        issues.push({\n          category: 'structure',\n          type: 'large_file',\n          severity: 'medium',\n          file: file.path,\n          message: `文件过大 (${file.lines} 行)`,\n          suggestion: '拆分为更小的模块'\n        });\n      }\n    });\n\n    return issues;\n  }\n\n  findDependencyIssues() {\n    const issues = [];\n\n    // 检查高耦合文件\n    this.dependencyGraph.forEach((deps, file) => {\n      if (deps.length > 5) {\n        issues.push({\n          category: 'dependencies',\n          type: 'high_coupling',\n          severity: 'high',\n          file: file,\n          message: `文件依赖过多 (${deps.length} 个依赖)`,\n          suggestion: '减少依赖，提高模块独立性'\n        });\n      }\n    });\n\n    return issues;\n  }\n\n  findMaintainabilityIssues(fileStructure) {\n    const issues = [];\n\n    // 检查缺少测试的文件\n    const testFiles = new Set(fileStructure.files\n      .filter(f => f.path.includes('test') || f.path.includes('spec'))\n      .map(f => f.path.replace(/test|spec/, '').replace(/\\.(test|spec)/, ''))\n    );\n\n    fileStructure.files.forEach(file => {\n      if (file.language === 'javascript' && !file.path.includes('test') && !file.path.includes('spec')) {\n        const testFile = file.path.replace('.js', '.test.js');\n        if (!testFiles.has(testFile)) {\n          issues.push({\n            category: 'maintainability',\n            type: 'missing_tests',\n            severity: 'medium',\n            file: file.path,\n            message: '缺少对应的测试文件',\n            suggestion: '添加单元测试'\n          });\n        }\n      }\n    });\n\n    return issues;\n  }\n\n  findQualityIssues(fileStructure) {\n    const issues = [];\n\n    // 检查复杂度过高的文件\n    fileStructure.files.forEach(file => {\n      const complexity = this.estimateFileComplexity(file);\n      if (complexity > 20) {\n        issues.push({\n          category: 'quality',\n          type: 'high_complexity',\n          severity: 'high',\n          file: file.path,\n          message: `文件复杂度过高 (${complexity})`,\n          suggestion: '拆分复杂逻辑，简化代码结构'\n        });\n      }\n    });\n\n    return issues;\n  }\n\n  findSecurityIssues(fileStructure) {\n    const issues = [];\n\n    // 检查潜在的安全问题\n    fileStructure.files.forEach(file => {\n      if (file.language === 'javascript') {\n        issues.push({\n          category: 'security',\n          type: 'potential_vulnerability',\n          severity: 'medium',\n          file: file.path,\n          message: '需要进行安全审计',\n          suggestion: '使用安全扫描工具检查潜在漏洞'\n        });\n      }\n    });\n\n    return issues;\n  }\n\n  // 建议生成方法\n  generateStructureRecommendations(fileStructure) {\n    const recommendations = [];\n\n    if (fileStructure.directories.length < 3) {\n      recommendations.push({\n        category: 'structure',\n        priority: 'medium',\n        title: '改善目录结构',\n        description: '项目目录结构较为简单',\n        action: '按功能模块组织代码，创建清晰的目录层次',\n        impact: '提高代码组织性和可维护性'\n      });\n    }\n\n    return recommendations;\n  }\n\n  generateDependencyRecommendations() {\n    const recommendations = [];\n\n    const avgCoupling = this.getAverageDependencies();\n    if (avgCoupling > 3) {\n      recommendations.push({\n        category: 'dependencies',\n        priority: 'high',\n        title: '降低模块耦合度',\n        description: `平均每个模块依赖 ${avgCoupling.toFixed(1)} 个其他模块`,\n        action: '重构高耦合模块，使用依赖注入或事件驱动架构',\n        impact: '提高代码的可测试性和可维护性'\n      });\n    }\n\n    return recommendations;\n  }\n\n  generateMaintainabilityRecommendations(fileStructure) {\n    const recommendations = [];\n\n    const testRatio = fileStructure.files.filter(f =>\n      f.path.includes('test') || f.path.includes('spec')\n    ).length / fileStructure.files.length;\n\n    if (testRatio < 0.3) {\n      recommendations.push({\n        category: 'maintainability',\n        priority: 'high',\n        title: '增加测试覆盖率',\n        description: `测试文件比例仅为 ${(testRatio * 100).toFixed(1)}%`,\n        action: '为核心功能添加单元测试和集成测试',\n        impact: '提高代码质量和系统稳定性'\n      });\n    }\n\n    return recommendations;\n  }\n\n  generateQualityRecommendations(fileStructure) {\n    const recommendations = [];\n\n    const avgComplexity = this.calculateAverageComplexity();\n    if (avgComplexity > 15) {\n      recommendations.push({\n        category: 'quality',\n        priority: 'high',\n        title: '降低代码复杂度',\n        description: `平均代码复杂度为 ${avgComplexity.toFixed(1)}`,\n        action: '拆分复杂函数，使用设计模式简化逻辑',\n        impact: '提高代码可读性和可维护性'\n      });\n    }\n\n    return recommendations;\n  }\n\n  generateSecurityRecommendations(fileStructure) {\n    const recommendations = [];\n\n    const hasSecurityConfig = fileStructure.files.some(f =>\n      f.path.includes('security') || f.path.includes('.env')\n    );\n\n    if (!hasSecurityConfig) {\n      recommendations.push({\n        category: 'security',\n        priority: 'high',\n        title: '加强安全配置',\n        description: '项目缺少明确的安全配置',\n        action: '添加安全配置文件，实施安全最佳实践',\n        impact: '提高应用安全性，保护用户数据'\n      });\n    }\n\n    return recommendations;\n  }\n\n  // 工具方法\n  calculateOverallScore(analysis) {\n    let totalScore = 0;\n    let totalWeight = 0;\n\n    Object.keys(this.projectMetrics).forEach(category => {\n      const weight = this.projectMetrics[category].weight;\n      const score = analysis[category]?.score || 0;\n      totalScore += score * weight;\n      totalWeight += weight;\n    });\n\n    return totalWeight > 0 ? Math.round(totalScore / totalWeight) : 0;\n  }\n\n  determineProjectGrade(score) {\n    if (score >= 90) {return 'A';}\n    if (score >= 80) {return 'B';}\n    if (score >= 70) {return 'C';}\n    if (score >= 60) {return 'D';}\n    return 'F';\n  }\n\n  calculateCategoryScore(details) {\n    const scores = Object.values(details).map(detail => detail.score || 0);\n    return scores.length > 0 ? Math.round(scores.reduce((sum, score) => sum + score, 0) / scores.length) : 0;\n  }\n\n  getPrimaryLanguage(languages) {\n    let maxCount = 0;\n    let primaryLang = 'unknown';\n\n    languages.forEach((count, lang) => {\n      if (count > maxCount) {\n        maxCount = count;\n        primaryLang = lang;\n      }\n    });\n\n    return primaryLang;\n  }\n\n  calculateDirectoryDepth(directories) {\n    return Math.max(...directories.map(dir => dir.split('/').length));\n  }\n\n  getTotalDependencies() {\n    let total = 0;\n    this.dependencyGraph.forEach(deps => {\n      total += deps.length;\n    });\n    return total;\n  }\n\n  getAverageDependencies() {\n    const total = this.getTotalDependencies();\n    const fileCount = this.dependencyGraph.size;\n    return fileCount > 0 ? total / fileCount : 0;\n  }\n\n  getMaxDependencies() {\n    let max = 0;\n    this.dependencyGraph.forEach(deps => {\n      max = Math.max(max, deps.length);\n    });\n    return max;\n  }\n\n  getCircularDependencyCount() {\n    return this.findCircularDependencies().count;\n  }\n\n  calculateAverageComplexity() {\n    // 模拟复杂度计算\n    return 12; // 平均复杂度\n  }\n\n  getMaximumComplexity() {\n    return 25; // 最大复杂度\n  }\n\n  getComplexityDistribution() {\n    return {\n      low: 60,    // 60% 低复杂度\n      medium: 30, // 30% 中等复杂度\n      high: 10    // 10% 高复杂度\n    };\n  }\n\n  calculateAverageQuality() {\n    return 75; // 平均质量分数\n  }\n\n  getQualityDistribution() {\n    return {\n      excellent: 20,\n      good: 50,\n      fair: 25,\n      poor: 5\n    };\n  }\n\n  getTotalIssueCount() {\n    return 15; // 总问题数\n  }\n\n  getCriticalIssueCount() {\n    return 3; // 严重问题数\n  }\n\n  estimateFileComplexity(file) {\n    // 基于文件大小估算复杂度\n    return Math.round(file.lines / 50) + 5;\n  }\n\n  calculateProjectHealth() {\n    const avgComplexity = this.calculateAverageComplexity();\n    const avgQuality = this.calculateAverageQuality();\n    const issueCount = this.getTotalIssueCount();\n\n    let health = 'good';\n    if (avgComplexity > 20 || avgQuality < 60 || issueCount > 20) {\n      health = 'poor';\n    } else if (avgComplexity > 15 || avgQuality < 75 || issueCount > 10) {\n      health = 'fair';\n    }\n\n    return health;\n  }\n\n  calculateMaintainabilityLevel() {\n    const avgComplexity = this.calculateAverageComplexity();\n    if (avgComplexity <= 10) {return 'high';}\n    if (avgComplexity <= 20) {return 'medium';}\n    return 'low';\n  }\n\n  calculateTestCoverageLevel() {\n    // 模拟测试覆盖率\n    const coverage = 0.65;\n    if (coverage >= 0.8) {return 'high';}\n    if (coverage >= 0.6) {return 'medium';}\n    return 'low';\n  }\n\n  identifyProjectStrengths(fileStructure) {\n    const strengths = [];\n\n    if (fileStructure.languages.has('javascript')) {\n      strengths.push('使用现代JavaScript技术栈');\n    }\n\n    if (fileStructure.files.some(f => f.path.includes('test'))) {\n      strengths.push('包含测试文件');\n    }\n\n    if (fileStructure.directories.length >= 3) {\n      strengths.push('良好的目录结构组织');\n    }\n\n    return strengths;\n  }\n\n  identifyProjectWeaknesses(fileStructure) {\n    const weaknesses = [];\n\n    const avgFileSize = fileStructure.totalSize / fileStructure.files.length;\n    if (avgFileSize > 10000) {\n      weaknesses.push('文件平均大小过大');\n    }\n\n    const testRatio = fileStructure.files.filter(f =>\n      f.path.includes('test') || f.path.includes('spec')\n    ).length / fileStructure.files.length;\n\n    if (testRatio < 0.3) {\n      weaknesses.push('测试覆盖率不足');\n    }\n\n    if (this.getCircularDependencyCount() > 0) {\n      weaknesses.push('存在循环依赖');\n    }\n\n    return weaknesses;\n  }\n\n  identifyImprovementOpportunities(fileStructure) {\n    const opportunities = [];\n\n    if (!fileStructure.files.some(f => f.path.includes('doc'))) {\n      opportunities.push('增加项目文档');\n    }\n\n    if (this.getAverageDependencies() > 3) {\n      opportunities.push('优化模块依赖关系');\n    }\n\n    if (fileStructure.files.filter(f => f.lines > 500).length > 0) {\n      opportunities.push('拆分大型文件');\n    }\n\n    return opportunities;\n  }\n\n  getCacheHitRate() {\n    return {\n      hits: this.analysisCache.size,\n      total: this.analysisCache.size + 10,\n      rate: this.analysisCache.size / (this.analysisCache.size + 10)\n    };\n  }\n}\n\n// 导出类\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = ProjectAnalyzer;\n} else if (typeof window !== 'undefined') {\n  window.ProjectAnalyzer = ProjectAnalyzer;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\analyzers\\QualityAnalyzer.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":308,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":308,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":392,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":392,"endColumn":53},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":409,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":409,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":426,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":426,"endColumn":32},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":459,"column":24,"nodeType":"Literal","messageId":"noMagic","endLine":459,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":464,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":464,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":467,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":467,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":547,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":547,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":563,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":563,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":579,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":579,"endColumn":42},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":585,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":585,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":595,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":595,"endColumn":41},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":601,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":601,"endColumn":38},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":612,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":612,"endColumn":47},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":618,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":618,"endColumn":42},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":625,"column":24,"nodeType":"Literal","messageId":"noMagic","endLine":625,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":629,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":629,"endColumn":39},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":640,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":640,"endColumn":39},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":646,"column":24,"nodeType":"Literal","messageId":"noMagic","endLine":646,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":650,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":650,"endColumn":40},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":667,"column":24,"nodeType":"Literal","messageId":"noMagic","endLine":667,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":671,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":671,"endColumn":35},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":683,"column":24,"nodeType":"Literal","messageId":"noMagic","endLine":683,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":688,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":688,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'lines' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":689,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":689,"endColumn":16},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":712,"column":24,"nodeType":"Literal","messageId":"noMagic","endLine":712,"endColumn":26},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":723,"column":43,"nodeType":"Literal","messageId":"noMagic","endLine":723,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":729,"column":24,"nodeType":"Literal","messageId":"noMagic","endLine":729,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":733,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":733,"endColumn":38},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\[.","line":741,"column":36,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":741,"endColumn":37,"suggestions":[{"messageId":"removeEscape","fix":{"range":[21413,21414],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[21413,21413],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":753,"column":24,"nodeType":"Literal","messageId":"noMagic","endLine":753,"endColumn":26},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":771,"column":24,"nodeType":"Literal","messageId":"noMagic","endLine":771,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":797,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":797,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":818,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":818,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":836,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":836,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":855,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":855,"endColumn":42},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 120.","line":861,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":861,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":951,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":951,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":971,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":971,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'language' is defined but never used. Allowed unused args must match /^_/u.","line":988,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":988,"endColumn":35}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 质量分析器 - 负责代码质量评估\n * 符合单一职责原则：专门处理代码质量分析和评分功能\n */\nclass QualityAnalyzer {\n  constructor() {\n    this.qualityMetrics = {\n      maintainability: {\n        weight: 0.3,\n        factors: ['complexity', 'duplication', 'size', 'cohesion']\n      },\n      reliability: {\n        weight: 0.25,\n        factors: ['testCoverage', 'errorHandling', 'nullChecks', 'typeChecking']\n      },\n      security: {\n        weight: 0.2,\n        factors: ['inputValidation', 'outputEncoding', 'authentication', 'authorization']\n      },\n      performance: {\n        weight: 0.15,\n        factors: ['algorithmComplexity', 'memoryUsage', 'ioOperations', 'caching']\n      },\n      readability: {\n        weight: 0.1,\n        factors: ['naming', 'comments', 'formatting', 'structure']\n      }\n    };\n\n    this.thresholds = {\n      excellent: 90,\n      good: 75,\n      fair: 60,\n      poor: 40\n    };\n\n    this.analysisCache = new Map();\n  }\n\n  /**\n     * 执行质量分析\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @param {Object} options - 分析选项\n     * @returns {Object} 质量分析结果\n     */\n  analyzeQuality(content, language = 'javascript', options = {}) {\n    try {\n      const cacheKey = this.generateCacheKey(content, language, options);\n\n      // 检查缓存\n      if (this.analysisCache.has(cacheKey) && !options.forceRefresh) {\n        return {\n          success: true,\n          fromCache: true,\n          analysis: this.analysisCache.get(cacheKey),\n          timestamp: new Date().toISOString()\n        };\n      }\n\n      // 执行质量分析\n      const analysis = {\n        language: language,\n        overallScore: 0,\n        grade: '',\n        metrics: this.calculateQualityMetrics(content, language),\n        issues: this.identifyQualityIssues(content, language),\n        recommendations: this.generateRecommendations(content, language),\n        trends: this.analyzeTrends(content, language),\n        benchmarks: this.compareToBenchmarks(content, language)\n      };\n\n      // 计算总体评分\n      analysis.overallScore = this.calculateOverallScore(analysis.metrics);\n      analysis.grade = this.determineGrade(analysis.overallScore);\n\n      // 缓存结果\n      this.analysisCache.set(cacheKey, analysis);\n      this.cleanupCache();\n\n      return {\n        success: true,\n        fromCache: false,\n        analysis: analysis,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `质量分析失败: ${error.message}`,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  /**\n     * 计算质量指标\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @returns {Object} 质量指标\n     */\n  calculateQualityMetrics(content, language) {\n    const metrics = {};\n\n    // 可维护性指标\n    metrics.maintainability = {\n      score: 0,\n      details: {\n        complexity: this.analyzeMaintainabilityComplexity(content, language),\n        duplication: this.analyzeDuplication(content, language),\n        size: this.analyzeSize(content, language),\n        cohesion: this.analyzeCohesion(content, language)\n      }\n    };\n    metrics.maintainability.score = this.calculateCategoryScore(metrics.maintainability.details);\n\n    // 可靠性指标\n    metrics.reliability = {\n      score: 0,\n      details: {\n        testCoverage: this.analyzeTestCoverage(content, language),\n        errorHandling: this.analyzeErrorHandling(content, language),\n        nullChecks: this.analyzeNullChecks(content, language),\n        typeChecking: this.analyzeTypeChecking(content, language)\n      }\n    };\n    metrics.reliability.score = this.calculateCategoryScore(metrics.reliability.details);\n\n    // 安全性指标\n    metrics.security = {\n      score: 0,\n      details: {\n        inputValidation: this.analyzeInputValidation(content, language),\n        outputEncoding: this.analyzeOutputEncoding(content, language),\n        authentication: this.analyzeAuthentication(content, language),\n        authorization: this.analyzeAuthorization(content, language)\n      }\n    };\n    metrics.security.score = this.calculateCategoryScore(metrics.security.details);\n\n    // 性能指标\n    metrics.performance = {\n      score: 0,\n      details: {\n        algorithmComplexity: this.analyzeAlgorithmComplexity(content, language),\n        memoryUsage: this.analyzeMemoryUsage(content, language),\n        ioOperations: this.analyzeIOOperations(content, language),\n        caching: this.analyzeCaching(content, language)\n      }\n    };\n    metrics.performance.score = this.calculateCategoryScore(metrics.performance.details);\n\n    // 可读性指标\n    metrics.readability = {\n      score: 0,\n      details: {\n        naming: this.analyzeNaming(content, language),\n        comments: this.analyzeComments(content, language),\n        formatting: this.analyzeFormatting(content, language),\n        structure: this.analyzeStructure(content, language)\n      }\n    };\n    metrics.readability.score = this.calculateCategoryScore(metrics.readability.details);\n\n    return metrics;\n  }\n\n  /**\n     * 识别质量问题\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @returns {Array} 质量问题列表\n     */\n  identifyQualityIssues(content, language) {\n    const issues = [];\n\n    // 可维护性问题\n    issues.push(...this.findMaintainabilityIssues(content, language));\n\n    // 可靠性问题\n    issues.push(...this.findReliabilityIssues(content, language));\n\n    // 安全性问题\n    issues.push(...this.findSecurityIssues(content, language));\n\n    // 性能问题\n    issues.push(...this.findPerformanceIssues(content, language));\n\n    // 可读性问题\n    issues.push(...this.findReadabilityIssues(content, language));\n\n    // 按严重程度排序\n    return issues.sort((a, b) => {\n      const severityOrder = { 'critical': 5, 'high': 4, 'medium': 3, 'low': 2, 'info': 1 };\n      return severityOrder[b.severity] - severityOrder[a.severity];\n    });\n  }\n\n  /**\n     * 生成改进建议\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @returns {Array} 建议列表\n     */\n  generateRecommendations(content, language) {\n    const recommendations = [];\n    const lines = content.split('\\n');\n    const fileSize = lines.length;\n\n    // 基于文件大小的建议\n    if (fileSize > 500) {\n      recommendations.push({\n        category: 'maintainability',\n        priority: 'high',\n        title: '文件过大',\n        description: `文件有 ${fileSize} 行，建议拆分为更小的模块`,\n        action: '按功能职责拆分文件，每个文件不超过300行',\n        impact: '提高代码可维护性和可读性'\n      });\n    }\n\n    // 基于复杂度的建议\n    const complexity = this.calculateCyclomaticComplexity(content);\n    if (complexity > 15) {\n      recommendations.push({\n        category: 'maintainability',\n        priority: 'high',\n        title: '圈复杂度过高',\n        description: `代码圈复杂度为 ${complexity}，超过建议阈值15`,\n        action: '拆分复杂函数，使用早期返回，减少嵌套层次',\n        impact: '降低代码复杂度，提高可测试性'\n      });\n    }\n\n    // 基于重复代码的建议\n    const duplication = this.calculateDuplicationRatio(content);\n    if (duplication > 0.1) {\n      recommendations.push({\n        category: 'maintainability',\n        priority: 'medium',\n        title: '代码重复率过高',\n        description: `代码重复率为 ${(duplication * 100).toFixed(1)}%`,\n        action: '提取公共函数或类，消除重复代码',\n        impact: '减少维护成本，提高代码一致性'\n      });\n    }\n\n    // 基于注释的建议\n    const commentRatio = this.calculateCommentRatio(content, language);\n    if (commentRatio < 0.05) {\n      recommendations.push({\n        category: 'readability',\n        priority: 'low',\n        title: '注释不足',\n        description: `注释率仅为 ${(commentRatio * 100).toFixed(1)}%`,\n        action: '为复杂逻辑添加必要的注释说明',\n        impact: '提高代码可读性和可维护性'\n      });\n    } else if (commentRatio > 0.3) {\n      recommendations.push({\n        category: 'readability',\n        priority: 'low',\n        title: '注释过多',\n        description: `注释率高达 ${(commentRatio * 100).toFixed(1)}%`,\n        action: '移除冗余注释，让代码自解释',\n        impact: '减少维护负担，提高代码简洁性'\n      });\n    }\n\n    // 基于错误处理的建议\n    const errorHandling = this.analyzeErrorHandlingCoverage(content, language);\n    if (errorHandling < 0.5) {\n      recommendations.push({\n        category: 'reliability',\n        priority: 'high',\n        title: '错误处理不足',\n        description: `错误处理覆盖率仅为 ${(errorHandling * 100).toFixed(1)}%`,\n        action: '为可能失败的操作添加适当的错误处理',\n        impact: '提高程序健壮性和用户体验'\n      });\n    }\n\n    // 基于安全性的建议\n    const securityIssues = this.findBasicSecurityIssues(content, language);\n    if (securityIssues.length > 0) {\n      recommendations.push({\n        category: 'security',\n        priority: 'critical',\n        title: '安全漏洞',\n        description: `发现 ${securityIssues.length} 个潜在安全问题`,\n        action: '修复SQL注入、XSS等安全漏洞',\n        impact: '保护应用和用户数据安全'\n      });\n    }\n\n    return recommendations.sort((a, b) => {\n      const priorityOrder = { 'critical': 5, 'high': 4, 'medium': 3, 'low': 2, 'info': 1 };\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\n    });\n  }\n\n  /**\n     * 分析趋势\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @returns {Object} 趋势分析\n     */\n  analyzeTrends(content, language) {\n    return {\n      complexity: {\n        current: this.calculateCyclomaticComplexity(content),\n        trend: 'stable',\n        recommendation: 'maintain'\n      },\n      size: {\n        current: content.split('\\n').length,\n        trend: 'increasing',\n        recommendation: 'monitor'\n      },\n      quality: {\n        current: 75,\n        trend: 'improving',\n        recommendation: 'continue'\n      }\n    };\n  }\n\n  /**\n     * 与基准对比\n     * @param {string} content - 文件内容\n     * @param {string} language - 编程语言\n     * @returns {Object} 基准对比\n     */\n  compareToBenchmarks(content, language) {\n    const benchmarks = {\n      industry: {\n        complexity: 10,\n        duplication: 0.05,\n        testCoverage: 0.8,\n        commentRatio: 0.15\n      },\n      team: {\n        complexity: 12,\n        duplication: 0.08,\n        testCoverage: 0.75,\n        commentRatio: 0.12\n      }\n    };\n\n    const current = {\n      complexity: this.calculateCyclomaticComplexity(content),\n      duplication: this.calculateDuplicationRatio(content),\n      testCoverage: 0.6, // 模拟值\n      commentRatio: this.calculateCommentRatio(content, language)\n    };\n\n    return {\n      industry: this.compareMetrics(current, benchmarks.industry),\n      team: this.compareMetrics(current, benchmarks.team)\n    };\n  }\n\n  // 辅助方法实现\n  calculateOverallScore(metrics) {\n    let totalScore = 0;\n    let totalWeight = 0;\n\n    Object.keys(this.qualityMetrics).forEach(category => {\n      const weight = this.qualityMetrics[category].weight;\n      const score = metrics[category]?.score || 0;\n      totalScore += score * weight;\n      totalWeight += weight;\n    });\n\n    return totalWeight > 0 ? Math.round(totalScore / totalWeight) : 0;\n  }\n\n  determineGrade(score) {\n    if (score >= this.thresholds.excellent) {return 'A';}\n    if (score >= this.thresholds.good) {return 'B';}\n    if (score >= this.thresholds.fair) {return 'C';}\n    if (score >= this.thresholds.poor) {return 'D';}\n    return 'F';\n  }\n\n  calculateCategoryScore(details) {\n    const scores = Object.values(details).map(detail => detail.score || 0);\n    return scores.length > 0 ? Math.round(scores.reduce((sum, score) => sum + score, 0) / scores.length) : 0;\n  }\n\n  // 可维护性分析方法\n  analyzeMaintainabilityComplexity(content, language) {\n    const complexity = this.calculateCyclomaticComplexity(content);\n    let score = 100;\n\n    if (complexity > 20) {score = 20;}\n    else if (complexity > 15) {score = 40;}\n    else if (complexity > 10) {score = 60;}\n    else if (complexity > 5) {score = 80;}\n\n    return {\n      score: score,\n      value: complexity,\n      threshold: 10,\n      status: complexity <= 10 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeDuplication(content, language) {\n    const duplication = this.calculateDuplicationRatio(content);\n    let score = 100;\n\n    if (duplication > 0.2) {score = 20;}\n    else if (duplication > 0.15) {score = 40;}\n    else if (duplication > 0.1) {score = 60;}\n    else if (duplication > 0.05) {score = 80;}\n\n    return {\n      score: score,\n      value: duplication,\n      threshold: 0.05,\n      status: duplication <= 0.05 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeSize(content, language) {\n    const lines = content.split('\\n').length;\n    let score = 100;\n\n    if (lines > 1000) {score = 20;}\n    else if (lines > 500) {score = 40;}\n    else if (lines > 300) {score = 60;}\n    else if (lines > 200) {score = 80;}\n\n    return {\n      score: score,\n      value: lines,\n      threshold: 300,\n      status: lines <= 300 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeCohesion(content, language) {\n    // 简化的内聚性分析\n    const functions = this.extractFunctions(content, language);\n    const classes = this.extractClasses(content, language);\n\n    let score = 80; // 默认分数\n\n    // 基于函数和类的数量评估内聚性\n    if (functions.length > 20 || classes.length > 5) {\n      score = 60;\n    }\n\n    return {\n      score: score,\n      value: { functions: functions.length, classes: classes.length },\n      threshold: { functions: 15, classes: 3 },\n      status: score >= 70 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  // 可靠性分析方法\n  analyzeTestCoverage(content, language) {\n    // 模拟测试覆盖率分析\n    const hasTests = content.includes('test') || content.includes('spec') || content.includes('describe');\n    const score = hasTests ? 70 : 30;\n\n    return {\n      score: score,\n      value: hasTests ? 0.7 : 0.3,\n      threshold: 0.8,\n      status: score >= 60 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeErrorHandling(content, language) {\n    const errorPatterns = {\n      javascript: [/try\\s*{/, /catch\\s*\\(/, /throw\\s+/, /\\.catch\\s*\\(/],\n      python: [/try\\s*:/, /except\\s+/, /raise\\s+/, /finally\\s*:/],\n      java: [/try\\s*{/, /catch\\s*\\(/, /throw\\s+/, /throws\\s+/]\n    };\n\n    const patterns = errorPatterns[language] || errorPatterns.javascript;\n    const errorHandlingCount = patterns.reduce((count, pattern) => {\n      return count + (content.match(pattern) || []).length;\n    }, 0);\n\n    const lines = content.split('\\n').length;\n    const ratio = errorHandlingCount / (lines / 100); // 每100行的错误处理数量\n\n    const score = Math.min(100, ratio * 20);\n\n    return {\n      score: score,\n      value: errorHandlingCount,\n      threshold: 5,\n      status: score >= 60 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeNullChecks(content, language) {\n    const nullPatterns = {\n      javascript: [/!==\\s*null/, /===\\s*null/, /!=\\s*null/, /==\\s*null/, /\\?\\./],\n      python: [/is\\s+not\\s+None/, /is\\s+None/, /!=\\s*None/, /==\\s*None/],\n      java: [/!=\\s*null/, /==\\s*null/, /Objects\\.isNull/, /Objects\\.nonNull/]\n    };\n\n    const patterns = nullPatterns[language] || nullPatterns.javascript;\n    const nullCheckCount = patterns.reduce((count, pattern) => {\n      return count + (content.match(pattern) || []).length;\n    }, 0);\n\n    const score = Math.min(100, nullCheckCount * 10);\n\n    return {\n      score: score,\n      value: nullCheckCount,\n      threshold: 3,\n      status: score >= 50 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeTypeChecking(content, language) {\n    const typePatterns = {\n      javascript: [/typeof\\s+/, /instanceof\\s+/, /Array\\.isArray/, /:\\s*\\w+\\s*[=;]/],\n      python: [/isinstance\\s*\\(/, /type\\s*\\(/, /:\\s*\\w+\\s*[=]/],\n      java: [/instanceof\\s+/, /\\.getClass\\s*\\(/, /:\\s*\\w+\\s*[=;]/]\n    };\n\n    const patterns = typePatterns[language] || typePatterns.javascript;\n    const typeCheckCount = patterns.reduce((count, pattern) => {\n      return count + (content.match(pattern) || []).length;\n    }, 0);\n\n    const score = Math.min(100, typeCheckCount * 15);\n\n    return {\n      score: score,\n      value: typeCheckCount,\n      threshold: 2,\n      status: score >= 50 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  // 安全性分析方法（简化实现）\n  analyzeInputValidation(content, language) {\n    const validationPatterns = [/validate/, /sanitize/, /escape/, /filter/];\n    const validationCount = validationPatterns.reduce((count, pattern) => {\n      return count + (content.match(pattern) || []).length;\n    }, 0);\n\n    const score = Math.min(100, validationCount * 20);\n\n    return {\n      score: score,\n      value: validationCount,\n      threshold: 2,\n      status: score >= 60 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeOutputEncoding(content, language) {\n    const encodingPatterns = [/encode/, /escape/, /htmlspecialchars/, /encodeURIComponent/];\n    const encodingCount = encodingPatterns.reduce((count, pattern) => {\n      return count + (content.match(pattern) || []).length;\n    }, 0);\n\n    const score = Math.min(100, encodingCount * 25);\n\n    return {\n      score: score,\n      value: encodingCount,\n      threshold: 1,\n      status: score >= 50 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeAuthentication(content, language) {\n    const authPatterns = [/auth/, /login/, /password/, /token/, /session/];\n    const authCount = authPatterns.reduce((count, pattern) => {\n      return count + (content.match(pattern) || []).length;\n    }, 0);\n\n    const score = authCount > 0 ? 70 : 90; // 如果没有认证相关代码，可能是好事\n\n    return {\n      score: score,\n      value: authCount,\n      threshold: 0,\n      status: 'good'\n    };\n  }\n\n  analyzeAuthorization(content, language) {\n    const authzPatterns = [/permission/, /role/, /access/, /authorize/, /canAccess/];\n    const authzCount = authzPatterns.reduce((count, pattern) => {\n      return count + (content.match(pattern) || []).length;\n    }, 0);\n\n    const score = authzCount > 0 ? 70 : 90;\n\n    return {\n      score: score,\n      value: authzCount,\n      threshold: 0,\n      status: 'good'\n    };\n  }\n\n  // 性能分析方法（简化实现）\n  analyzeAlgorithmComplexity(content, language) {\n    const nestedLoops = (content.match(/for\\s*\\([^}]*for\\s*\\(/g) || []).length;\n    const recursion = (content.match(/function\\s+\\w+[^}]*\\1\\s*\\(/g) || []).length;\n\n    let score = 100;\n    if (nestedLoops > 2) {score = 40;}\n    else if (nestedLoops > 0) {score = 70;}\n    if (recursion > 3) {score = Math.min(score, 50);}\n\n    return {\n      score: score,\n      value: { nestedLoops, recursion },\n      threshold: { nestedLoops: 1, recursion: 2 },\n      status: score >= 70 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeMemoryUsage(content, language) {\n    const memoryPatterns = [/new\\s+/, /malloc/, /alloc/, /Array\\s*\\(/, /Object\\s*\\(/];\n    const allocations = memoryPatterns.reduce((count, pattern) => {\n      return count + (content.match(pattern) || []).length;\n    }, 0);\n\n    const lines = content.split('\\n').length;\n    const ratio = allocations / lines;\n\n    let score = 100;\n    if (ratio > 0.1) {score = 40;}\n    else if (ratio > 0.05) {score = 70;}\n\n    return {\n      score: score,\n      value: allocations,\n      threshold: lines * 0.05,\n      status: score >= 70 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeIOOperations(content, language) {\n    const ioPatterns = [/fs\\./, /file/, /read/, /write/, /fetch/, /axios/, /request/];\n    const ioCount = ioPatterns.reduce((count, pattern) => {\n      return count + (content.match(pattern) || []).length;\n    }, 0);\n\n    const asyncPatterns = [/async/, /await/, /Promise/, /then/, /catch/];\n    const asyncCount = asyncPatterns.reduce((count, pattern) => {\n      return count + (content.match(pattern) || []).length;\n    }, 0);\n\n    const score = ioCount > 0 ? Math.min(100, (asyncCount / ioCount) * 100) : 100;\n\n    return {\n      score: score,\n      value: { io: ioCount, async: asyncCount },\n      threshold: { asyncRatio: 0.8 },\n      status: score >= 70 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeCaching(content, language) {\n    const cachePatterns = [/cache/, /memoize/, /store/, /redis/, /memcached/];\n    const cacheCount = cachePatterns.reduce((count, pattern) => {\n      return count + (content.match(pattern) || []).length;\n    }, 0);\n\n    const score = cacheCount > 0 ? 80 : 60;\n\n    return {\n      score: score,\n      value: cacheCount,\n      threshold: 1,\n      status: score >= 70 ? 'good' : 'fair'\n    };\n  }\n\n  // 可读性分析方法（简化实现）\n  analyzeNaming(content, language) {\n    const lines = content.split('\\n');\n    let goodNames = 0;\n    let totalNames = 0;\n\n    const namePattern = /(?:var|let|const|function)\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)/g;\n    let match;\n\n    while ((match = namePattern.exec(content)) !== null) {\n      totalNames++;\n      const name = match[1];\n\n      // 简单的命名质量检查\n      if (name.length > 3 && !name.match(/^[a-z]+$/)) {\n        goodNames++;\n      }\n    }\n\n    const score = totalNames > 0 ? Math.round((goodNames / totalNames) * 100) : 80;\n\n    return {\n      score: score,\n      value: { good: goodNames, total: totalNames },\n      threshold: 0.8,\n      status: score >= 70 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeComments(content, language) {\n    const commentRatio = this.calculateCommentRatio(content, language);\n    let score = 100;\n\n    if (commentRatio < 0.05) {score = 40;}\n    else if (commentRatio < 0.1) {score = 60;}\n    else if (commentRatio > 0.3) {score = 50;}\n    else if (commentRatio > 0.2) {score = 70;}\n\n    return {\n      score: score,\n      value: commentRatio,\n      threshold: { min: 0.1, max: 0.2 },\n      status: score >= 70 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeFormatting(content, language) {\n    const lines = content.split('\\n');\n    let wellFormatted = 0;\n\n    lines.forEach(line => {\n      // 简单的格式检查\n      if (line.trim().length === 0 || // 空行\n                line.match(/^\\s*[a-zA-Z]/) || // 正确缩进\n                line.match(/^\\s*[{}\\[\\]]\\s*$/) // 括号行\n      ) {\n        wellFormatted++;\n      }\n    });\n\n    const score = lines.length > 0 ? Math.round((wellFormatted / lines.length) * 100) : 80;\n\n    return {\n      score: score,\n      value: { formatted: wellFormatted, total: lines.length },\n      threshold: 0.8,\n      status: score >= 70 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  analyzeStructure(content, language) {\n    const functions = this.extractFunctions(content, language);\n    const classes = this.extractClasses(content, language);\n\n    let score = 80;\n\n    // 检查结构合理性\n    if (functions.length > 20) {score -= 20;}\n    if (classes.length > 5) {score -= 10;}\n\n    return {\n      score: Math.max(0, score),\n      value: { functions: functions.length, classes: classes.length },\n      threshold: { functions: 15, classes: 3 },\n      status: score >= 70 ? 'good' : 'needs_improvement'\n    };\n  }\n\n  // 问题查找方法（简化实现）\n  findMaintainabilityIssues(content, language) {\n    const issues = [];\n\n    // 检查大型函数\n    const functions = this.extractFunctions(content, language);\n    functions.forEach(func => {\n      if (func.length > 50) {\n        issues.push({\n          category: 'maintainability',\n          type: 'large_function',\n          severity: 'medium',\n          message: `函数 '${func.name}' 过长 (${func.length} 行)`,\n          line: func.startLine,\n          suggestion: '拆分为更小的函数'\n        });\n      }\n    });\n\n    return issues;\n  }\n\n  findReliabilityIssues(content, language) {\n    const issues = [];\n\n    // 检查缺少错误处理\n    const lines = content.split('\\n');\n    lines.forEach((line, index) => {\n      if (line.includes('JSON.parse') && !content.includes('try')) {\n        issues.push({\n          category: 'reliability',\n          type: 'missing_error_handling',\n          severity: 'high',\n          message: 'JSON.parse 缺少错误处理',\n          line: index + 1,\n          suggestion: '使用 try-catch 包装 JSON.parse'\n        });\n      }\n    });\n\n    return issues;\n  }\n\n  findSecurityIssues(content, language) {\n    const issues = [];\n\n    // 检查潜在的SQL注入\n    if (content.includes('SELECT') && content.includes('+')) {\n      issues.push({\n        category: 'security',\n        type: 'sql_injection',\n        severity: 'critical',\n        message: '潜在的SQL注入风险',\n        line: 0,\n        suggestion: '使用参数化查询'\n      });\n    }\n\n    return issues;\n  }\n\n  findPerformanceIssues(content, language) {\n    const issues = [];\n\n    // 检查嵌套循环\n    const nestedLoops = content.match(/for\\s*\\([^}]*for\\s*\\(/g);\n    if (nestedLoops && nestedLoops.length > 0) {\n      issues.push({\n        category: 'performance',\n        type: 'nested_loops',\n        severity: 'medium',\n        message: '嵌套循环可能影响性能',\n        line: 0,\n        suggestion: '考虑优化算法复杂度'\n      });\n    }\n\n    return issues;\n  }\n\n  findReadabilityIssues(content, language) {\n    const issues = [];\n\n    // 检查长行\n    const lines = content.split('\\n');\n    lines.forEach((line, index) => {\n      if (line.length > 120) {\n        issues.push({\n          category: 'readability',\n          type: 'long_line',\n          severity: 'low',\n          message: `行过长 (${line.length} 字符)`,\n          line: index + 1,\n          suggestion: '拆分长行，提高可读性'\n        });\n      }\n    });\n\n    return issues;\n  }\n\n  // 工具方法\n  calculateCyclomaticComplexity(content) {\n    const complexityPatterns = [\n      /\\bif\\b/g, /\\belse\\b/g, /\\bwhile\\b/g, /\\bfor\\b/g,\n      /\\bcase\\b/g, /\\bcatch\\b/g, /&&/g, /\\|\\|/g\n    ];\n\n    let complexity = 1;\n    complexityPatterns.forEach(pattern => {\n      const matches = content.match(pattern) || [];\n      complexity += matches.length;\n    });\n\n    return complexity;\n  }\n\n  calculateDuplicationRatio(content) {\n    const lines = content.split('\\n').filter(line => line.trim().length > 0);\n    const lineHashes = new Map();\n    let duplicateLines = 0;\n\n    lines.forEach(line => {\n      const hash = this.simpleHash(line.trim());\n      if (lineHashes.has(hash)) {\n        duplicateLines++;\n      } else {\n        lineHashes.set(hash, 1);\n      }\n    });\n\n    return lines.length > 0 ? duplicateLines / lines.length : 0;\n  }\n\n  calculateCommentRatio(content, language) {\n    const commentPatterns = {\n      javascript: [/\\/\\/.*$/gm, /\\/\\*[\\s\\S]*?\\*\\//gm],\n      python: [/#.*$/gm, /\"\"\"[\\s\\S]*?\"\"\"/gm],\n      java: [/\\/\\/.*$/gm, /\\/\\*[\\s\\S]*?\\*\\//gm]\n    };\n\n    const patterns = commentPatterns[language] || commentPatterns.javascript;\n    let commentChars = 0;\n\n    patterns.forEach(pattern => {\n      const matches = content.match(pattern) || [];\n      commentChars += matches.reduce((sum, match) => sum + match.length, 0);\n    });\n\n    return content.length > 0 ? commentChars / content.length : 0;\n  }\n\n  analyzeErrorHandlingCoverage(content, language) {\n    const errorPatterns = {\n      javascript: [/try\\s*{/, /catch\\s*\\(/],\n      python: [/try\\s*:/, /except\\s+/],\n      java: [/try\\s*{/, /catch\\s*\\(/]\n    };\n\n    const patterns = errorPatterns[language] || errorPatterns.javascript;\n    const errorHandlingCount = patterns.reduce((count, pattern) => {\n      return count + (content.match(pattern) || []).length;\n    }, 0);\n\n    const riskyOperations = [\n      /JSON\\.parse/, /parseInt/, /parseFloat/, /fetch/, /axios/,\n      /fs\\./, /require/, /import/, /eval/\n    ];\n\n    const riskyCount = riskyOperations.reduce((count, pattern) => {\n      return count + (content.match(pattern) || []).length;\n    }, 0);\n\n    return riskyCount > 0 ? errorHandlingCount / riskyCount : 1;\n  }\n\n  findBasicSecurityIssues(content, language) {\n    const issues = [];\n\n    // 检查常见安全问题\n    const securityPatterns = [\n      { pattern: /eval\\s*\\(/, issue: 'eval usage' },\n      { pattern: /innerHTML\\s*=/, issue: 'innerHTML assignment' },\n      { pattern: /document\\.write/, issue: 'document.write usage' },\n      { pattern: /\\$\\{[^}]*\\}/, issue: 'template literal injection risk' }\n    ];\n\n    securityPatterns.forEach(({ pattern, issue }) => {\n      if (pattern.test(content)) {\n        issues.push(issue);\n      }\n    });\n\n    return issues;\n  }\n\n  extractFunctions(content, language) {\n    const functions = [];\n    const functionPattern = /function\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\(/g;\n    let match;\n\n    while ((match = functionPattern.exec(content)) !== null) {\n      const startLine = content.substring(0, match.index).split('\\n').length;\n      functions.push({\n        name: match[1],\n        startLine: startLine,\n        length: 20 // 简化实现\n      });\n    }\n\n    return functions;\n  }\n\n  extractClasses(content, language) {\n    const classes = [];\n    const classPattern = /class\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*{/g;\n    let match;\n\n    while ((match = classPattern.exec(content)) !== null) {\n      const startLine = content.substring(0, match.index).split('\\n').length;\n      classes.push({\n        name: match[1],\n        startLine: startLine,\n        length: 50 // 简化实现\n      });\n    }\n\n    return classes;\n  }\n\n  compareMetrics(current, benchmark) {\n    const comparison = {};\n\n    Object.keys(benchmark).forEach(key => {\n      const currentValue = current[key] || 0;\n      const benchmarkValue = benchmark[key];\n      const ratio = benchmarkValue > 0 ? currentValue / benchmarkValue : 1;\n\n      comparison[key] = {\n        current: currentValue,\n        benchmark: benchmarkValue,\n        ratio: ratio,\n        status: ratio <= 1.1 ? 'good' : ratio <= 1.5 ? 'fair' : 'poor'\n      };\n    });\n\n    return comparison;\n  }\n\n  generateCacheKey(content, language, options) {\n    const contentHash = this.simpleHash(content);\n    const optionsHash = this.simpleHash(JSON.stringify(options));\n    return `quality_${language}_${contentHash}_${optionsHash}`;\n  }\n\n  simpleHash(str) {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash;\n    }\n    return Math.abs(hash).toString(36);\n  }\n\n  cleanupCache() {\n    if (this.analysisCache.size > 50) {\n      const entries = Array.from(this.analysisCache.entries());\n      const toDelete = entries.slice(0, 25);\n      toDelete.forEach(([key]) => this.analysisCache.delete(key));\n    }\n  }\n}\n\n// 导出类\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = QualityAnalyzer;\n} else if (typeof window !== 'undefined') {\n  window.QualityAnalyzer = QualityAnalyzer;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\analyzers\\ReportGenerator.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":286,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":286,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":309,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":309,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":332,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":332,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":349,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":349,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":365,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":365,"endColumn":47},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":381,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":381,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":397,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":397,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":413,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":413,"endColumn":41},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":439,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":439,"endColumn":50},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":466,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":466,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":495,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":495,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":513,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":513,"endColumn":49},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":530,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":530,"endColumn":46},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":556,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":556,"endColumn":52},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":577,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":577,"endColumn":46},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":597,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":597,"endColumn":47},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":614,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":614,"endColumn":46},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":632,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":632,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":651,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":651,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":865,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":865,"endColumn":46},{"ruleId":"no-unused-vars","severity":2,"message":"'reportData' is defined but never used. Allowed unused args must match /^_/u.","line":875,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":875,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":875,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":875,"endColumn":45},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 19.","line":910,"column":57,"nodeType":"Literal","messageId":"noMagic","endLine":910,"endColumn":59},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":989,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":989,"endColumn":37},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":1032,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":1032,"endColumn":35},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":1033,"column":32,"nodeType":"Literal","messageId":"noMagic","endLine":1033,"endColumn":34},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":1091,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":1091,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'total' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1256,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":1256,"endColumn":14},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":1281,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":1281,"endColumn":38},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 70.","line":1303,"column":64,"nodeType":"Literal","messageId":"noMagic","endLine":1303,"endColumn":66},{"ruleId":"no-unused-vars","severity":2,"message":"'analysis' is defined but never used. Allowed unused args must match /^_/u.","line":1345,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":1345,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used. Allowed unused args must match /^_/u.","line":1631,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":1631,"endColumn":54}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 报告生成器 - 负责生成各种格式的代码分析报告\n * 符合单一职责原则：专门处理报告生成、格式化、导出等功能\n */\nclass ReportGenerator {\n  constructor() {\n    this.reportTemplates = {\n      summary: {\n        name: '摘要报告',\n        description: '项目概览和关键指标',\n        sections: ['overview', 'metrics', 'highlights', 'recommendations']\n      },\n      detailed: {\n        name: '详细报告',\n        description: '完整的分析结果和建议',\n        sections: ['overview', 'structure', 'dependencies', 'quality', 'security', 'issues', 'recommendations']\n      },\n      executive: {\n        name: '管理层报告',\n        description: '面向管理层的高层次总结',\n        sections: ['executive_summary', 'key_metrics', 'risk_assessment', 'action_items']\n      },\n      technical: {\n        name: '技术报告',\n        description: '面向开发团队的技术细节',\n        sections: ['technical_analysis', 'code_metrics', 'architecture', 'performance', 'best_practices']\n      }\n    };\n\n    this.outputFormats = {\n      html: {\n        name: 'HTML报告',\n        extension: '.html',\n        mimeType: 'text/html',\n        supportsCharts: true,\n        supportsInteractivity: true\n      },\n      markdown: {\n        name: 'Markdown报告',\n        extension: '.md',\n        mimeType: 'text/markdown',\n        supportsCharts: false,\n        supportsInteractivity: false\n      },\n      json: {\n        name: 'JSON数据',\n        extension: '.json',\n        mimeType: 'application/json',\n        supportsCharts: false,\n        supportsInteractivity: false\n      },\n      pdf: {\n        name: 'PDF报告',\n        extension: '.pdf',\n        mimeType: 'application/pdf',\n        supportsCharts: true,\n        supportsInteractivity: false\n      }\n    };\n\n    this.chartConfig = {\n      colors: {\n        primary: '#2563eb',\n        secondary: '#64748b',\n        success: '#10b981',\n        warning: '#f59e0b',\n        danger: '#ef4444',\n        info: '#06b6d4'\n      },\n      themes: {\n        light: {\n          background: '#ffffff',\n          text: '#1f2937',\n          border: '#e5e7eb'\n        },\n        dark: {\n          background: '#1f2937',\n          text: '#f9fafb',\n          border: '#374151'\n        }\n      }\n    };\n\n    this.reportCache = new Map();\n    this.generationHistory = [];\n  }\n\n  /**\n     * 生成分析报告\n     * @param {Object} analysisResult - 分析结果\n     * @param {Object} options - 生成选项\n     * @returns {Object} 生成的报告\n     */\n  async generateReport(analysisResult, options = {}) {\n    try {\n      const startTime = Date.now();\n\n      // 验证输入\n      if (!analysisResult || !analysisResult.success) {\n        throw new Error('无效的分析结果');\n      }\n\n      // 设置默认选项\n      const config = {\n        template: options.template || 'detailed',\n        format: options.format || 'html',\n        theme: options.theme || 'light',\n        includeCharts: options.includeCharts !== false,\n        includeRawData: options.includeRawData || false,\n        language: options.language || 'zh-CN',\n        title: options.title || '代码分析报告',\n        author: options.author || 'Code Analyzer',\n        timestamp: new Date().toISOString(),\n        ...options\n      };\n\n      // 检查缓存\n      const cacheKey = this.generateCacheKey(analysisResult, config);\n      if (this.reportCache.has(cacheKey) && !config.forceRegenerate) {\n        return this.reportCache.get(cacheKey);\n      }\n\n      // 生成报告内容\n      const reportData = await this.prepareReportData(analysisResult.analysis, config);\n\n      // 根据格式生成报告\n      let reportContent;\n      switch (config.format) {\n      case 'html':\n        reportContent = await this.generateHtmlReport(reportData, config);\n        break;\n      case 'markdown':\n        reportContent = await this.generateMarkdownReport(reportData, config);\n        break;\n      case 'json':\n        reportContent = await this.generateJsonReport(reportData, config);\n        break;\n      case 'pdf':\n        reportContent = await this.generatePdfReport(reportData, config);\n        break;\n      default:\n        throw new Error(`不支持的报告格式: ${config.format}`);\n      }\n\n      const report = {\n        success: true,\n        config: config,\n        content: reportContent,\n        metadata: {\n          generatedAt: config.timestamp,\n          generationTime: Date.now() - startTime,\n          template: config.template,\n          format: config.format,\n          size: this.calculateReportSize(reportContent),\n          checksum: this.calculateChecksum(reportContent)\n        },\n        downloadInfo: {\n          filename: this.generateFilename(config),\n          mimeType: this.outputFormats[config.format].mimeType,\n          extension: this.outputFormats[config.format].extension\n        }\n      };\n\n      // 缓存报告\n      this.reportCache.set(cacheKey, report);\n\n      // 记录生成历史\n      this.generationHistory.push({\n        timestamp: config.timestamp,\n        template: config.template,\n        format: config.format,\n        size: report.metadata.size,\n        generationTime: report.metadata.generationTime\n      });\n\n      return report;\n    } catch (error) {\n      return {\n        success: false,\n        error: `报告生成失败: ${error.message}`,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  /**\n     * 准备报告数据\n     * @param {Object} analysis - 分析数据\n     * @param {Object} config - 配置\n     * @returns {Object} 准备好的报告数据\n     */\n  async prepareReportData(analysis, config) {\n    const template = this.reportTemplates[config.template];\n    if (!template) {\n      throw new Error(`未知的报告模板: ${config.template}`);\n    }\n\n    const reportData = {\n      metadata: {\n        title: config.title,\n        author: config.author,\n        generatedAt: config.timestamp,\n        template: template.name,\n        description: template.description,\n        projectPath: analysis.projectPath,\n        scanTime: analysis.scanTime\n      },\n      sections: {}\n    };\n\n    // 根据模板生成各个部分\n    for (const sectionName of template.sections) {\n      reportData.sections[sectionName] = await this.generateSection(sectionName, analysis, config);\n    }\n\n    // 生成图表数据\n    if (config.includeCharts) {\n      reportData.charts = await this.generateChartData(analysis, config);\n    }\n\n    // 包含原始数据\n    if (config.includeRawData) {\n      reportData.rawData = analysis;\n    }\n\n    return reportData;\n  }\n\n  /**\n     * 生成报告部分\n     * @param {string} sectionName - 部分名称\n     * @param {Object} analysis - 分析数据\n     * @param {Object} config - 配置\n     * @returns {Object} 部分内容\n     */\n  async generateSection(sectionName, analysis, config) {\n    switch (sectionName) {\n    case 'overview':\n      return this.generateOverviewSection(analysis, config);\n    case 'metrics':\n      return this.generateMetricsSection(analysis, config);\n    case 'highlights':\n      return this.generateHighlightsSection(analysis, config);\n    case 'structure':\n      return this.generateStructureSection(analysis, config);\n    case 'dependencies':\n      return this.generateDependenciesSection(analysis, config);\n    case 'quality':\n      return this.generateQualitySection(analysis, config);\n    case 'security':\n      return this.generateSecuritySection(analysis, config);\n    case 'issues':\n      return this.generateIssuesSection(analysis, config);\n    case 'recommendations':\n      return this.generateRecommendationsSection(analysis, config);\n    case 'executive_summary':\n      return this.generateExecutiveSummarySection(analysis, config);\n    case 'key_metrics':\n      return this.generateKeyMetricsSection(analysis, config);\n    case 'risk_assessment':\n      return this.generateRiskAssessmentSection(analysis, config);\n    case 'action_items':\n      return this.generateActionItemsSection(analysis, config);\n    case 'technical_analysis':\n      return this.generateTechnicalAnalysisSection(analysis, config);\n    case 'code_metrics':\n      return this.generateCodeMetricsSection(analysis, config);\n    case 'architecture':\n      return this.generateArchitectureSection(analysis, config);\n    case 'performance':\n      return this.generatePerformanceSection(analysis, config);\n    case 'best_practices':\n      return this.generateBestPracticesSection(analysis, config);\n    default:\n      return {\n        title: sectionName,\n        content: '该部分内容暂未实现',\n        status: 'placeholder'\n      };\n    }\n  }\n\n  /**\n     * 生成概览部分\n     */\n  generateOverviewSection(analysis, config) {\n    return {\n      title: '项目概览',\n      content: {\n        summary: analysis.summary,\n        basicInfo: {\n          projectPath: analysis.projectPath,\n          scanTime: analysis.scanTime,\n          fileCount: analysis.fileCount,\n          directoryCount: analysis.directoryCount,\n          overallScore: analysis.overallScore,\n          grade: analysis.grade\n        },\n        languageDistribution: analysis.summary.statistics.languageDistribution,\n        projectHealth: analysis.summary.health\n      },\n      status: 'complete'\n    };\n  }\n\n  /**\n     * 生成指标部分\n     */\n  generateMetricsSection(analysis, config) {\n    return {\n      title: '关键指标',\n      content: {\n        size: analysis.metrics.size,\n        complexity: analysis.metrics.complexity,\n        dependencies: analysis.metrics.dependencies,\n        quality: analysis.metrics.quality,\n        scoreBreakdown: {\n          structure: analysis.structure.score,\n          dependencies: analysis.dependencies.score,\n          maintainability: analysis.maintainability.score,\n          quality: analysis.quality.score,\n          security: analysis.security.score\n        }\n      },\n      status: 'complete'\n    };\n  }\n\n  /**\n     * 生成亮点部分\n     */\n  generateHighlightsSection(analysis, config) {\n    return {\n      title: '项目亮点',\n      content: {\n        strengths: analysis.summary.highlights.strengths,\n        weaknesses: analysis.summary.highlights.weaknesses,\n        opportunities: analysis.summary.highlights.opportunities,\n        topIssues: this.getTopIssues(analysis),\n        topRecommendations: this.getTopRecommendations(analysis)\n      },\n      status: 'complete'\n    };\n  }\n\n  /**\n     * 生成结构部分\n     */\n  generateStructureSection(analysis, config) {\n    return {\n      title: '项目结构分析',\n      content: {\n        score: analysis.structure.score,\n        details: analysis.structure.details,\n        issues: analysis.structure.issues,\n        recommendations: analysis.structure.recommendations\n      },\n      status: 'complete'\n    };\n  }\n\n  /**\n     * 生成依赖部分\n     */\n  generateDependenciesSection(analysis, config) {\n    return {\n      title: '依赖关系分析',\n      content: {\n        score: analysis.dependencies.score,\n        details: analysis.dependencies.details,\n        issues: analysis.dependencies.issues,\n        recommendations: analysis.dependencies.recommendations\n      },\n      status: 'complete'\n    };\n  }\n\n  /**\n     * 生成质量部分\n     */\n  generateQualitySection(analysis, config) {\n    return {\n      title: '代码质量分析',\n      content: {\n        score: analysis.quality.score,\n        details: analysis.quality.details,\n        issues: analysis.quality.issues,\n        recommendations: analysis.quality.recommendations\n      },\n      status: 'complete'\n    };\n  }\n\n  /**\n     * 生成安全部分\n     */\n  generateSecuritySection(analysis, config) {\n    return {\n      title: '安全性分析',\n      content: {\n        score: analysis.security.score,\n        details: analysis.security.details,\n        issues: analysis.security.issues,\n        recommendations: analysis.security.recommendations\n      },\n      status: 'complete'\n    };\n  }\n\n  /**\n     * 生成问题部分\n     */\n  generateIssuesSection(analysis, config) {\n    const allIssues = [\n      ...analysis.structure.issues,\n      ...analysis.dependencies.issues,\n      ...analysis.maintainability.issues,\n      ...analysis.quality.issues,\n      ...analysis.security.issues\n    ];\n\n    return {\n      title: '问题汇总',\n      content: {\n        totalIssues: allIssues.length,\n        issuesByCategory: this.groupIssuesByCategory(allIssues),\n        issuesBySeverity: this.groupIssuesBySeverity(allIssues),\n        criticalIssues: allIssues.filter(issue => issue.severity === 'critical'),\n        highPriorityIssues: allIssues.filter(issue => issue.severity === 'high'),\n        allIssues: allIssues\n      },\n      status: 'complete'\n    };\n  }\n\n  /**\n     * 生成建议部分\n     */\n  generateRecommendationsSection(analysis, config) {\n    const allRecommendations = [\n      ...analysis.structure.recommendations,\n      ...analysis.dependencies.recommendations,\n      ...analysis.maintainability.recommendations,\n      ...analysis.quality.recommendations,\n      ...analysis.security.recommendations,\n      ...analysis.recommendations\n    ];\n\n    return {\n      title: '改进建议',\n      content: {\n        totalRecommendations: allRecommendations.length,\n        recommendationsByCategory: this.groupRecommendationsByCategory(allRecommendations),\n        recommendationsByPriority: this.groupRecommendationsByPriority(allRecommendations),\n        quickWins: allRecommendations.filter(rec => rec.priority === 'high' && rec.impact),\n        longTermGoals: allRecommendations.filter(rec => rec.priority === 'medium' || rec.priority === 'low'),\n        allRecommendations: allRecommendations\n      },\n      status: 'complete'\n    };\n  }\n\n  /**\n     * 生成管理层摘要部分\n     */\n  generateExecutiveSummarySection(analysis, config) {\n    return {\n      title: '管理层摘要',\n      content: {\n        projectOverview: {\n          name: analysis.projectPath.split('/').pop(),\n          size: `${analysis.fileCount} 个文件`,\n          complexity: analysis.summary.health.complexity,\n          overallHealth: analysis.summary.health.overallHealth,\n          grade: analysis.grade\n        },\n        keyFindings: {\n          strengths: analysis.summary.highlights.strengths.slice(0, 3),\n          risks: this.identifyKeyRisks(analysis),\n          opportunities: analysis.summary.highlights.opportunities.slice(0, 3)\n        },\n        businessImpact: {\n          maintainabilityCost: this.estimateMaintainabilityCost(analysis),\n          technicalDebt: this.estimateTechnicalDebt(analysis),\n          riskLevel: this.assessOverallRisk(analysis)\n        }\n      },\n      status: 'complete'\n    };\n  }\n\n  /**\n     * 生成关键指标部分\n     */\n  generateKeyMetricsSection(analysis, config) {\n    return {\n      title: '关键指标',\n      content: {\n        qualityScore: analysis.overallScore,\n        complexityIndex: analysis.metrics.complexity.average,\n        maintainabilityIndex: analysis.maintainability.score,\n        securityScore: analysis.security.score,\n        testCoverage: analysis.quality.details.coverage.coverage * 100,\n        technicalDebtRatio: this.calculateTechnicalDebtRatio(analysis)\n      },\n      status: 'complete'\n    };\n  }\n\n  /**\n     * 生成风险评估部分\n     */\n  generateRiskAssessmentSection(analysis, config) {\n    return {\n      title: '风险评估',\n      content: {\n        overallRisk: this.assessOverallRisk(analysis),\n        riskFactors: this.identifyRiskFactors(analysis),\n        securityRisks: analysis.security.issues.filter(issue => issue.severity === 'high' || issue.severity === 'critical'),\n        qualityRisks: analysis.quality.issues.filter(issue => issue.severity === 'high'),\n        mitigationStrategies: this.generateMitigationStrategies(analysis)\n      },\n      status: 'complete'\n    };\n  }\n\n  /**\n     * 生成行动项部分\n     */\n  generateActionItemsSection(analysis, config) {\n    const allRecommendations = [\n      ...analysis.structure.recommendations,\n      ...analysis.dependencies.recommendations,\n      ...analysis.maintainability.recommendations,\n      ...analysis.quality.recommendations,\n      ...analysis.security.recommendations,\n      ...analysis.recommendations\n    ];\n\n    return {\n      title: '行动项',\n      content: {\n        immediate: allRecommendations.filter(rec => rec.priority === 'critical' || rec.priority === 'high'),\n        shortTerm: allRecommendations.filter(rec => rec.priority === 'medium'),\n        longTerm: allRecommendations.filter(rec => rec.priority === 'low'),\n        resourceRequirements: this.estimateResourceRequirements(allRecommendations),\n        timeline: this.generateTimeline(allRecommendations)\n      },\n      status: 'complete'\n    };\n  }\n\n  /**\n     * 生成技术分析部分\n     */\n  generateTechnicalAnalysisSection(analysis, config) {\n    return {\n      title: '技术分析',\n      content: {\n        architecture: analysis.structure,\n        codeMetrics: analysis.metrics,\n        dependencyAnalysis: analysis.dependencies,\n        performanceIndicators: {\n          averageFileSize: analysis.metrics.size.averageFileSize,\n          averageComplexity: analysis.metrics.complexity.average,\n          couplingIndex: analysis.dependencies.details.coupling.averageCoupling\n        },\n        technicalDebt: this.analyzeTechnicalDebt(analysis)\n      },\n      status: 'complete'\n    };\n  }\n\n  /**\n     * 生成代码指标部分\n     */\n  generateCodeMetricsSection(analysis, config) {\n    return {\n      title: '代码指标',\n      content: {\n        size: analysis.metrics.size,\n        complexity: analysis.metrics.complexity,\n        quality: analysis.metrics.quality,\n        maintainability: {\n          score: analysis.maintainability.score,\n          factors: analysis.maintainability.details\n        },\n        trends: this.generateMetricTrends(analysis)\n      },\n      status: 'complete'\n    };\n  }\n\n  /**\n     * 生成架构部分\n     */\n  generateArchitectureSection(analysis, config) {\n    return {\n      title: '架构分析',\n      content: {\n        structure: analysis.structure.details,\n        dependencies: analysis.dependencies.details,\n        modularity: analysis.maintainability.details.modularity,\n        layering: this.analyzeLayering(analysis),\n        patterns: this.identifyArchitecturalPatterns(analysis)\n      },\n      status: 'complete'\n    };\n  }\n\n  /**\n     * 生成性能部分\n     */\n  generatePerformanceSection(analysis, config) {\n    return {\n      title: '性能分析',\n      content: {\n        analysisPerformance: analysis.performance,\n        codePerformance: {\n          complexity: analysis.metrics.complexity,\n          efficiency: this.estimateCodeEfficiency(analysis)\n        },\n        recommendations: this.generatePerformanceRecommendations(analysis)\n      },\n      status: 'complete'\n    };\n  }\n\n  /**\n     * 生成最佳实践部分\n     */\n  generateBestPracticesSection(analysis, config) {\n    return {\n      title: '最佳实践',\n      content: {\n        adherence: this.assessBestPracticeAdherence(analysis),\n        violations: this.identifyBestPracticeViolations(analysis),\n        recommendations: this.generateBestPracticeRecommendations(analysis),\n        guidelines: this.getRelevantGuidelines(analysis)\n      },\n      status: 'complete'\n    };\n  }\n\n  /**\n     * 生成图表数据\n     * @param {Object} analysis - 分析数据\n     * @param {Object} config - 配置\n     * @returns {Object} 图表数据\n     */\n  async generateChartData(analysis, config) {\n    const charts = {};\n\n    // 分数雷达图\n    charts.scoreRadar = {\n      type: 'radar',\n      title: '各维度评分',\n      data: {\n        labels: ['结构', '依赖', '可维护性', '质量', '安全性'],\n        datasets: [{\n          label: '当前分数',\n          data: [\n            analysis.structure.score,\n            analysis.dependencies.score,\n            analysis.maintainability.score,\n            analysis.quality.score,\n            analysis.security.score\n          ],\n          backgroundColor: 'rgba(37, 99, 235, 0.2)',\n          borderColor: 'rgba(37, 99, 235, 1)',\n          borderWidth: 2\n        }]\n      },\n      options: {\n        scale: {\n          ticks: {\n            beginAtZero: true,\n            max: 100\n          }\n        }\n      }\n    };\n\n    // 语言分布饼图\n    charts.languageDistribution = {\n      type: 'pie',\n      title: '编程语言分布',\n      data: {\n        labels: Object.keys(analysis.summary.statistics.languageDistribution),\n        datasets: [{\n          data: Object.values(analysis.summary.statistics.languageDistribution),\n          backgroundColor: [\n            '#2563eb', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4'\n          ]\n        }]\n      }\n    };\n\n    // 复杂度分布柱状图\n    charts.complexityDistribution = {\n      type: 'bar',\n      title: '复杂度分布',\n      data: {\n        labels: ['低', '中', '高'],\n        datasets: [{\n          label: '文件数量',\n          data: [\n            analysis.metrics.complexity.distribution.low,\n            analysis.metrics.complexity.distribution.medium,\n            analysis.metrics.complexity.distribution.high\n          ],\n          backgroundColor: ['#10b981', '#f59e0b', '#ef4444']\n        }]\n      }\n    };\n\n    // 问题严重程度分布\n    const allIssues = [\n      ...analysis.structure.issues,\n      ...analysis.dependencies.issues,\n      ...analysis.maintainability.issues,\n      ...analysis.quality.issues,\n      ...analysis.security.issues\n    ];\n\n    const issuesBySeverity = this.groupIssuesBySeverity(allIssues);\n    charts.issuesSeverity = {\n      type: 'doughnut',\n      title: '问题严重程度分布',\n      data: {\n        labels: Object.keys(issuesBySeverity),\n        datasets: [{\n          data: Object.values(issuesBySeverity).map(issues => issues.length),\n          backgroundColor: ['#ef4444', '#f59e0b', '#06b6d4', '#10b981']\n        }]\n      }\n    };\n\n    // 文件大小分布\n    charts.fileSizeDistribution = {\n      type: 'histogram',\n      title: '文件大小分布',\n      data: this.generateFileSizeHistogram(analysis),\n      options: {\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: '文件大小 (行数)'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: '文件数量'\n            }\n          }\n        }\n      }\n    };\n\n    return charts;\n  }\n\n  /**\n     * 生成HTML报告\n     * @param {Object} reportData - 报告数据\n     * @param {Object} config - 配置\n     * @returns {string} HTML内容\n     */\n  async generateHtmlReport(reportData, config) {\n    const theme = this.chartConfig.themes[config.theme];\n\n    const html = `\n<!DOCTYPE html>\n<html lang=\"${config.language}\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${reportData.metadata.title}</title>\n    <style>\n        ${this.generateCssStyles(theme)}\n    </style>\n    ${config.includeCharts ? '<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>' : ''}\n</head>\n<body>\n    <div class=\"container\">\n        <header class=\"report-header\">\n            <h1>${reportData.metadata.title}</h1>\n            <div class=\"metadata\">\n                <p><strong>生成时间:</strong> ${new Date(reportData.metadata.generatedAt).toLocaleString()}</p>\n                <p><strong>项目路径:</strong> ${reportData.metadata.projectPath}</p>\n                <p><strong>模板:</strong> ${reportData.metadata.template}</p>\n            </div>\n        </header>\n        \n        <nav class=\"table-of-contents\">\n            <h2>目录</h2>\n            <ul>\n                ${Object.keys(reportData.sections).map(sectionKey =>\n    `<li><a href=\"#${sectionKey}\">${reportData.sections[sectionKey].title}</a></li>`\n  ).join('')}\n            </ul>\n        </nav>\n        \n        <main class=\"report-content\">\n            ${Object.entries(reportData.sections).map(([sectionKey, section]) =>\n    this.generateHtmlSection(sectionKey, section, config)\n  ).join('')}\n        </main>\n        \n        ${config.includeCharts ? this.generateChartsHtml(reportData.charts) : ''}\n        \n        <footer class=\"report-footer\">\n            <p>报告由 ${reportData.metadata.author} 生成</p>\n            <p>生成时间: ${new Date(reportData.metadata.generatedAt).toLocaleString()}</p>\n        </footer>\n    </div>\n    \n    ${config.includeCharts ? this.generateChartsScript(reportData.charts) : ''}\n</body>\n</html>`;\n\n    return html;\n  }\n\n  /**\n     * 生成Markdown报告\n     * @param {Object} reportData - 报告数据\n     * @param {Object} config - 配置\n     * @returns {string} Markdown内容\n     */\n  async generateMarkdownReport(reportData, config) {\n    let markdown = `# ${reportData.metadata.title}\\n\\n`;\n\n    // 元数据\n    markdown += '## 报告信息\\n\\n';\n    markdown += `- **生成时间:** ${new Date(reportData.metadata.generatedAt).toLocaleString()}\\n`;\n    markdown += `- **项目路径:** ${reportData.metadata.projectPath}\\n`;\n    markdown += `- **模板:** ${reportData.metadata.template}\\n`;\n    markdown += `- **作者:** ${reportData.metadata.author}\\n\\n`;\n\n    // 目录\n    markdown += '## 目录\\n\\n';\n    Object.keys(reportData.sections).forEach(sectionKey => {\n      const section = reportData.sections[sectionKey];\n      markdown += `- [${section.title}](#${sectionKey.replace(/_/g, '-')})\\n`;\n    });\n    markdown += '\\n';\n\n    // 各个部分\n    Object.entries(reportData.sections).forEach(([sectionKey, section]) => {\n      markdown += this.generateMarkdownSection(sectionKey, section, config);\n    });\n\n    return markdown;\n  }\n\n  /**\n     * 生成JSON报告\n     * @param {Object} reportData - 报告数据\n     * @param {Object} config - 配置\n     * @returns {string} JSON内容\n     */\n  async generateJsonReport(reportData, config) {\n    return JSON.stringify(reportData, null, 2);\n  }\n\n  /**\n     * 生成PDF报告\n     * @param {Object} reportData - 报告数据\n     * @param {Object} config - 配置\n     * @returns {string} PDF内容（Base64编码）\n     */\n  async generatePdfReport(reportData, config) {\n    // 这里应该使用PDF生成库，如jsPDF或puppeteer\n    // 为了简化，返回一个占位符\n    return 'PDF报告生成功能需要集成PDF库';\n  }\n\n  // 工具方法\n  generateCacheKey(analysisResult, config) {\n    const key = {\n      analysisChecksum: this.calculateChecksum(JSON.stringify(analysisResult)),\n      template: config.template,\n      format: config.format,\n      theme: config.theme,\n      includeCharts: config.includeCharts,\n      includeRawData: config.includeRawData\n    };\n    return JSON.stringify(key);\n  }\n\n  calculateReportSize(content) {\n    return new Blob([content]).size;\n  }\n\n  calculateChecksum(content) {\n    // 简化的校验和计算\n    let hash = 0;\n    for (let i = 0; i < content.length; i++) {\n      const char = content.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // 转换为32位整数\n    }\n    return hash.toString(16);\n  }\n\n  generateFilename(config) {\n    const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');\n    const extension = this.outputFormats[config.format].extension;\n    return `code-analysis-${config.template}-${timestamp}${extension}`;\n  }\n\n  getTopIssues(analysis) {\n    const allIssues = [\n      ...analysis.structure.issues,\n      ...analysis.dependencies.issues,\n      ...analysis.maintainability.issues,\n      ...analysis.quality.issues,\n      ...analysis.security.issues\n    ];\n\n    return allIssues\n      .sort((a, b) => {\n        const severityOrder = { 'critical': 4, 'high': 3, 'medium': 2, 'low': 1 };\n        return severityOrder[b.severity] - severityOrder[a.severity];\n      })\n      .slice(0, 5);\n  }\n\n  getTopRecommendations(analysis) {\n    const allRecommendations = [\n      ...analysis.structure.recommendations,\n      ...analysis.dependencies.recommendations,\n      ...analysis.maintainability.recommendations,\n      ...analysis.quality.recommendations,\n      ...analysis.security.recommendations,\n      ...analysis.recommendations\n    ];\n\n    return allRecommendations\n      .sort((a, b) => {\n        const priorityOrder = { 'critical': 5, 'high': 4, 'medium': 3, 'low': 2, 'info': 1 };\n        return priorityOrder[b.priority] - priorityOrder[a.priority];\n      })\n      .slice(0, 5);\n  }\n\n  groupIssuesByCategory(issues) {\n    return issues.reduce((groups, issue) => {\n      const category = issue.category || 'other';\n      if (!groups[category]) {groups[category] = [];}\n      groups[category].push(issue);\n      return groups;\n    }, {});\n  }\n\n  groupIssuesBySeverity(issues) {\n    return issues.reduce((groups, issue) => {\n      const severity = issue.severity || 'unknown';\n      if (!groups[severity]) {groups[severity] = [];}\n      groups[severity].push(issue);\n      return groups;\n    }, {});\n  }\n\n  groupRecommendationsByCategory(recommendations) {\n    return recommendations.reduce((groups, rec) => {\n      const category = rec.category || 'other';\n      if (!groups[category]) {groups[category] = [];}\n      groups[category].push(rec);\n      return groups;\n    }, {});\n  }\n\n  groupRecommendationsByPriority(recommendations) {\n    return recommendations.reduce((groups, rec) => {\n      const priority = rec.priority || 'unknown';\n      if (!groups[priority]) {groups[priority] = [];}\n      groups[priority].push(rec);\n      return groups;\n    }, {});\n  }\n\n  identifyKeyRisks(analysis) {\n    const risks = [];\n\n    if (analysis.security.score < 70) {\n      risks.push('安全性评分较低，存在潜在安全风险');\n    }\n\n    if (analysis.metrics.complexity.average > 20) {\n      risks.push('代码复杂度过高，维护成本较大');\n    }\n\n    if (analysis.dependencies.details.circularDependencies.count > 0) {\n      risks.push('存在循环依赖，影响代码可维护性');\n    }\n\n    return risks;\n  }\n\n  estimateMaintainabilityCost(analysis) {\n    const baseScore = analysis.maintainability.score;\n    if (baseScore >= 80) {return 'low';}\n    if (baseScore >= 60) {return 'medium';}\n    return 'high';\n  }\n\n  estimateTechnicalDebt(analysis) {\n    const issues = [\n      ...analysis.structure.issues,\n      ...analysis.dependencies.issues,\n      ...analysis.maintainability.issues,\n      ...analysis.quality.issues,\n      ...analysis.security.issues\n    ];\n\n    const criticalIssues = issues.filter(issue => issue.severity === 'critical').length;\n    const highIssues = issues.filter(issue => issue.severity === 'high').length;\n\n    const debtScore = criticalIssues * 3 + highIssues * 2;\n\n    if (debtScore <= 5) {return 'low';}\n    if (debtScore <= 15) {return 'medium';}\n    return 'high';\n  }\n\n  assessOverallRisk(analysis) {\n    const riskFactors = [\n      analysis.security.score < 70 ? 1 : 0,\n      analysis.quality.score < 70 ? 1 : 0,\n      analysis.metrics.complexity.average > 20 ? 1 : 0,\n      analysis.dependencies.details.circularDependencies.count > 0 ? 1 : 0\n    ];\n\n    const totalRisk = riskFactors.reduce((sum, factor) => sum + factor, 0);\n\n    if (totalRisk >= 3) {return 'high';}\n    if (totalRisk >= 2) {return 'medium';}\n    return 'low';\n  }\n\n  calculateTechnicalDebtRatio(analysis) {\n    const totalIssues = [\n      ...analysis.structure.issues,\n      ...analysis.dependencies.issues,\n      ...analysis.maintainability.issues,\n      ...analysis.quality.issues,\n      ...analysis.security.issues\n    ].length;\n\n    const fileCount = analysis.fileCount;\n    return fileCount > 0 ? (totalIssues / fileCount) * 100 : 0;\n  }\n\n  identifyRiskFactors(analysis) {\n    const factors = [];\n\n    if (analysis.metrics.complexity.average > 15) {\n      factors.push({\n        factor: '高复杂度',\n        impact: 'high',\n        description: '代码复杂度过高，增加维护难度'\n      });\n    }\n\n    if (analysis.dependencies.details.coupling.averageCoupling > 3) {\n      factors.push({\n        factor: '高耦合度',\n        impact: 'medium',\n        description: '模块间耦合度过高，影响可测试性'\n      });\n    }\n\n    if (analysis.quality.details.coverage.coverage < 0.7) {\n      factors.push({\n        factor: '测试覆盖率不足',\n        impact: 'high',\n        description: '测试覆盖率低于70%，存在质量风险'\n      });\n    }\n\n    return factors;\n  }\n\n  generateMitigationStrategies(analysis) {\n    const strategies = [];\n\n    if (analysis.security.score < 70) {\n      strategies.push({\n        risk: '安全性风险',\n        strategy: '实施安全代码审查和漏洞扫描',\n        timeline: '1-2周',\n        priority: 'high'\n      });\n    }\n\n    if (analysis.metrics.complexity.average > 20) {\n      strategies.push({\n        risk: '高复杂度风险',\n        strategy: '重构复杂函数，拆分大型模块',\n        timeline: '2-4周',\n        priority: 'medium'\n      });\n    }\n\n    return strategies;\n  }\n\n  estimateResourceRequirements(recommendations) {\n    const highPriority = recommendations.filter(rec => rec.priority === 'high' || rec.priority === 'critical').length;\n    const mediumPriority = recommendations.filter(rec => rec.priority === 'medium').length;\n    const lowPriority = recommendations.filter(rec => rec.priority === 'low').length;\n\n    return {\n      developerDays: highPriority * 2 + mediumPriority * 1 + lowPriority * 0.5,\n      teamSize: Math.ceil((highPriority + mediumPriority) / 10) || 1,\n      estimatedCost: 'medium',\n      timeline: '2-6周'\n    };\n  }\n\n  generateTimeline(recommendations) {\n    return {\n      phase1: {\n        name: '紧急修复',\n        duration: '1-2周',\n        items: recommendations.filter(rec => rec.priority === 'critical' || rec.priority === 'high').slice(0, 5)\n      },\n      phase2: {\n        name: '质量改进',\n        duration: '3-4周',\n        items: recommendations.filter(rec => rec.priority === 'medium').slice(0, 8)\n      },\n      phase3: {\n        name: '优化完善',\n        duration: '5-6周',\n        items: recommendations.filter(rec => rec.priority === 'low')\n      }\n    };\n  }\n\n  analyzeTechnicalDebt(analysis) {\n    const allIssues = [\n      ...analysis.structure.issues,\n      ...analysis.dependencies.issues,\n      ...analysis.maintainability.issues,\n      ...analysis.quality.issues,\n      ...analysis.security.issues\n    ];\n\n    return {\n      totalDebt: allIssues.length,\n      debtByCategory: this.groupIssuesByCategory(allIssues),\n      estimatedEffort: this.estimateDebtResolutionEffort(allIssues),\n      prioritizedItems: allIssues.sort((a, b) => {\n        const severityOrder = { 'critical': 4, 'high': 3, 'medium': 2, 'low': 1 };\n        return severityOrder[b.severity] - severityOrder[a.severity];\n      }).slice(0, 10)\n    };\n  }\n\n  estimateDebtResolutionEffort(issues) {\n    const effortMap = {\n      'critical': 8,\n      'high': 4,\n      'medium': 2,\n      'low': 1\n    };\n\n    return issues.reduce((total, issue) => {\n      return total + (effortMap[issue.severity] || 1);\n    }, 0);\n  }\n\n  generateMetricTrends(analysis) {\n    // 模拟趋势数据\n    return {\n      complexity: {\n        current: analysis.metrics.complexity.average,\n        trend: 'stable',\n        change: 0\n      },\n      quality: {\n        current: analysis.quality.score,\n        trend: 'improving',\n        change: 5\n      },\n      coverage: {\n        current: analysis.quality.details.coverage.coverage * 100,\n        trend: 'declining',\n        change: -3\n      }\n    };\n  }\n\n  analyzeLayering(analysis) {\n    return {\n      hasLayeredArchitecture: analysis.structure.details.directoryStructure.hasStandardStructure,\n      layerViolations: [],\n      recommendedLayers: ['presentation', 'business', 'data', 'infrastructure']\n    };\n  }\n\n  identifyArchitecturalPatterns(analysis) {\n    const patterns = [];\n\n    if (analysis.structure.details.fileOrganization.isWellOrganized) {\n      patterns.push('模块化架构');\n    }\n\n    if (analysis.dependencies.details.coupling.averageCoupling < 3) {\n      patterns.push('松耦合设计');\n    }\n\n    return patterns;\n  }\n\n  estimateCodeEfficiency(analysis) {\n    const complexityScore = Math.max(0, 100 - analysis.metrics.complexity.average * 3);\n    const couplingScore = Math.max(0, 100 - analysis.dependencies.details.coupling.averageCoupling * 20);\n\n    return {\n      overall: Math.round((complexityScore + couplingScore) / 2),\n      complexity: complexityScore,\n      coupling: couplingScore\n    };\n  }\n\n  generatePerformanceRecommendations(analysis) {\n    const recommendations = [];\n\n    if (analysis.metrics.complexity.average > 15) {\n      recommendations.push({\n        area: '算法优化',\n        suggestion: '优化高复杂度算法，减少时间复杂度',\n        impact: 'high'\n      });\n    }\n\n    if (analysis.dependencies.details.coupling.averageCoupling > 3) {\n      recommendations.push({\n        area: '架构优化',\n        suggestion: '减少模块间依赖，提高并行处理能力',\n        impact: 'medium'\n      });\n    }\n\n    return recommendations;\n  }\n\n  assessBestPracticeAdherence(analysis) {\n    let score = 0;\n    let total = 0;\n\n    // 检查各种最佳实践\n    const practices = [\n      { name: '代码组织', score: analysis.structure.score },\n      { name: '依赖管理', score: analysis.dependencies.score },\n      { name: '测试覆盖', score: analysis.quality.details.coverage.score },\n      { name: '文档完整性', score: analysis.maintainability.details.documentation.score }\n    ];\n\n    practices.forEach(practice => {\n      score += practice.score;\n      total += 100;\n    });\n\n    return {\n      overallScore: Math.round(score / practices.length),\n      practiceScores: practices,\n      adherenceLevel: score / practices.length >= 80 ? 'high' : score / practices.length >= 60 ? 'medium' : 'low'\n    };\n  }\n\n  identifyBestPracticeViolations(analysis) {\n    const violations = [];\n\n    if (analysis.structure.score < 70) {\n      violations.push({\n        practice: '代码组织',\n        violation: '目录结构不够清晰',\n        severity: 'medium'\n      });\n    }\n\n    if (analysis.quality.details.coverage.coverage < 0.7) {\n      violations.push({\n        practice: '测试覆盖',\n        violation: '测试覆盖率不足',\n        severity: 'high'\n      });\n    }\n\n    return violations;\n  }\n\n  generateBestPracticeRecommendations(analysis) {\n    const recommendations = [];\n\n    if (analysis.maintainability.details.documentation.score < 70) {\n      recommendations.push({\n        practice: '文档编写',\n        recommendation: '增加代码注释和API文档',\n        benefit: '提高代码可维护性和团队协作效率'\n      });\n    }\n\n    if (analysis.dependencies.details.circularDependencies.count > 0) {\n      recommendations.push({\n        practice: '依赖管理',\n        recommendation: '消除循环依赖，建立清晰的依赖层次',\n        benefit: '提高代码的可测试性和可维护性'\n      });\n    }\n\n    return recommendations;\n  }\n\n  getRelevantGuidelines(analysis) {\n    const guidelines = [];\n\n    const primaryLanguage = analysis.summary.statistics.languageDistribution;\n    const mainLang = Object.keys(primaryLanguage)[0];\n\n    if (mainLang === 'javascript') {\n      guidelines.push({\n        name: 'JavaScript最佳实践',\n        url: 'https://github.com/airbnb/javascript',\n        description: 'Airbnb JavaScript风格指南'\n      });\n    }\n\n    guidelines.push({\n      name: '代码质量指南',\n      url: 'https://clean-code-developer.com/',\n      description: '清洁代码开发原则'\n    });\n\n    return guidelines;\n  }\n\n  generateFileSizeHistogram(analysis) {\n    // 模拟文件大小分布数据\n    const bins = [\n      { range: '0-100', count: 8 },\n      { range: '101-300', count: 12 },\n      { range: '301-500', count: 6 },\n      { range: '501-1000', count: 3 },\n      { range: '1000+', count: 1 }\n    ];\n\n    return {\n      labels: bins.map(bin => bin.range),\n      datasets: [{\n        label: '文件数量',\n        data: bins.map(bin => bin.count),\n        backgroundColor: '#2563eb'\n      }]\n    };\n  }\n\n  generateCssStyles(theme) {\n    return `\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n        \n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            line-height: 1.6;\n            color: ${theme.text};\n            background-color: ${theme.background};\n        }\n        \n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        \n        .report-header {\n            text-align: center;\n            margin-bottom: 40px;\n            padding: 30px;\n            border: 1px solid ${theme.border};\n            border-radius: 8px;\n        }\n        \n        .report-header h1 {\n            font-size: 2.5em;\n            margin-bottom: 20px;\n            color: ${this.chartConfig.colors.primary};\n        }\n        \n        .metadata {\n            display: flex;\n            justify-content: center;\n            gap: 30px;\n            flex-wrap: wrap;\n        }\n        \n        .table-of-contents {\n            background: ${theme.background};\n            border: 1px solid ${theme.border};\n            border-radius: 8px;\n            padding: 20px;\n            margin-bottom: 30px;\n        }\n        \n        .table-of-contents ul {\n            list-style: none;\n        }\n        \n        .table-of-contents li {\n            margin: 8px 0;\n        }\n        \n        .table-of-contents a {\n            color: ${this.chartConfig.colors.primary};\n            text-decoration: none;\n        }\n        \n        .table-of-contents a:hover {\n            text-decoration: underline;\n        }\n        \n        .section {\n            margin-bottom: 40px;\n            padding: 30px;\n            border: 1px solid ${theme.border};\n            border-radius: 8px;\n        }\n        \n        .section h2 {\n            color: ${this.chartConfig.colors.primary};\n            margin-bottom: 20px;\n            padding-bottom: 10px;\n            border-bottom: 2px solid ${theme.border};\n        }\n        \n        .section h3 {\n            color: ${this.chartConfig.colors.secondary};\n            margin: 20px 0 10px 0;\n        }\n        \n        .metric-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 20px;\n            margin: 20px 0;\n        }\n        \n        .metric-card {\n            padding: 20px;\n            border: 1px solid ${theme.border};\n            border-radius: 6px;\n            text-align: center;\n        }\n        \n        .metric-value {\n            font-size: 2em;\n            font-weight: bold;\n            color: ${this.chartConfig.colors.primary};\n        }\n        \n        .metric-label {\n            color: ${this.chartConfig.colors.secondary};\n            margin-top: 5px;\n        }\n        \n        .issue-list, .recommendation-list {\n            list-style: none;\n        }\n        \n        .issue-item, .recommendation-item {\n            padding: 15px;\n            margin: 10px 0;\n            border-left: 4px solid;\n            border-radius: 4px;\n        }\n        \n        .issue-critical {\n            border-color: ${this.chartConfig.colors.danger};\n            background: rgba(239, 68, 68, 0.1);\n        }\n        \n        .issue-high {\n            border-color: ${this.chartConfig.colors.warning};\n            background: rgba(245, 158, 11, 0.1);\n        }\n        \n        .issue-medium {\n            border-color: ${this.chartConfig.colors.info};\n            background: rgba(6, 182, 212, 0.1);\n        }\n        \n        .issue-low {\n            border-color: ${this.chartConfig.colors.success};\n            background: rgba(16, 185, 129, 0.1);\n        }\n        \n        .chart-container {\n            margin: 30px 0;\n            padding: 20px;\n            border: 1px solid ${theme.border};\n            border-radius: 8px;\n        }\n        \n        .chart-title {\n            text-align: center;\n            margin-bottom: 20px;\n            font-weight: bold;\n        }\n        \n        .report-footer {\n            text-align: center;\n            margin-top: 50px;\n            padding: 20px;\n            border-top: 1px solid ${theme.border};\n            color: ${this.chartConfig.colors.secondary};\n        }\n        \n        @media (max-width: 768px) {\n            .container {\n                padding: 10px;\n            }\n            \n            .metadata {\n                flex-direction: column;\n                gap: 10px;\n            }\n            \n            .metric-grid {\n                grid-template-columns: 1fr;\n            }\n        }\n        `;\n  }\n\n  generateHtmlSection(sectionKey, section, config) {\n    return `\n        <section id=\"${sectionKey}\" class=\"section\">\n            <h2>${section.title}</h2>\n            ${this.formatSectionContent(section.content, config)}\n        </section>\n        `;\n  }\n\n  formatSectionContent(content, config) {\n    if (typeof content === 'string') {\n      return `<p>${content}</p>`;\n    }\n\n    if (typeof content === 'object') {\n      return this.formatObjectAsHtml(content, config);\n    }\n\n    return '<p>无内容</p>';\n  }\n\n  formatObjectAsHtml(obj, config, level = 0) {\n    let html = '';\n\n    Object.entries(obj).forEach(([key, value]) => {\n      if (typeof value === 'object' && value !== null) {\n        if (Array.isArray(value)) {\n          html += `<h${Math.min(6, level + 3)}>${key}</h${Math.min(6, level + 3)}>`;\n          html += '<ul>';\n          value.forEach(item => {\n            if (typeof item === 'object') {\n              html += `<li>${this.formatObjectAsHtml(item, config, level + 1)}</li>`;\n            } else {\n              html += `<li>${item}</li>`;\n            }\n          });\n          html += '</ul>';\n        } else {\n          html += `<h${Math.min(6, level + 3)}>${key}</h${Math.min(6, level + 3)}>`;\n          html += this.formatObjectAsHtml(value, config, level + 1);\n        }\n      } else {\n        html += `<p><strong>${key}:</strong> ${value}</p>`;\n      }\n    });\n\n    return html;\n  }\n\n  generateChartsHtml(charts) {\n    if (!charts) {return '';}\n\n    let html = '<div class=\"charts-section\">';\n\n    Object.entries(charts).forEach(([chartKey, chart]) => {\n      html += `\n            <div class=\"chart-container\">\n                <div class=\"chart-title\">${chart.title}</div>\n                <canvas id=\"chart-${chartKey}\" width=\"400\" height=\"200\"></canvas>\n            </div>\n            `;\n    });\n\n    html += '</div>';\n    return html;\n  }\n\n  generateChartsScript(charts) {\n    if (!charts) {return '';}\n\n    let script = '<script>';\n\n    Object.entries(charts).forEach(([chartKey, chart]) => {\n      script += `\n            new Chart(document.getElementById('chart-${chartKey}'), {\n                type: '${chart.type}',\n                data: ${JSON.stringify(chart.data)},\n                options: ${JSON.stringify(chart.options || {})}\n            });\n            `;\n    });\n\n    script += '</script>';\n    return script;\n  }\n\n  generateMarkdownSection(sectionKey, section, config) {\n    let markdown = `\\n## ${section.title}\\n\\n`;\n\n    if (typeof section.content === 'string') {\n      markdown += `${section.content}\\n\\n`;\n    } else if (typeof section.content === 'object') {\n      markdown += this.formatObjectAsMarkdown(section.content);\n    }\n\n    return markdown;\n  }\n\n  formatObjectAsMarkdown(obj, level = 0) {\n    let markdown = '';\n    const indent = '  '.repeat(level);\n\n    Object.entries(obj).forEach(([key, value]) => {\n      if (typeof value === 'object' && value !== null) {\n        if (Array.isArray(value)) {\n          markdown += `${indent}### ${key}\\n\\n`;\n          value.forEach(item => {\n            if (typeof item === 'object') {\n              markdown += `${indent}- ${JSON.stringify(item)}\\n`;\n            } else {\n              markdown += `${indent}- ${item}\\n`;\n            }\n          });\n          markdown += '\\n';\n        } else {\n          markdown += `${indent}### ${key}\\n\\n`;\n          markdown += this.formatObjectAsMarkdown(value, level + 1);\n        }\n      } else {\n        markdown += `${indent}**${key}:** ${value}\\n\\n`;\n      }\n    });\n\n    return markdown;\n  }\n\n  /**\n     * 清理缓存\n     */\n  clearCache() {\n    this.reportCache.clear();\n    this.generationHistory = [];\n  }\n\n  /**\n     * 获取生成历史\n     */\n  getGenerationHistory() {\n    return this.generationHistory;\n  }\n\n  /**\n     * 获取可用模板\n     */\n  getAvailableTemplates() {\n    return this.reportTemplates;\n  }\n\n  /**\n     * 获取支持的输出格式\n     */\n  getSupportedFormats() {\n    return this.outputFormats;\n  }\n\n  /**\n     * 验证配置\n     */\n  validateConfig(config) {\n    const errors = [];\n\n    if (config.template && !this.reportTemplates[config.template]) {\n      errors.push(`未知的报告模板: ${config.template}`);\n    }\n\n    if (config.format && !this.outputFormats[config.format]) {\n      errors.push(`不支持的输出格式: ${config.format}`);\n    }\n\n    if (config.theme && !this.chartConfig.themes[config.theme]) {\n      errors.push(`未知的主题: ${config.theme}`);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors: errors\n    };\n  }\n}\n\n// 导出类\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = ReportGenerator;\n} else if (typeof window !== 'undefined') {\n  window.ReportGenerator = ReportGenerator;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\animation-utils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth-ui.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth\\AuthManager.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'username' is defined but never used. Allowed unused args must match /^_/u.","line":489,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":489,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'username' is defined but never used. Allowed unused args must match /^_/u.","line":499,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":499,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'username' is defined but never used. Allowed unused args must match /^_/u.","line":508,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":508,"endColumn":31}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AuthManager - 重构后的认证管理器主类\n * 职责: 作为门面模式协调各专职类，提供统一的认证接口\n * 符合单一职责原则(SRP)和依赖倒置原则(DIP)\n */\n\n// 导入专职类\nconst SessionManager = require('./core/SessionManager');\nconst AuthAPI = require('./api/AuthAPI');\nconst PasswordSecurity = require('./security/PasswordSecurity');\nconst AuthUI = require('./ui/AuthUI');\n\nclass AuthManager {\n  constructor() {\n    // 初始化状态\n    this.isInitialized = false;\n    this.initializationPromise = null;\n    this.dependencies = {\n      sessionManager: null,\n      authAPI: null,\n      passwordSecurity: null,\n      authUI: null\n    };\n\n    // 配置选项\n    this.config = {\n      sessionTimeout: 30 * 60 * 1000, // 30分钟\n      maxLoginAttempts: 5,\n      lockoutDuration: 15 * 60 * 1000, // 15分钟\n      passwordMinLength: 8,\n      enableAutoLogin: true,\n      apiBaseUrl: '/api/auth'\n    };\n\n    // 事件监听器\n    this.eventListeners = new Map();\n\n    console.log('AuthManager initialized');\n  }\n\n  /**\n   * 初始化认证管理器\n   * @param {Object} options - 配置选项\n   * @returns {Promise<boolean>} 初始化结果\n   */\n  async init(options = {}) {\n    if (this.isInitialized) {\n      return true;\n    }\n\n    if (this.initializationPromise) {\n      return this.initializationPromise;\n    }\n\n    this.initializationPromise = this._performInitialization(options);\n    return this.initializationPromise;\n  }\n\n  /**\n   * 执行初始化过程\n   * @param {Object} options - 配置选项\n   * @returns {Promise<boolean>} 初始化结果\n   * @private\n   */\n  async _performInitialization(options) {\n    try {\n      // 合并配置\n      this.config = { ...this.config, ...options };\n\n      // 初始化专职类\n      await this._initializeDependencies();\n\n      // 等待依赖就绪\n      await this._waitForDependencies();\n\n      // 检查现有会话\n      if (this.config.enableAutoLogin) {\n        await this._checkExistingSession();\n      }\n\n      this.isInitialized = true;\n      this._emitEvent('initialized', { success: true });\n\n      console.log('AuthManager initialization completed');\n      return true;\n\n    } catch (error) {\n      console.error('AuthManager initialization failed:', error);\n      this._handleInitializationError(error);\n      return false;\n    }\n  }\n\n  /**\n   * 初始化依赖的专职类\n   * @private\n   */\n  async _initializeDependencies() {\n    try {\n      // 初始化会话管理器\n      this.dependencies.sessionManager = new SessionManager({\n        timeout: this.config.sessionTimeout\n      });\n\n      // 初始化API通信类\n      this.dependencies.authAPI = new AuthAPI({\n        baseUrl: this.config.apiBaseUrl,\n        timeout: 10000\n      });\n\n      // 初始化密码安全类\n      this.dependencies.passwordSecurity = new PasswordSecurity({\n        minLength: this.config.passwordMinLength,\n        requireSpecialChars: true\n      });\n\n      // 初始化UI管理类\n      this.dependencies.authUI = new AuthUI();\n\n      console.log('All dependencies initialized successfully');\n\n    } catch (error) {\n      throw new Error(`Failed to initialize dependencies: ${error.message}`);\n    }\n  }\n\n  /**\n   * 等待依赖就绪\n   * @private\n   */\n  async _waitForDependencies() {\n    const maxWaitTime = 5000; // 5秒超时\n    const startTime = Date.now();\n\n    while (Date.now() - startTime < maxWaitTime) {\n      const allReady = Object.values(this.dependencies).every(dep => dep !== null);\n      if (allReady) {\n        return;\n      }\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n\n    throw new Error('Dependencies initialization timeout');\n  }\n\n  /**\n   * 检查现有会话\n   * @private\n   */\n  async _checkExistingSession() {\n    try {\n      const session = this.dependencies.sessionManager.getCurrentSession();\n      if (session && this.dependencies.sessionManager.isSessionValid(session)) {\n        const user = await this.dependencies.authAPI.validateSession(session.token);\n        if (user) {\n          this.dependencies.authUI.updateUIForLoggedInUser(user);\n          this._emitEvent('autoLoginSuccess', { user });\n          console.log('Auto-login successful for user:', user.username);\n        }\n      }\n    } catch (error) {\n      console.warn('Auto-login failed:', error.message);\n      this.dependencies.sessionManager.clearSession();\n    }\n  }\n\n  /**\n   * 用户登录\n   * @param {string} username - 用户名\n   * @param {string} password - 密码\n   * @param {boolean} rememberMe - 是否记住登录状态\n   * @returns {Promise<Object>} 登录结果\n   */\n  async login(username, password, rememberMe = false) {\n    if (!this.isInitialized) {\n      throw new Error('AuthManager not initialized');\n    }\n\n    try {\n      // 显示加载状态\n      this.dependencies.authUI.showLoadingState('正在登录...');\n\n      // 验证输入\n      this._validateLoginInput(username, password);\n\n      // 检查登录尝试限制\n      this._checkLoginAttempts(username);\n\n      // 调用API进行认证\n      const authResult = await this.dependencies.authAPI.authenticate(username, password);\n\n      if (authResult.success) {\n        // 创建会话\n        const session = this.dependencies.sessionManager.createSession(\n          authResult.user,\n          authResult.token,\n          rememberMe\n        );\n\n        // 更新UI\n        this.dependencies.authUI.updateUIForLoggedInUser(authResult.user);\n        this.dependencies.authUI.showSuccessMessage('登录成功');\n\n        // 重置登录尝试计数\n        this._resetLoginAttempts(username);\n\n        // 触发事件\n        this._emitEvent('loginSuccess', { user: authResult.user, session });\n\n        console.log('Login successful for user:', username);\n        return { success: true, user: authResult.user, session };\n\n      }\n      throw new Error(authResult.message || '登录失败');\n\n\n    } catch (error) {\n      // 记录失败尝试\n      this._recordFailedLoginAttempt(username);\n\n      // 显示错误消息\n      this.dependencies.authUI.showErrorMessage(error.message);\n\n      // 触发事件\n      this._emitEvent('loginFailed', { username, error: error.message });\n\n      console.error('Login failed for user:', username, error.message);\n      return { success: false, error: error.message };\n\n    } finally {\n      // 隐藏加载状态\n      this.dependencies.authUI.hideLoadingState();\n    }\n  }\n\n  /**\n   * 用户注册\n   * @param {Object} userData - 用户数据\n   * @returns {Promise<Object>} 注册结果\n   */\n  async register(userData) {\n    if (!this.isInitialized) {\n      throw new Error('AuthManager not initialized');\n    }\n\n    try {\n      // 显示加载状态\n      this.dependencies.authUI.showLoadingState('正在注册...');\n\n      // 验证用户数据\n      this._validateRegistrationData(userData);\n\n      // 验证密码强度\n      const passwordValidation = this.dependencies.passwordSecurity.validatePasswordStrength(userData.password);\n      if (!passwordValidation.isValid) {\n        throw new Error(`密码强度不足: ${passwordValidation.suggestions.join(', ')}`);\n      }\n\n      // 加密密码\n      const hashedPassword = await this.dependencies.passwordSecurity.hashPassword(userData.password);\n\n      // 调用API进行注册\n      const registrationData = {\n        ...userData,\n        password: hashedPassword\n      };\n\n      const result = await this.dependencies.authAPI.register(registrationData);\n\n      if (result.success) {\n        // 显示成功消息\n        this.dependencies.authUI.showSuccessMessage('注册成功，请登录');\n\n        // 触发事件\n        this._emitEvent('registrationSuccess', { user: result.user });\n\n        console.log('Registration successful for user:', userData.username);\n        return { success: true, user: result.user };\n\n      }\n      throw new Error(result.message || '注册失败');\n\n\n    } catch (error) {\n      // 显示错误消息\n      this.dependencies.authUI.showErrorMessage(error.message);\n\n      // 触发事件\n      this._emitEvent('registrationFailed', { userData, error: error.message });\n\n      console.error('Registration failed:', error.message);\n      return { success: false, error: error.message };\n\n    } finally {\n      // 隐藏加载状态\n      this.dependencies.authUI.hideLoadingState();\n    }\n  }\n\n  /**\n   * 用户登出\n   * @returns {Promise<boolean>} 登出结果\n   */\n  async logout() {\n    if (!this.isInitialized) {\n      throw new Error('AuthManager not initialized');\n    }\n\n    try {\n      // 显示加载状态\n      this.dependencies.authUI.showLoadingState('正在登出...');\n\n      // 获取当前会话\n      const session = this.dependencies.sessionManager.getCurrentSession();\n\n      if (session) {\n        // 调用API登出\n        await this.dependencies.authAPI.logout(session.token);\n      }\n\n      // 清除本地会话\n      this.dependencies.sessionManager.clearSession();\n\n      // 更新UI\n      this.dependencies.authUI.updateUIForLoggedOutUser();\n      this.dependencies.authUI.showInfoMessage('已成功登出');\n\n      // 触发事件\n      this._emitEvent('logoutSuccess', {});\n\n      console.log('Logout successful');\n      return true;\n\n    } catch (error) {\n      // 显示错误消息\n      this.dependencies.authUI.showErrorMessage('登出失败: ' + error.message);\n\n      // 触发事件\n      this._emitEvent('logoutFailed', { error: error.message });\n\n      console.error('Logout failed:', error.message);\n      return false;\n\n    } finally {\n      // 隐藏加载状态\n      this.dependencies.authUI.hideLoadingState();\n    }\n  }\n\n  /**\n   * 修改密码\n   * @param {string} currentPassword - 当前密码\n   * @param {string} newPassword - 新密码\n   * @returns {Promise<boolean>} 修改结果\n   */\n  async changePassword(currentPassword, newPassword) {\n    if (!this.isInitialized) {\n      throw new Error('AuthManager not initialized');\n    }\n\n    try {\n      // 显示加载状态\n      this.dependencies.authUI.showLoadingState('正在修改密码...');\n\n      // 验证新密码强度\n      const passwordValidation = this.dependencies.passwordSecurity.validatePasswordStrength(newPassword);\n      if (!passwordValidation.isValid) {\n        throw new Error(`新密码强度不足: ${passwordValidation.suggestions.join(', ')}`);\n      }\n\n      // 获取当前会话\n      const session = this.dependencies.sessionManager.getCurrentSession();\n      if (!session) {\n        throw new Error('用户未登录');\n      }\n\n      // 加密新密码\n      const hashedNewPassword = await this.dependencies.passwordSecurity.hashPassword(newPassword);\n\n      // 调用API修改密码\n      const result = await this.dependencies.authAPI.changePassword(\n        session.token,\n        currentPassword,\n        hashedNewPassword\n      );\n\n      if (result.success) {\n        // 显示成功消息\n        this.dependencies.authUI.showSuccessMessage('密码修改成功');\n\n        // 触发事件\n        this._emitEvent('passwordChangeSuccess', {});\n\n        console.log('Password change successful');\n        return true;\n\n      }\n      throw new Error(result.message || '密码修改失败');\n\n\n    } catch (error) {\n      // 显示错误消息\n      this.dependencies.authUI.showErrorMessage(error.message);\n\n      // 触发事件\n      this._emitEvent('passwordChangeFailed', { error: error.message });\n\n      console.error('Password change failed:', error.message);\n      return false;\n\n    } finally {\n      // 隐藏加载状态\n      this.dependencies.authUI.hideLoadingState();\n    }\n  }\n\n  /**\n   * 获取当前用户\n   * @returns {Object|null} 当前用户信息\n   */\n  getCurrentUser() {\n    if (!this.isInitialized) {\n      return null;\n    }\n\n    const session = this.dependencies.sessionManager.getCurrentSession();\n    return session ? session.user : null;\n  }\n\n  /**\n   * 检查是否已登录\n   * @returns {boolean} 登录状态\n   */\n  isLoggedIn() {\n    if (!this.isInitialized) {\n      return false;\n    }\n\n    const session = this.dependencies.sessionManager.getCurrentSession();\n    return session && this.dependencies.sessionManager.isSessionValid(session);\n  }\n\n  /**\n   * 验证登录输入\n   * @param {string} username - 用户名\n   * @param {string} password - 密码\n   * @private\n   */\n  _validateLoginInput(username, password) {\n    if (!username || !password) {\n      throw new Error('用户名和密码不能为空');\n    }\n\n    if (username.length < 3) {\n      throw new Error('用户名长度不能少于3个字符');\n    }\n\n    if (password.length < this.config.passwordMinLength) {\n      throw new Error(`密码长度不能少于${this.config.passwordMinLength}个字符`);\n    }\n  }\n\n  /**\n   * 验证注册数据\n   * @param {Object} userData - 用户数据\n   * @private\n   */\n  _validateRegistrationData(userData) {\n    const required = ['username', 'password', 'email'];\n\n    for (const field of required) {\n      if (!userData[field]) {\n        throw new Error(`${field}不能为空`);\n      }\n    }\n\n    // 验证邮箱格式\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(userData.email)) {\n      throw new Error('邮箱格式不正确');\n    }\n  }\n\n  /**\n   * 检查登录尝试限制\n   * @param {string} username - 用户名\n   * @private\n   */\n  _checkLoginAttempts(username) {\n    // 实现登录尝试限制逻辑\n    // 这里可以集成到SessionManager或单独的安全模块\n  }\n\n  /**\n   * 记录失败的登录尝试\n   * @param {string} username - 用户名\n   * @private\n   */\n  _recordFailedLoginAttempt(username) {\n    // 实现失败尝试记录逻辑\n  }\n\n  /**\n   * 重置登录尝试计数\n   * @param {string} username - 用户名\n   * @private\n   */\n  _resetLoginAttempts(username) {\n    // 实现重置逻辑\n  }\n\n  /**\n   * 处理初始化错误\n   * @param {Error} error - 错误对象\n   * @private\n   */\n  _handleInitializationError(error) {\n    console.error('AuthManager initialization error:', error);\n    this._emitEvent('initializationFailed', { error: error.message });\n  }\n\n  /**\n   * 添加事件监听器\n   * @param {string} event - 事件名称\n   * @param {Function} callback - 回调函数\n   */\n  addEventListener(event, callback) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event).push(callback);\n  }\n\n  /**\n   * 移除事件监听器\n   * @param {string} event - 事件名称\n   * @param {Function} callback - 回调函数\n   */\n  removeEventListener(event, callback) {\n    if (this.eventListeners.has(event)) {\n      const listeners = this.eventListeners.get(event);\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * 触发事件\n   * @param {string} event - 事件名称\n   * @param {Object} data - 事件数据\n   * @private\n   */\n  _emitEvent(event, data) {\n    if (this.eventListeners.has(event)) {\n      this.eventListeners.get(event).forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`Error in event listener for ${event}:`, error);\n        }\n      });\n    }\n  }\n\n  /**\n   * 销毁认证管理器\n   */\n  destroy() {\n    // 销毁所有依赖\n    Object.values(this.dependencies).forEach(dep => {\n      if (dep && typeof dep.destroy === 'function') {\n        dep.destroy();\n      }\n    });\n\n    // 清除事件监听器\n    this.eventListeners.clear();\n\n    // 重置状态\n    this.isInitialized = false;\n    this.initializationPromise = null;\n\n    console.log('AuthManager destroyed');\n  }\n}\n\n// 导出供其他模块使用\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = AuthManager;\n}\n\n// 浏览器环境下的全局暴露\nif (typeof window !== 'undefined') {\n  window.AuthManager = AuthManager;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth\\api-integration.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth\\api\\AuthAPI.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth\\auth-manager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth\\core\\SessionManager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth\\error-manager.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'attempt' is defined but never used. Allowed unused args must match /^_/u.","line":185,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":185,"endColumn":47},{"ruleId":"no-unused-vars","severity":2,"message":"'options' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":348,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":348,"endColumn":43}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * ErrorManager - 错误处理管理器\n * 提供统一的错误处理、用户友好的错误信息和错误恢复机制\n */\n\nclass ErrorManager {\n  constructor(config = {}) {\n    this.config = {\n      // 错误处理配置\n      enableErrorLogging: config.enableErrorLogging !== false,\n      enableUserFriendlyMessages: config.enableUserFriendlyMessages !== false,\n      enableErrorRecovery: config.enableErrorRecovery !== false,\n      enableErrorReporting: config.enableErrorReporting !== false,\n\n      // 错误级别配置\n      logLevel: config.logLevel || 'error', // debug, info, warn, error\n      maxErrorHistory: config.maxErrorHistory || 100,\n\n      // 恢复策略配置\n      maxRetryAttempts: config.maxRetryAttempts || 3,\n      retryDelay: config.retryDelay || 1000,\n      enableAutoRecovery: config.enableAutoRecovery !== false,\n\n      // 用户界面配置\n      showErrorToasts: config.showErrorToasts !== false,\n      errorDisplayDuration: config.errorDisplayDuration || 5000,\n\n      ...config\n    };\n\n    // 错误历史记录\n    this.errorHistory = [];\n\n    // 错误类型映射\n    this.errorTypes = {\n      VALIDATION_ERROR: 'validation',\n      NETWORK_ERROR: 'network',\n      STORAGE_ERROR: 'storage',\n      SECURITY_ERROR: 'security',\n      AUTHENTICATION_ERROR: 'authentication',\n      AUTHORIZATION_ERROR: 'authorization',\n      SYSTEM_ERROR: 'system',\n      USER_ERROR: 'user',\n      UNKNOWN_ERROR: 'unknown'\n    };\n\n    // 错误恢复策略\n    this.recoveryStrategies = new Map();\n\n    // 错误监听器\n    this.errorListeners = new Set();\n\n    // 初始化状态\n    this.isInitialized = false;\n  }\n\n  /**\n     * 初始化错误管理器\n     */\n  async init() {\n    try {\n      console.log('ErrorManager: 开始初始化');\n\n      // 设置全局错误处理\n      this.setupGlobalErrorHandling();\n\n      // 初始化错误恢复策略\n      this.initializeRecoveryStrategies();\n\n      // 加载错误历史记录\n      await this.loadErrorHistory();\n\n      // 设置错误报告\n      if (this.config.enableErrorReporting) {\n        this.setupErrorReporting();\n      }\n\n      this.isInitialized = true;\n      console.log('ErrorManager: 初始化完成');\n\n    } catch (error) {\n      console.error('ErrorManager: 初始化失败', error);\n      throw error;\n    }\n  }\n\n  /**\n     * 设置全局错误处理\n     */\n  setupGlobalErrorHandling() {\n    // 捕获未处理的Promise拒绝\n    if (typeof window !== 'undefined') {\n      window.addEventListener('unhandledrejection', (event) => {\n        this.handleError(event.reason, {\n          type: this.errorTypes.SYSTEM_ERROR,\n          context: 'unhandledrejection',\n          recoverable: false\n        });\n      });\n\n      // 捕获全局JavaScript错误\n      window.addEventListener('error', (event) => {\n        this.handleError(event.error, {\n          type: this.errorTypes.SYSTEM_ERROR,\n          context: 'global_error',\n          recoverable: false,\n          filename: event.filename,\n          lineno: event.lineno,\n          colno: event.colno\n        });\n      });\n    }\n  }\n\n  /**\n     * 初始化错误恢复策略\n     */\n  initializeRecoveryStrategies() {\n    // 网络错误恢复策略\n    this.recoveryStrategies.set(this.errorTypes.NETWORK_ERROR, {\n      canRecover: true,\n      maxAttempts: this.config.maxRetryAttempts,\n      delay: this.config.retryDelay,\n      strategy: async (error, context, attempt) => {\n        console.log(`ErrorManager: 网络错误恢复尝试 ${attempt}/${this.config.maxRetryAttempts}`);\n\n        // 指数退避延迟\n        const delay = this.config.retryDelay * Math.pow(2, attempt - 1);\n        await this.delay(delay);\n\n        // 检查网络连接\n        if (navigator.onLine === false) {\n          throw new Error('网络连接不可用');\n        }\n\n        // 重试原始操作\n        if (context.retryFunction) {\n          return await context.retryFunction();\n        }\n\n        return false;\n      }\n    });\n\n    // 存储错误恢复策略\n    this.recoveryStrategies.set(this.errorTypes.STORAGE_ERROR, {\n      canRecover: true,\n      maxAttempts: 2,\n      delay: 500,\n      strategy: async (error, context, attempt) => {\n        console.log(`ErrorManager: 存储错误恢复尝试 ${attempt}/2`);\n\n        if (attempt === 1) {\n          // 第一次尝试：清理存储空间\n          try {\n            this.cleanupStorage();\n            await this.delay(500);\n\n            if (context.retryFunction) {\n              return await context.retryFunction();\n            }\n          } catch (cleanupError) {\n            console.warn('ErrorManager: 存储清理失败', cleanupError);\n          }\n        } else {\n          // 第二次尝试：使用备用存储\n          try {\n            if (context.fallbackFunction) {\n              return await context.fallbackFunction();\n            }\n          } catch (fallbackError) {\n            console.warn('ErrorManager: 备用存储失败', fallbackError);\n          }\n        }\n\n        return false;\n      }\n    });\n\n    // 验证错误恢复策略\n    this.recoveryStrategies.set(this.errorTypes.VALIDATION_ERROR, {\n      canRecover: true,\n      maxAttempts: 1,\n      delay: 0,\n      strategy: async (error, context, attempt) => {\n        console.log('ErrorManager: 验证错误恢复');\n\n        // 提供用户友好的验证错误信息\n        if (context.showUserMessage !== false) {\n          this.showUserFriendlyError(error, context);\n        }\n\n        // 聚焦到错误字段\n        if (context.fieldName && typeof document !== 'undefined') {\n          const field = document.querySelector(`[name=\"${context.fieldName}\"]`);\n          if (field) {\n            field.focus();\n            field.classList.add('error');\n          }\n        }\n\n        return true; // 验证错误通常不需要重试，只需要用户修正\n      }\n    });\n  }\n\n  /**\n     * 处理错误\n     */\n  async handleError(error, options = {}) {\n    try {\n      const errorInfo = this.createErrorInfo(error, options);\n\n      // 记录错误\n      if (this.config.enableErrorLogging) {\n        this.logError(errorInfo);\n      }\n\n      // 添加到错误历史\n      this.addToErrorHistory(errorInfo);\n\n      // 通知错误监听器\n      this.notifyErrorListeners(errorInfo);\n\n      // 尝试错误恢复\n      if (this.config.enableErrorRecovery && options.recoverable !== false) {\n        const recovered = await this.attemptRecovery(errorInfo);\n        if (recovered) {\n          console.log('ErrorManager: 错误恢复成功');\n          return { recovered: true, errorInfo };\n        }\n      }\n\n      // 显示用户友好的错误信息\n      if (this.config.enableUserFriendlyMessages && options.showUserMessage !== false) {\n        this.showUserFriendlyError(errorInfo, options);\n      }\n\n      return { recovered: false, errorInfo };\n\n    } catch (handlingError) {\n      console.error('ErrorManager: 错误处理过程中发生错误', handlingError);\n      return { recovered: false, errorInfo: null };\n    }\n  }\n\n  /**\n     * 创建错误信息对象\n     */\n  createErrorInfo(error, options = {}) {\n    const errorInfo = {\n      id: this.generateErrorId(),\n      timestamp: new Date().toISOString(),\n      type: options.type || this.detectErrorType(error),\n      message: error.message || error.toString(),\n      stack: error.stack,\n      context: options.context || 'unknown',\n      severity: options.severity || 'error',\n      recoverable: options.recoverable !== false,\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown',\n      url: typeof window !== 'undefined' ? window.location.href : 'unknown',\n      userId: options.userId || null,\n      sessionId: options.sessionId || null,\n      additionalData: options.additionalData || {}\n    };\n\n    // 添加错误特定信息\n    if (options.filename) {errorInfo.filename = options.filename;}\n    if (options.lineno) {errorInfo.lineno = options.lineno;}\n    if (options.colno) {errorInfo.colno = options.colno;}\n    if (options.fieldName) {errorInfo.fieldName = options.fieldName;}\n\n    return errorInfo;\n  }\n\n  /**\n     * 检测错误类型\n     */\n  detectErrorType(error) {\n    const message = error.message?.toLowerCase() || '';\n    const name = error.name?.toLowerCase() || '';\n\n    if (message.includes('network') || message.includes('fetch') || name.includes('networkerror')) {\n      return this.errorTypes.NETWORK_ERROR;\n    }\n\n    if (message.includes('storage') || message.includes('quota') || name.includes('quotaexceedederror')) {\n      return this.errorTypes.STORAGE_ERROR;\n    }\n\n    if (message.includes('validation') || message.includes('invalid')) {\n      return this.errorTypes.VALIDATION_ERROR;\n    }\n\n    if (message.includes('unauthorized') || message.includes('authentication')) {\n      return this.errorTypes.AUTHENTICATION_ERROR;\n    }\n\n    if (message.includes('forbidden') || message.includes('permission')) {\n      return this.errorTypes.AUTHORIZATION_ERROR;\n    }\n\n    if (message.includes('security') || message.includes('xss') || message.includes('csrf')) {\n      return this.errorTypes.SECURITY_ERROR;\n    }\n\n    return this.errorTypes.UNKNOWN_ERROR;\n  }\n\n  /**\n     * 尝试错误恢复\n     */\n  async attemptRecovery(errorInfo) {\n    const strategy = this.recoveryStrategies.get(errorInfo.type);\n\n    if (!strategy || !strategy.canRecover) {\n      console.log(`ErrorManager: 错误类型 ${errorInfo.type} 不支持自动恢复`);\n      return false;\n    }\n\n    for (let attempt = 1; attempt <= strategy.maxAttempts; attempt++) {\n      try {\n        console.log(`ErrorManager: 错误恢复尝试 ${attempt}/${strategy.maxAttempts}`);\n\n        const result = await strategy.strategy(errorInfo, errorInfo.context, attempt);\n\n        if (result) {\n          console.log('ErrorManager: 错误恢复成功');\n          return true;\n        }\n\n      } catch (recoveryError) {\n        console.warn(`ErrorManager: 恢复尝试 ${attempt} 失败`, recoveryError);\n\n        if (attempt === strategy.maxAttempts) {\n          console.error('ErrorManager: 所有恢复尝试都失败了');\n          return false;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n     * 显示用户友好的错误信息\n     */\n  showUserFriendlyError(errorInfo, options = {}) {\n    const userMessage = this.getUserFriendlyMessage(errorInfo);\n\n    if (this.config.showErrorToasts && typeof document !== 'undefined') {\n      this.showErrorToast(userMessage, errorInfo.severity);\n    }\n\n    // 触发自定义错误显示事件\n    if (typeof window !== 'undefined') {\n      window.dispatchEvent(new CustomEvent('userError', {\n        detail: {\n          message: userMessage,\n          severity: errorInfo.severity,\n          type: errorInfo.type,\n          errorId: errorInfo.id\n        }\n      }));\n    }\n  }\n\n  /**\n     * 获取用户友好的错误信息\n     */\n  getUserFriendlyMessage(errorInfo) {\n    const errorMessages = {\n      [this.errorTypes.VALIDATION_ERROR]: {\n        'username': '用户名格式不正确，请使用3-20个字符，只能包含字母、数字和下划线',\n        'email': '邮箱格式不正确，请输入有效的邮箱地址',\n        'password': '密码强度不够，请使用至少8个字符，包含大小写字母、数字和特殊字符',\n        'default': '输入信息有误，请检查并重新输入'\n      },\n      [this.errorTypes.NETWORK_ERROR]: {\n        'default': '网络连接出现问题，请检查网络连接后重试'\n      },\n      [this.errorTypes.STORAGE_ERROR]: {\n        'default': '数据保存失败，请清理浏览器缓存后重试'\n      },\n      [this.errorTypes.AUTHENTICATION_ERROR]: {\n        'default': '身份验证失败，请重新登录'\n      },\n      [this.errorTypes.AUTHORIZATION_ERROR]: {\n        'default': '您没有权限执行此操作'\n      },\n      [this.errorTypes.SECURITY_ERROR]: {\n        'default': '安全检查失败，请确保输入内容安全'\n      },\n      [this.errorTypes.SYSTEM_ERROR]: {\n        'default': '系统出现错误，请稍后重试'\n      },\n      [this.errorTypes.USER_ERROR]: {\n        'default': '操作失败，请检查输入信息'\n      },\n      [this.errorTypes.UNKNOWN_ERROR]: {\n        'default': '发生未知错误，请联系技术支持'\n      }\n    };\n\n    const typeMessages = errorMessages[errorInfo.type] || errorMessages[this.errorTypes.UNKNOWN_ERROR];\n\n    // 尝试根据字段名获取特定消息\n    if (errorInfo.fieldName && typeMessages[errorInfo.fieldName]) {\n      return typeMessages[errorInfo.fieldName];\n    }\n\n    // 尝试根据错误消息关键词匹配\n    const message = errorInfo.message.toLowerCase();\n    for (const [key, value] of Object.entries(typeMessages)) {\n      if (key !== 'default' && message.includes(key)) {\n        return value;\n      }\n    }\n\n    return typeMessages.default;\n  }\n\n  /**\n     * 显示错误提示\n     */\n  showErrorToast(message, severity = 'error') {\n    // 创建错误提示元素\n    const toast = document.createElement('div');\n    toast.className = `error-toast error-toast-${severity}`;\n    toast.textContent = message;\n\n    // 添加样式\n    toast.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background: ${severity === 'error' ? '#f44336' : '#ff9800'};\n            color: white;\n            padding: 12px 20px;\n            border-radius: 4px;\n            box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n            z-index: 10000;\n            max-width: 400px;\n            word-wrap: break-word;\n            animation: slideIn 0.3s ease-out;\n        `;\n\n    // 添加动画样式\n    if (!document.querySelector('#error-toast-styles')) {\n      const style = document.createElement('style');\n      style.id = 'error-toast-styles';\n      style.textContent = `\n                @keyframes slideIn {\n                    from { transform: translateX(100%); opacity: 0; }\n                    to { transform: translateX(0); opacity: 1; }\n                }\n                @keyframes slideOut {\n                    from { transform: translateX(0); opacity: 1; }\n                    to { transform: translateX(100%); opacity: 0; }\n                }\n            `;\n      document.head.appendChild(style);\n    }\n\n    // 添加到页面\n    document.body.appendChild(toast);\n\n    // 自动移除\n    setTimeout(() => {\n      toast.style.animation = 'slideOut 0.3s ease-in';\n      setTimeout(() => {\n        if (toast.parentNode) {\n          toast.parentNode.removeChild(toast);\n        }\n      }, 300);\n    }, this.config.errorDisplayDuration);\n  }\n\n  /**\n     * 记录错误\n     */\n  logError(errorInfo) {\n    const logLevel = this.config.logLevel;\n    const logMessage = `[${errorInfo.type}] ${errorInfo.message}`;\n\n    switch (errorInfo.severity) {\n    case 'debug':\n      if (logLevel === 'debug') {console.debug(logMessage, errorInfo);}\n      break;\n    case 'info':\n      if (['debug', 'info'].includes(logLevel)) {console.info(logMessage, errorInfo);}\n      break;\n    case 'warn':\n      if (['debug', 'info', 'warn'].includes(logLevel)) {console.warn(logMessage, errorInfo);}\n      break;\n    case 'error':\n    default:\n      console.error(logMessage, errorInfo);\n      break;\n    }\n  }\n\n  /**\n     * 添加到错误历史\n     */\n  addToErrorHistory(errorInfo) {\n    this.errorHistory.unshift(errorInfo);\n\n    // 保持历史记录数量限制\n    if (this.errorHistory.length > this.config.maxErrorHistory) {\n      this.errorHistory = this.errorHistory.slice(0, this.config.maxErrorHistory);\n    }\n\n    // 保存到本地存储\n    this.saveErrorHistory();\n  }\n\n  /**\n     * 加载错误历史记录\n     */\n  async loadErrorHistory() {\n    try {\n      const stored = localStorage.getItem('error_history');\n      if (stored) {\n        this.errorHistory = JSON.parse(stored);\n      }\n    } catch (error) {\n      console.warn('ErrorManager: 加载错误历史失败', error);\n      this.errorHistory = [];\n    }\n  }\n\n  /**\n     * 保存错误历史记录\n     */\n  saveErrorHistory() {\n    try {\n      localStorage.setItem('error_history', JSON.stringify(this.errorHistory));\n    } catch (error) {\n      console.warn('ErrorManager: 保存错误历史失败', error);\n    }\n  }\n\n  /**\n     * 设置错误报告\n     */\n  setupErrorReporting() {\n    // 这里可以集成第三方错误报告服务\n    console.log('ErrorManager: 错误报告功能已启用');\n  }\n\n  /**\n     * 清理存储空间\n     */\n  cleanupStorage() {\n    try {\n      // 清理过期的缓存数据\n      const keysToRemove = [];\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key && (key.startsWith('temp_') || key.startsWith('cache_'))) {\n          keysToRemove.push(key);\n        }\n      }\n\n      keysToRemove.forEach(key => localStorage.removeItem(key));\n      console.log(`ErrorManager: 清理了 ${keysToRemove.length} 个临时存储项`);\n\n    } catch (error) {\n      console.warn('ErrorManager: 存储清理失败', error);\n    }\n  }\n\n  /**\n     * 添加错误监听器\n     */\n  addErrorListener(listener) {\n    this.errorListeners.add(listener);\n  }\n\n  /**\n     * 移除错误监听器\n     */\n  removeErrorListener(listener) {\n    this.errorListeners.delete(listener);\n  }\n\n  /**\n     * 通知错误监听器\n     */\n  notifyErrorListeners(errorInfo) {\n    this.errorListeners.forEach(listener => {\n      try {\n        listener(errorInfo);\n      } catch (error) {\n        console.warn('ErrorManager: 错误监听器执行失败', error);\n      }\n    });\n  }\n\n  /**\n     * 获取错误统计\n     */\n  getErrorStats() {\n    const stats = {\n      total: this.errorHistory.length,\n      byType: {},\n      bySeverity: {},\n      recent: this.errorHistory.slice(0, 10)\n    };\n\n    this.errorHistory.forEach(error => {\n      stats.byType[error.type] = (stats.byType[error.type] || 0) + 1;\n      stats.bySeverity[error.severity] = (stats.bySeverity[error.severity] || 0) + 1;\n    });\n\n    return stats;\n  }\n\n  /**\n     * 清除错误历史\n     */\n  clearErrorHistory() {\n    this.errorHistory = [];\n    this.saveErrorHistory();\n  }\n\n  /**\n     * 生成错误ID\n     */\n  generateErrorId() {\n    return `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n     * 延迟函数\n     */\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n     * 销毁错误管理器\n     */\n  destroy() {\n    this.errorListeners.clear();\n    this.recoveryStrategies.clear();\n    this.isInitialized = false;\n  }\n}\n\n// 导出ErrorManager类\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = ErrorManager;\n} else if (typeof window !== 'undefined') {\n  window.ErrorManager = ErrorManager;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth\\http-client.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth\\input-validator.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth\\password-security.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth\\performance-monitor.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 86400000.","line":23,"column":65,"nodeType":"Literal","messageId":"noMagic","endLine":23,"endColumn":73},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 3600000.","line":136,"column":8,"nodeType":"Literal","messageId":"noMagic","endLine":136,"endColumn":15},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 95.","line":281,"column":74,"nodeType":"Literal","messageId":"noMagic","endLine":281,"endColumn":76},{"ruleId":"no-unused-vars","severity":2,"message":"'success' is defined but never used. Allowed unused args must match /^_/u.","line":310,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":310,"endColumn":58},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: -720.","line":400,"column":67,"nodeType":"UnaryExpression","messageId":"noMagic","endLine":400,"endColumn":71}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 注册流程性能监控模块\n * 提供性能指标收集、分析和报告功能\n * @author AI Assistant\n * @version 1.0\n * @date 2025-01-12\n */\n\nclass PerformanceMonitor {\n  constructor(options = {}) {\n    this.config = {\n      // 监控配置\n      enableRealTimeMonitoring: options.enableRealTimeMonitoring !== false,\n      enableMetricsCollection: options.enableMetricsCollection !== false,\n      enablePerformanceAlerts: options.enablePerformanceAlerts !== false,\n\n      // 性能阈值\n      responseTimeThreshold: options.responseTimeThreshold || 3000, // 3秒\n      errorRateThreshold: options.errorRateThreshold || 0.05, // 5%\n      throughputThreshold: options.throughputThreshold || 100, // 每分钟100次\n\n      // 数据保留\n      metricsRetentionPeriod: options.metricsRetentionPeriod || 86400000, // 24小时\n      samplingRate: options.samplingRate || 1.0, // 100%采样\n\n      // 报告配置\n      reportInterval: options.reportInterval || 300000, // 5分钟\n      enableDetailedReports: options.enableDetailedReports !== false,\n\n      ...options\n    };\n\n    // 性能指标存储\n    this.metrics = {\n      // 响应时间指标\n      responseTimes: [],\n      averageResponseTime: 0,\n      p95ResponseTime: 0,\n      p99ResponseTime: 0,\n\n      // 吞吐量指标\n      requestCount: 0,\n      successCount: 0,\n      errorCount: 0,\n      throughputPerMinute: 0,\n\n      // 错误率指标\n      errorRate: 0,\n      errorTypes: new Map(),\n\n      // 资源使用指标\n      memoryUsage: [],\n      cpuUsage: [],\n\n      // 用户体验指标\n      userSatisfactionScore: 0,\n      abandonmentRate: 0\n    };\n\n    // 实时监控数据\n    this.realTimeData = {\n      activeRequests: new Map(),\n      recentMetrics: [],\n      alerts: [],\n      performanceEvents: []\n    };\n\n    // 性能分析器\n    this.analyzer = {\n      trends: new Map(),\n      patterns: new Map(),\n      anomalies: [],\n      recommendations: []\n    };\n\n    // 定时器\n    this.timers = {\n      metricsCollection: null,\n      reportGeneration: null,\n      dataCleanup: null\n    };\n\n    // 初始化\n    this.initialize();\n  }\n\n  /**\n   * 初始化性能监控器\n   */\n  initialize() {\n    try {\n      this.setupMetricsCollection();\n      this.setupReportGeneration();\n      this.setupDataCleanup();\n      this.setupPerformanceObserver();\n\n      if (this.config.enableRealTimeMonitoring) {\n        this.startRealTimeMonitoring();\n      }\n\n      console.log('PerformanceMonitor initialized successfully');\n    } catch (error) {\n      console.error('Failed to initialize PerformanceMonitor:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 设置指标收集\n   */\n  setupMetricsCollection() {\n    if (!this.config.enableMetricsCollection) {return;}\n\n    this.timers.metricsCollection = setInterval(() => {\n      this.collectSystemMetrics();\n      this.analyzePerformanceTrends();\n    }, 60000); // 每分钟收集一次\n  }\n\n  /**\n   * 设置报告生成\n   */\n  setupReportGeneration() {\n    this.timers.reportGeneration = setInterval(() => {\n      this.generatePerformanceReport();\n      this.checkPerformanceAlerts();\n    }, this.config.reportInterval);\n  }\n\n  /**\n   * 设置数据清理\n   */\n  setupDataCleanup() {\n    this.timers.dataCleanup = setInterval(() => {\n      this.cleanupOldMetrics();\n    }, 3600000); // 每小时清理一次\n  }\n\n  /**\n   * 设置性能观察器\n   */\n  setupPerformanceObserver() {\n    if (typeof PerformanceObserver !== 'undefined') {\n      try {\n        const observer = new PerformanceObserver((list) => {\n          for (const entry of list.getEntries()) {\n            this.processPerformanceEntry(entry);\n          }\n        });\n\n        observer.observe({ entryTypes: ['measure', 'navigation', 'resource'] });\n      } catch (error) {\n        console.warn('PerformanceObserver not supported:', error);\n      }\n    }\n  }\n\n  /**\n   * 开始请求监控\n   */\n  startRequest(requestId, operation, metadata = {}) {\n    const startTime = performance.now();\n\n    this.realTimeData.activeRequests.set(requestId, {\n      operation,\n      startTime,\n      metadata,\n      status: 'active'\n    });\n\n    // 记录性能标记\n    if (typeof performance !== 'undefined' && performance.mark) {\n      performance.mark(`${operation}-start-${requestId}`);\n    }\n\n    return requestId;\n  }\n\n  /**\n   * 结束请求监控\n   */\n  endRequest(requestId, success = true, error = null, result = null) {\n    const request = this.realTimeData.activeRequests.get(requestId);\n    if (!request) {return;}\n\n    const endTime = performance.now();\n    const duration = endTime - request.startTime;\n\n    // 记录性能标记和测量\n    if (typeof performance !== 'undefined' && performance.mark && performance.measure) {\n      performance.mark(`${request.operation}-end-${requestId}`);\n      performance.measure(\n        `${request.operation}-duration-${requestId}`,\n        `${request.operation}-start-${requestId}`,\n        `${request.operation}-end-${requestId}`\n      );\n    }\n\n    // 更新指标\n    this.updateMetrics({\n      operation: request.operation,\n      duration,\n      success,\n      error,\n      result,\n      metadata: request.metadata\n    });\n\n    // 移除活跃请求\n    this.realTimeData.activeRequests.delete(requestId);\n\n    // 检查性能阈值\n    this.checkPerformanceThresholds(request.operation, duration, success);\n\n    return {\n      operation: request.operation,\n      duration,\n      success,\n      timestamp: endTime\n    };\n  }\n\n  /**\n   * 更新性能指标\n   */\n  updateMetrics(data) {\n    const { operation, duration, success, error } = data;\n\n    // 更新请求计数\n    this.metrics.requestCount++;\n    if (success) {\n      this.metrics.successCount++;\n    } else {\n      this.metrics.errorCount++;\n\n      // 记录错误类型\n      const errorType = error?.name || 'UnknownError';\n      const currentCount = this.metrics.errorTypes.get(errorType) || 0;\n      this.metrics.errorTypes.set(errorType, currentCount + 1);\n    }\n\n    // 更新响应时间\n    this.metrics.responseTimes.push({\n      operation,\n      duration,\n      timestamp: Date.now(),\n      success\n    });\n\n    // 计算统计指标\n    this.calculateStatistics();\n\n    // 记录实时数据\n    this.realTimeData.recentMetrics.push({\n      operation,\n      duration,\n      success,\n      timestamp: Date.now()\n    });\n\n    // 限制实时数据大小\n    if (this.realTimeData.recentMetrics.length > 1000) {\n      this.realTimeData.recentMetrics = this.realTimeData.recentMetrics.slice(-500);\n    }\n  }\n\n  /**\n   * 计算统计指标\n   */\n  calculateStatistics() {\n    const recentResponses = this.metrics.responseTimes.slice(-100); // 最近100次请求\n\n    if (recentResponses.length === 0) {return;}\n\n    // 计算平均响应时间\n    const totalTime = recentResponses.reduce((sum, item) => sum + item.duration, 0);\n    this.metrics.averageResponseTime = totalTime / recentResponses.length;\n\n    // 计算百分位数\n    const sortedTimes = recentResponses.map(item => item.duration).sort((a, b) => a - b);\n    this.metrics.p95ResponseTime = this.calculatePercentile(sortedTimes, 95);\n    this.metrics.p99ResponseTime = this.calculatePercentile(sortedTimes, 99);\n\n    // 计算错误率\n    this.metrics.errorRate = this.metrics.requestCount > 0\n      ? this.metrics.errorCount / this.metrics.requestCount\n      : 0;\n\n    // 计算吞吐量（每分钟请求数）\n    const oneMinuteAgo = Date.now() - 60000;\n    const recentRequests = this.realTimeData.recentMetrics.filter(\n      metric => metric.timestamp > oneMinuteAgo\n    );\n    this.metrics.throughputPerMinute = recentRequests.length;\n  }\n\n  /**\n   * 计算百分位数\n   */\n  calculatePercentile(sortedArray, percentile) {\n    if (sortedArray.length === 0) {return 0;}\n\n    const index = Math.ceil((percentile / 100) * sortedArray.length) - 1;\n    return sortedArray[Math.max(0, index)];\n  }\n\n  /**\n   * 检查性能阈值\n   */\n  checkPerformanceThresholds(operation, duration, success) {\n    const alerts = [];\n\n    // 检查响应时间阈值\n    if (duration > this.config.responseTimeThreshold) {\n      alerts.push({\n        type: 'SLOW_RESPONSE',\n        operation,\n        duration,\n        threshold: this.config.responseTimeThreshold,\n        timestamp: Date.now(),\n        severity: duration > this.config.responseTimeThreshold * 2 ? 'HIGH' : 'MEDIUM'\n      });\n    }\n\n    // 检查错误率阈值\n    if (this.metrics.errorRate > this.config.errorRateThreshold) {\n      alerts.push({\n        type: 'HIGH_ERROR_RATE',\n        errorRate: this.metrics.errorRate,\n        threshold: this.config.errorRateThreshold,\n        timestamp: Date.now(),\n        severity: 'HIGH'\n      });\n    }\n\n    // 检查吞吐量阈值\n    if (this.metrics.throughputPerMinute < this.config.throughputThreshold) {\n      alerts.push({\n        type: 'LOW_THROUGHPUT',\n        throughput: this.metrics.throughputPerMinute,\n        threshold: this.config.throughputThreshold,\n        timestamp: Date.now(),\n        severity: 'MEDIUM'\n      });\n    }\n\n    // 添加告警\n    alerts.forEach(alert => this.addAlert(alert));\n  }\n\n  /**\n   * 添加性能告警\n   */\n  addAlert(alert) {\n    this.realTimeData.alerts.push(alert);\n\n    // 限制告警数量\n    if (this.realTimeData.alerts.length > 100) {\n      this.realTimeData.alerts = this.realTimeData.alerts.slice(-50);\n    }\n\n    // 触发告警事件\n    if (this.config.enablePerformanceAlerts) {\n      this.dispatchAlert(alert);\n    }\n  }\n\n  /**\n   * 分发性能告警\n   */\n  dispatchAlert(alert) {\n    const event = new CustomEvent('performance-alert', {\n      detail: alert\n    });\n\n    if (typeof window !== 'undefined') {\n      window.dispatchEvent(event);\n    }\n\n    console.warn('Performance Alert:', alert);\n  }\n\n  /**\n   * 收集系统指标\n   */\n  collectSystemMetrics() {\n    try {\n      // 收集内存使用情况\n      if (typeof performance !== 'undefined' && performance.memory) {\n        this.metrics.memoryUsage.push({\n          used: performance.memory.usedJSHeapSize,\n          total: performance.memory.totalJSHeapSize,\n          limit: performance.memory.jsHeapSizeLimit,\n          timestamp: Date.now()\n        });\n      }\n\n      // 限制历史数据大小\n      if (this.metrics.memoryUsage.length > 1440) { // 24小时数据\n        this.metrics.memoryUsage = this.metrics.memoryUsage.slice(-720);\n      }\n    } catch (error) {\n      console.warn('Failed to collect system metrics:', error);\n    }\n  }\n\n  /**\n   * 分析性能趋势\n   */\n  analyzePerformanceTrends() {\n    const recentMetrics = this.realTimeData.recentMetrics.slice(-100);\n    if (recentMetrics.length < 10) {return;}\n\n    // 分析响应时间趋势\n    const responseTrend = this.calculateTrend(\n      recentMetrics.map(m => ({ x: m.timestamp, y: m.duration }))\n    );\n\n    this.analyzer.trends.set('responseTime', {\n      direction: responseTrend > 0 ? 'increasing' : 'decreasing',\n      slope: responseTrend,\n      timestamp: Date.now()\n    });\n\n    // 检测异常\n    this.detectAnomalies(recentMetrics);\n  }\n\n  /**\n   * 计算趋势斜率\n   */\n  calculateTrend(dataPoints) {\n    if (dataPoints.length < 2) {return 0;}\n\n    const n = dataPoints.length;\n    const sumX = dataPoints.reduce((sum, point) => sum + point.x, 0);\n    const sumY = dataPoints.reduce((sum, point) => sum + point.y, 0);\n    const sumXY = dataPoints.reduce((sum, point) => sum + point.x * point.y, 0);\n    const sumXX = dataPoints.reduce((sum, point) => sum + point.x * point.x, 0);\n\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n    return isNaN(slope) ? 0 : slope;\n  }\n\n  /**\n   * 检测性能异常\n   */\n  detectAnomalies(metrics) {\n    const durations = metrics.map(m => m.duration);\n    const mean = durations.reduce((sum, d) => sum + d, 0) / durations.length;\n    const variance = durations.reduce((sum, d) => sum + Math.pow(d - mean, 2), 0) / durations.length;\n    const stdDev = Math.sqrt(variance);\n\n    const threshold = mean + 2 * stdDev; // 2σ阈值\n\n    metrics.forEach(metric => {\n      if (metric.duration > threshold) {\n        this.analyzer.anomalies.push({\n          type: 'RESPONSE_TIME_ANOMALY',\n          value: metric.duration,\n          threshold,\n          timestamp: metric.timestamp,\n          operation: metric.operation\n        });\n      }\n    });\n\n    // 限制异常记录数量\n    if (this.analyzer.anomalies.length > 100) {\n      this.analyzer.anomalies = this.analyzer.anomalies.slice(-50);\n    }\n  }\n\n  /**\n   * 生成性能报告\n   */\n  generatePerformanceReport() {\n    const report = {\n      timestamp: Date.now(),\n      period: this.config.reportInterval,\n\n      // 基础指标\n      metrics: {\n        totalRequests: this.metrics.requestCount,\n        successfulRequests: this.metrics.successCount,\n        failedRequests: this.metrics.errorCount,\n        errorRate: this.metrics.errorRate,\n        averageResponseTime: this.metrics.averageResponseTime,\n        p95ResponseTime: this.metrics.p95ResponseTime,\n        p99ResponseTime: this.metrics.p99ResponseTime,\n        throughputPerMinute: this.metrics.throughputPerMinute\n      },\n\n      // 错误分析\n      errors: {\n        totalErrors: this.metrics.errorCount,\n        errorTypes: Object.fromEntries(this.metrics.errorTypes),\n        topErrors: this.getTopErrors()\n      },\n\n      // 性能趋势\n      trends: Object.fromEntries(this.analyzer.trends),\n\n      // 异常检测\n      anomalies: this.analyzer.anomalies.slice(-10), // 最近10个异常\n\n      // 告警信息\n      alerts: this.realTimeData.alerts.slice(-20), // 最近20个告警\n\n      // 系统资源\n      systemMetrics: {\n        memoryUsage: this.metrics.memoryUsage.slice(-1)[0] || null\n      },\n\n      // 性能建议\n      recommendations: this.generateRecommendations()\n    };\n\n    // 触发报告事件\n    this.dispatchReportEvent(report);\n\n    return report;\n  }\n\n  /**\n   * 获取错误排行\n   */\n  getTopErrors() {\n    return Array.from(this.metrics.errorTypes.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 5)\n      .map(([type, count]) => ({ type, count }));\n  }\n\n  /**\n   * 生成性能建议\n   */\n  generateRecommendations() {\n    const recommendations = [];\n\n    // 响应时间建议\n    if (this.metrics.averageResponseTime > this.config.responseTimeThreshold * 0.8) {\n      recommendations.push({\n        type: 'PERFORMANCE',\n        priority: 'HIGH',\n        message: '平均响应时间接近阈值，建议优化性能',\n        suggestion: '考虑优化数据库查询、减少网络请求或使用缓存'\n      });\n    }\n\n    // 错误率建议\n    if (this.metrics.errorRate > this.config.errorRateThreshold * 0.5) {\n      recommendations.push({\n        type: 'RELIABILITY',\n        priority: 'HIGH',\n        message: '错误率较高，需要改善系统稳定性',\n        suggestion: '检查错误日志，修复常见错误，增强错误处理'\n      });\n    }\n\n    // 吞吐量建议\n    if (this.metrics.throughputPerMinute < this.config.throughputThreshold * 0.7) {\n      recommendations.push({\n        type: 'CAPACITY',\n        priority: 'MEDIUM',\n        message: '系统吞吐量较低，可能需要扩容',\n        suggestion: '考虑增加服务器资源或优化并发处理能力'\n      });\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * 分发报告事件\n   */\n  dispatchReportEvent(report) {\n    const event = new CustomEvent('performance-report', {\n      detail: report\n    });\n\n    if (typeof window !== 'undefined') {\n      window.dispatchEvent(event);\n    }\n\n    if (this.config.enableDetailedReports) {\n      console.log('Performance Report:', report);\n    }\n  }\n\n  /**\n   * 检查性能告警\n   */\n  checkPerformanceAlerts() {\n    const recentAlerts = this.realTimeData.alerts.filter(\n      alert => Date.now() - alert.timestamp < 300000 // 5分钟内\n    );\n\n    const highSeverityAlerts = recentAlerts.filter(alert => alert.severity === 'HIGH');\n\n    if (highSeverityAlerts.length > 0) {\n      console.warn(`检测到 ${highSeverityAlerts.length} 个高严重性性能告警`);\n    }\n  }\n\n  /**\n   * 清理过期指标\n   */\n  cleanupOldMetrics() {\n    const cutoffTime = Date.now() - this.config.metricsRetentionPeriod;\n\n    // 清理响应时间数据\n    this.metrics.responseTimes = this.metrics.responseTimes.filter(\n      item => item.timestamp > cutoffTime\n    );\n\n    // 清理实时指标\n    this.realTimeData.recentMetrics = this.realTimeData.recentMetrics.filter(\n      metric => metric.timestamp > cutoffTime\n    );\n\n    // 清理内存使用数据\n    this.metrics.memoryUsage = this.metrics.memoryUsage.filter(\n      item => item.timestamp > cutoffTime\n    );\n\n    // 清理告警数据\n    this.realTimeData.alerts = this.realTimeData.alerts.filter(\n      alert => alert.timestamp > cutoffTime\n    );\n  }\n\n  /**\n   * 处理性能条目\n   */\n  processPerformanceEntry(entry) {\n    if (entry.entryType === 'measure' && entry.name.includes('registration')) {\n      this.realTimeData.performanceEvents.push({\n        name: entry.name,\n        duration: entry.duration,\n        startTime: entry.startTime,\n        timestamp: Date.now()\n      });\n    }\n  }\n\n  /**\n   * 开始实时监控\n   */\n  startRealTimeMonitoring() {\n    // 监控活跃请求超时\n    setInterval(() => {\n      const now = performance.now();\n      const timeoutThreshold = 30000; // 30秒超时\n\n      for (const [requestId, request] of this.realTimeData.activeRequests) {\n        if (now - request.startTime > timeoutThreshold) {\n          this.addAlert({\n            type: 'REQUEST_TIMEOUT',\n            requestId,\n            operation: request.operation,\n            duration: now - request.startTime,\n            timestamp: Date.now(),\n            severity: 'HIGH'\n          });\n\n          // 移除超时请求\n          this.realTimeData.activeRequests.delete(requestId);\n        }\n      }\n    }, 10000); // 每10秒检查一次\n  }\n\n  /**\n   * 获取实时性能数据\n   */\n  getRealTimeMetrics() {\n    return {\n      activeRequests: this.realTimeData.activeRequests.size,\n      recentMetrics: this.realTimeData.recentMetrics.slice(-20),\n      currentThroughput: this.metrics.throughputPerMinute,\n      averageResponseTime: this.metrics.averageResponseTime,\n      errorRate: this.metrics.errorRate,\n      alerts: this.realTimeData.alerts.slice(-10)\n    };\n  }\n\n  /**\n   * 获取性能摘要\n   */\n  getPerformanceSummary() {\n    return {\n      status: this.getOverallStatus(),\n      metrics: {\n        totalRequests: this.metrics.requestCount,\n        successRate: this.metrics.requestCount > 0\n          ? (this.metrics.successCount / this.metrics.requestCount) * 100\n          : 0,\n        averageResponseTime: this.metrics.averageResponseTime,\n        throughput: this.metrics.throughputPerMinute\n      },\n      health: {\n        responseTimeHealth: this.metrics.averageResponseTime < this.config.responseTimeThreshold ? 'GOOD' : 'POOR',\n        errorRateHealth: this.metrics.errorRate < this.config.errorRateThreshold ? 'GOOD' : 'POOR',\n        throughputHealth: this.metrics.throughputPerMinute > this.config.throughputThreshold ? 'GOOD' : 'POOR'\n      }\n    };\n  }\n\n  /**\n   * 获取整体状态\n   */\n  getOverallStatus() {\n    const recentAlerts = this.realTimeData.alerts.filter(\n      alert => Date.now() - alert.timestamp < 300000 // 5分钟内\n    );\n\n    const highSeverityAlerts = recentAlerts.filter(alert => alert.severity === 'HIGH');\n\n    if (highSeverityAlerts.length > 0) {\n      return 'CRITICAL';\n    } else if (recentAlerts.length > 0) {\n      return 'WARNING';\n    }\n    return 'HEALTHY';\n\n  }\n\n  /**\n   * 重置性能监控器\n   */\n  reset() {\n    // 重置指标\n    this.metrics = {\n      responseTimes: [],\n      averageResponseTime: 0,\n      p95ResponseTime: 0,\n      p99ResponseTime: 0,\n      requestCount: 0,\n      successCount: 0,\n      errorCount: 0,\n      throughputPerMinute: 0,\n      errorRate: 0,\n      errorTypes: new Map(),\n      memoryUsage: [],\n      cpuUsage: [],\n      userSatisfactionScore: 0,\n      abandonmentRate: 0\n    };\n\n    // 重置实时数据\n    this.realTimeData = {\n      activeRequests: new Map(),\n      recentMetrics: [],\n      alerts: [],\n      performanceEvents: []\n    };\n\n    // 重置分析器\n    this.analyzer = {\n      trends: new Map(),\n      patterns: new Map(),\n      anomalies: [],\n      recommendations: []\n    };\n  }\n\n  /**\n   * 销毁性能监控器\n   */\n  destroy() {\n    // 清理定时器\n    Object.values(this.timers).forEach(timer => {\n      if (timer) {clearInterval(timer);}\n    });\n\n    // 重置数据\n    this.reset();\n  }\n}\n\n// 导出模块\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = PerformanceMonitor;\n}\n\nif (typeof window !== 'undefined') {\n  window.PerformanceMonitor = PerformanceMonitor;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth\\registration-event-integration.js","messages":[{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 999.","line":145,"column":59,"nodeType":"Literal","messageId":"noMagic","endLine":145,"endColumn":62},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 999.","line":146,"column":59,"nodeType":"Literal","messageId":"noMagic","endLine":146,"endColumn":62},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 999.","line":323,"column":57,"nodeType":"Literal","messageId":"noMagic","endLine":323,"endColumn":60}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 注册事件集成模块\n * 统一管理注册相关的事件触发和处理，与现有事件系统集成\n *\n * 功能特性：\n * - 统一的事件命名规范\n * - 事件优先级管理\n * - 错误处理和恢复\n * - 性能监控\n * - 与现有系统的无缝集成\n */\n\nclass RegistrationEventIntegration {\n  constructor(options = {}) {\n    this.config = {\n      enableEventLogging: true,\n      enablePerformanceMonitoring: true,\n      enableErrorRecovery: true,\n      eventTimeout: 5000,\n      maxRetries: 3,\n      ...options\n    };\n\n    // 事件监听器存储\n    this.eventListeners = new Map();\n\n    // 事件统计\n    this.eventStats = {\n      totalEvents: 0,\n      successfulEvents: 0,\n      failedEvents: 0,\n      averageExecutionTime: 0,\n      eventsByType: {},\n      retryCount: 0\n    };\n\n    // 事件队列（用于批处理和优先级管理）\n    this.eventQueue = [];\n    this.isProcessingQueue = false;\n\n    // 初始化\n    this.init();\n  }\n\n  /**\n   * 初始化事件集成系统\n   */\n  init() {\n    // 注册标准注册事件类型\n    this.registerStandardEvents();\n\n    // 设置错误处理\n    this.setupErrorHandling();\n\n    // 启动事件队列处理\n    this.startQueueProcessor();\n\n    if (this.config.enableEventLogging) {\n      console.log('RegistrationEventIntegration initialized');\n    }\n  }\n\n  /**\n   * 注册标准注册事件类型\n   */\n  registerStandardEvents() {\n    this.eventTypes = {\n      // 注册流程事件\n      REGISTRATION_STARTED: 'registration:started',\n      REGISTRATION_VALIDATION_STARTED: 'registration:validation:started',\n      REGISTRATION_VALIDATION_SUCCESS: 'registration:validation:success',\n      REGISTRATION_VALIDATION_FAILED: 'registration:validation:failed',\n      REGISTRATION_SECURITY_CHECK_STARTED: 'registration:security:started',\n      REGISTRATION_SECURITY_CHECK_SUCCESS: 'registration:security:success',\n      REGISTRATION_SECURITY_CHECK_FAILED: 'registration:security:failed',\n      REGISTRATION_UNIQUENESS_CHECK_STARTED: 'registration:uniqueness:started',\n      REGISTRATION_UNIQUENESS_CHECK_SUCCESS: 'registration:uniqueness:success',\n      REGISTRATION_UNIQUENESS_CHECK_FAILED: 'registration:uniqueness:failed',\n      REGISTRATION_STORAGE_STARTED: 'registration:storage:started',\n      REGISTRATION_STORAGE_SUCCESS: 'registration:storage:success',\n      REGISTRATION_STORAGE_FAILED: 'registration:storage:failed',\n      REGISTRATION_SUCCESS: 'registration:success',\n      REGISTRATION_FAILED: 'registration:failed',\n      REGISTRATION_CANCELLED: 'registration:cancelled',\n\n      // 用户交互事件\n      USER_INPUT_CHANGED: 'user:input:changed',\n      USER_FORM_SUBMITTED: 'user:form:submitted',\n      USER_FORM_RESET: 'user:form:reset',\n\n      // 系统事件\n      SYSTEM_ERROR: 'system:error',\n      SYSTEM_WARNING: 'system:warning',\n      SYSTEM_INFO: 'system:info',\n\n      // 性能事件\n      PERFORMANCE_METRIC: 'performance:metric',\n      PERFORMANCE_WARNING: 'performance:warning'\n    };\n\n    // 事件优先级定义\n    this.eventPriorities = {\n      [this.eventTypes.SYSTEM_ERROR]: 1,\n      [this.eventTypes.REGISTRATION_FAILED]: 2,\n      [this.eventTypes.REGISTRATION_SUCCESS]: 3,\n      [this.eventTypes.REGISTRATION_STARTED]: 4,\n      [this.eventTypes.USER_FORM_SUBMITTED]: 5,\n      [this.eventTypes.PERFORMANCE_WARNING]: 6,\n      [this.eventTypes.USER_INPUT_CHANGED]: 10\n    };\n  }\n\n  /**\n   * 设置错误处理\n   */\n  setupErrorHandling() {\n    // 与现有错误管理器集成\n    if (typeof window !== 'undefined' && window.errorManager) {\n      this.errorManager = window.errorManager;\n    }\n  }\n\n  /**\n   * 启动事件队列处理器\n   */\n  startQueueProcessor() {\n    setInterval(() => {\n      this.processEventQueue();\n    }, 100); // 每100ms处理一次队列\n  }\n\n  /**\n   * 处理事件队列\n   */\n  async processEventQueue() {\n    if (this.isProcessingQueue || this.eventQueue.length === 0) {\n      return;\n    }\n\n    this.isProcessingQueue = true;\n\n    try {\n      // 按优先级排序\n      this.eventQueue.sort((a, b) => {\n        const priorityA = this.eventPriorities[a.type] || 999;\n        const priorityB = this.eventPriorities[b.type] || 999;\n        return priorityA - priorityB;\n      });\n\n      // 处理队列中的事件\n      while (this.eventQueue.length > 0) {\n        const eventData = this.eventQueue.shift();\n        await this.processEvent(eventData);\n      }\n    } catch (error) {\n      if (this.errorManager) {\n        this.errorManager.handleError(error, {\n          context: 'RegistrationEventIntegration.processEventQueue',\n          severity: 'warning'\n        });\n      } else {\n        console.error('Event queue processing error:', error);\n      }\n    } finally {\n      this.isProcessingQueue = false;\n    }\n  }\n\n  /**\n   * 处理单个事件\n   */\n  async processEvent(eventData) {\n    const startTime = Date.now();\n    let success = false;\n\n    try {\n      // 获取事件监听器\n      const listeners = this.eventListeners.get(eventData.type) || [];\n\n      if (listeners.length === 0) {\n        if (this.config.enableEventLogging) {\n          console.log(`No listeners for event: ${eventData.type}`);\n        }\n        return;\n      }\n\n      // 执行所有监听器\n      const promises = listeners.map(async (listener) => {\n        try {\n          if (typeof listener.handler === 'function') {\n            await listener.handler(eventData);\n          }\n        } catch (error) {\n          if (this.errorManager) {\n            this.errorManager.handleError(error, {\n              context: `RegistrationEventIntegration.listener.${eventData.type}`,\n              severity: 'warning'\n            });\n          } else {\n            console.error(`Event listener error for ${eventData.type}:`, error);\n          }\n          throw error;\n        }\n      });\n\n      await Promise.allSettled(promises);\n      success = true;\n\n    } catch (error) {\n      if (this.config.enableErrorRecovery && eventData.retryCount < this.config.maxRetries) {\n        eventData.retryCount = (eventData.retryCount || 0) + 1;\n        this.eventQueue.push(eventData);\n        this.eventStats.retryCount++;\n      } else {\n        this.eventStats.failedEvents++;\n        if (this.errorManager) {\n          this.errorManager.handleError(error, {\n            context: 'RegistrationEventIntegration.processEvent',\n            severity: 'error',\n            eventType: eventData.type\n          });\n        }\n      }\n    } finally {\n      const executionTime = Date.now() - startTime;\n      this.updateStats(eventData.type, success, executionTime);\n    }\n  }\n\n  /**\n   * 更新统计信息\n   */\n  updateStats(eventType, success, executionTime) {\n    this.eventStats.totalEvents++;\n\n    if (success) {\n      this.eventStats.successfulEvents++;\n    }\n\n    // 更新事件类型统计\n    if (!this.eventStats.eventsByType[eventType]) {\n      this.eventStats.eventsByType[eventType] = 0;\n    }\n    this.eventStats.eventsByType[eventType]++;\n\n    // 更新平均执行时间\n    const totalEvents = this.eventStats.totalEvents;\n    const currentAverage = this.eventStats.averageExecutionTime;\n    this.eventStats.averageExecutionTime =\n      ((currentAverage * (totalEvents - 1)) + executionTime) / totalEvents;\n\n    // 性能警告\n    if (this.config.enablePerformanceMonitoring && executionTime > 1000) {\n      this.emit(this.eventTypes.PERFORMANCE_WARNING, {\n        eventType,\n        executionTime,\n        threshold: 1000\n      });\n    }\n  }\n\n  /**\n   * 添加事件监听器\n   */\n  on(eventType, handler, options = {}) {\n    if (!this.eventListeners.has(eventType)) {\n      this.eventListeners.set(eventType, []);\n    }\n\n    const listener = {\n      handler,\n      options,\n      id: this.generateListenerId(),\n      createdAt: new Date().toISOString()\n    };\n\n    this.eventListeners.get(eventType).push(listener);\n\n    if (this.config.enableEventLogging) {\n      console.log(`Event listener added for: ${eventType}`);\n    }\n\n    return listener.id;\n  }\n\n  /**\n   * 移除事件监听器\n   */\n  off(eventType, listenerId) {\n    if (!this.eventListeners.has(eventType)) {\n      return false;\n    }\n\n    const listeners = this.eventListeners.get(eventType);\n    const index = listeners.findIndex(l => l.id === listenerId);\n\n    if (index !== -1) {\n      listeners.splice(index, 1);\n      if (this.config.enableEventLogging) {\n        console.log(`Event listener removed for: ${eventType}`);\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * 触发事件\n   */\n  emit(eventType, data = {}, options = {}) {\n    const eventData = {\n      type: eventType,\n      data,\n      timestamp: new Date().toISOString(),\n      id: this.generateEventId(),\n      source: 'RegistrationEventIntegration',\n      retryCount: 0,\n      ...options\n    };\n\n    // 立即处理高优先级事件\n    const priority = this.eventPriorities[eventType] || 999;\n    if (priority <= 3) {\n      this.processEvent(eventData);\n    } else {\n      this.eventQueue.push(eventData);\n    }\n\n    if (this.config.enableEventLogging) {\n      console.log(`Event emitted: ${eventType}`, data);\n    }\n\n    // 与现有事件系统集成\n    this.integrateWithExistingSystems(eventType, data);\n  }\n\n  /**\n   * 与现有事件系统集成\n   */\n  integrateWithExistingSystems(eventType, data) {\n    // 与registration-manager的事件总线集成\n    if (typeof window !== 'undefined' && window.registrationManager) {\n      try {\n        if (typeof window.registrationManager.emit === 'function') {\n          window.registrationManager.emit(eventType, data);\n        }\n      } catch (error) {\n        console.warn('Failed to integrate with registration manager events:', error);\n      }\n    }\n\n    // 与DOM事件系统集成\n    if (typeof window !== 'undefined' && window.document) {\n      try {\n        const customEvent = new CustomEvent(eventType, {\n          detail: data,\n          bubbles: true,\n          cancelable: true\n        });\n        window.document.dispatchEvent(customEvent);\n      } catch (error) {\n        console.warn('Failed to dispatch DOM event:', error);\n      }\n    }\n\n    // 与utils.js的EventDelegator集成\n    if (typeof window !== 'undefined' && window.eventDelegator) {\n      try {\n        if (typeof window.eventDelegator.emit === 'function') {\n          window.eventDelegator.emit(eventType, data);\n        }\n      } catch (error) {\n        console.warn('Failed to integrate with event delegator:', error);\n      }\n    }\n  }\n\n  /**\n   * 生成监听器ID\n   */\n  generateListenerId() {\n    return `listener_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * 生成事件ID\n   */\n  generateEventId() {\n    return `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * 获取事件统计信息\n   */\n  getStats() {\n    return { ...this.eventStats };\n  }\n\n  /**\n   * 获取所有事件类型\n   */\n  getEventTypes() {\n    return { ...this.eventTypes };\n  }\n\n  /**\n   * 清理资源\n   */\n  destroy() {\n    this.eventListeners.clear();\n    this.eventQueue.length = 0;\n\n    if (this.config.enableEventLogging) {\n      console.log('RegistrationEventIntegration destroyed');\n    }\n  }\n\n  /**\n   * 注册流程专用方法\n   */\n\n  /**\n   * 触发注册开始事件\n   */\n  emitRegistrationStarted(userData) {\n    this.emit(this.eventTypes.REGISTRATION_STARTED, {\n      user: userData,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * 触发注册成功事件\n   */\n  emitRegistrationSuccess(userData, registrationResult) {\n    this.emit(this.eventTypes.REGISTRATION_SUCCESS, {\n      user: userData,\n      result: registrationResult,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * 触发注册失败事件\n   */\n  emitRegistrationFailed(userData, error) {\n    this.emit(this.eventTypes.REGISTRATION_FAILED, {\n      user: userData,\n      error: {\n        message: error.message,\n        type: error.type || 'unknown',\n        code: error.code\n      },\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * 触发验证事件\n   */\n  emitValidationEvent(type, field, value, result) {\n    const eventType = result.isValid ?\n      this.eventTypes.REGISTRATION_VALIDATION_SUCCESS :\n      this.eventTypes.REGISTRATION_VALIDATION_FAILED;\n\n    this.emit(eventType, {\n      field,\n      value,\n      result,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * 触发安全检查事件\n   */\n  emitSecurityEvent(type, checkType, result) {\n    const eventType = result.passed ?\n      this.eventTypes.REGISTRATION_SECURITY_CHECK_SUCCESS :\n      this.eventTypes.REGISTRATION_SECURITY_CHECK_FAILED;\n\n    this.emit(eventType, {\n      checkType,\n      result,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * 触发唯一性检查事件\n   */\n  emitUniquenessEvent(field, value, result) {\n    const eventType = result.isUnique ?\n      this.eventTypes.REGISTRATION_UNIQUENESS_CHECK_SUCCESS :\n      this.eventTypes.REGISTRATION_UNIQUENESS_CHECK_FAILED;\n\n    this.emit(eventType, {\n      field,\n      value,\n      result,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * 触发存储事件\n   */\n  emitStorageEvent(operation, result) {\n    const eventType = result.success ?\n      this.eventTypes.REGISTRATION_STORAGE_SUCCESS :\n      this.eventTypes.REGISTRATION_STORAGE_FAILED;\n\n    this.emit(eventType, {\n      operation,\n      result,\n      timestamp: new Date().toISOString()\n    });\n  }\n}\n\n// 创建全局实例\nif (typeof window !== 'undefined') {\n  window.RegistrationEventIntegration = RegistrationEventIntegration;\n\n  // 创建默认实例\n  if (!window.registrationEventIntegration) {\n    window.registrationEventIntegration = new RegistrationEventIntegration();\n  }\n}\n\n// 导出模块\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { RegistrationEventIntegration };\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth\\registration-manager.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'UniquenessChecker' is not defined.","line":92,"column":36,"nodeType":"Identifier","messageId":"undef","endLine":92,"endColumn":53}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 用户注册流程管理器\n * 整合验证、安全、唯一性检查，实现完整注册流程\n * @author AI Assistant\n * @version 1.0\n * @date 2025-01-12\n */\n\nclass RegistrationManager {\n  constructor(options = {}) {\n    this.config = {\n      // 注册流程配置\n      enableEmailVerification: options.enableEmailVerification !== false,\n      enableUsernameReservation: options.enableUsernameReservation !== false,\n      reservationTimeout: options.reservationTimeout || 300000, // 5分钟\n\n      // 重试配置\n      maxRetryAttempts: options.maxRetryAttempts || 3,\n      retryDelay: options.retryDelay || 1000,\n\n      // 安全配置\n      enableRateLimiting: options.enableRateLimiting !== false,\n      enableConcurrencyControl: options.enableConcurrencyControl !== false,\n      enableSecurityProtection: options.enableSecurityProtection !== false,\n\n      // 存储配置\n      enableDataStorage: options.enableDataStorage !== false,\n      enableDataPersistence: options.enableDataPersistence !== false,\n      enableDataBackup: options.enableDataBackup !== false,\n\n      ...options\n    };\n\n    // 依赖模块\n    this.inputValidator = null;\n    this.passwordSecurity = null;\n    this.uniquenessChecker = null;\n    this.apiManager = null;\n    this.eventBus = null;\n    this.securityManager = null;\n    this.storageManager = null;\n    this.resilienceManager = null;\n    this.performanceMonitor = null;\n\n    // 注册状态跟踪\n    this.registrationState = new Map();\n    this.activeRegistrations = new Set();\n\n    // 初始化\n    this.initialize();\n  }\n\n  /**\n   * 初始化注册管理器\n   */\n  initialize() {\n    try {\n      this.initializeDependencies();\n      this.setupEventListeners();\n      console.log('注册管理器初始化完成');\n    } catch (error) {\n      console.error('注册管理器初始化失败:', error);\n      throw new Error('注册管理器初始化失败');\n    }\n  }\n\n  /**\n   * 初始化依赖模块\n   */\n  initializeDependencies() {\n    // 输入验证模块\n    if (typeof window !== 'undefined' && window.RealTimeValidationManager) {\n      this.inputValidator = new window.RealTimeValidationManager({\n        enableRealTimeValidation: true,\n        showValidationMessages: true\n      });\n    } else {\n      console.warn('RealTimeValidationManager not available');\n    }\n\n    // 密码安全模块\n    if (typeof window !== 'undefined' && window.PasswordSecurityManager) {\n      this.passwordSecurity = new window.PasswordSecurityManager();\n    } else {\n      console.warn('PasswordSecurityManager not available');\n    }\n\n    // 用户唯一性检查模块\n    if (typeof window !== 'undefined' && window.UniquenessChecker) {\n      this.uniquenessChecker = new window.UniquenessChecker();\n    } else if (typeof UniquenessChecker !== 'undefined') {\n      this.uniquenessChecker = new UniquenessChecker();\n    } else {\n      console.warn('UniquenessChecker not available');\n    }\n\n    // API管理模块\n    if (typeof window !== 'undefined' && window.APIIntegrationManager) {\n      this.apiManager = new window.APIIntegrationManager();\n    } else {\n      console.warn('APIIntegrationManager not available');\n    }\n\n    // 安全管理模块\n    if (typeof window !== 'undefined' && window.SecurityManager) {\n      this.securityManager = new window.SecurityManager({\n        enableRateLimiting: this.config.enableRateLimiting,\n        enableConcurrencyControl: this.config.enableConcurrencyControl\n      });\n    } else {\n      console.warn('SecurityManager not available');\n    }\n\n    // 存储管理模块\n    if (typeof window !== 'undefined' && window.StorageManager) {\n      this.storageManager = new window.StorageManager({\n        enableLocalStorage: true,\n        enableIndexedDB: true,\n        enableDataValidation: true,\n        enableBackup: this.config.enableDataBackup,\n        enableEncryption: this.config.enableSecurityProtection\n      });\n    } else {\n      console.warn('StorageManager not available');\n    }\n\n    // 容错管理模块\n    if (typeof window !== 'undefined' && window.RegistrationResilienceManager) {\n      this.resilienceManager = new window.RegistrationResilienceManager({\n        maxRetries: this.config.maxRetryAttempts || 3,\n        baseDelay: this.config.retryDelay || 1000,\n        enableLogging: this.config.enableLogging !== false\n      });\n    } else {\n      console.warn('RegistrationResilienceManager not available');\n    }\n\n    // 性能监控模块\n    if (typeof window !== 'undefined' && window.PerformanceMonitor) {\n      this.performanceMonitor = new window.PerformanceMonitor({\n        enableMetrics: this.config.enablePerformanceMonitoring !== false,\n        enableProfiling: this.config.enableProfiling || false,\n        enableReporting: this.config.enablePerformanceReporting || false,\n        reportingInterval: this.config.performanceReportingInterval || 60000\n      });\n    } else {\n      console.warn('PerformanceMonitor not available');\n    }\n\n    // 事件总线 - 集成新的事件系统\n    this.eventBus = (typeof window !== 'undefined' ? window : global) || {};\n\n    // 初始化事件集成系统\n    if (typeof window !== 'undefined' && window.RegistrationEventIntegration) {\n      this.eventIntegration = new window.RegistrationEventIntegration({\n        enableEventLogging: this.config.enableEventLogging,\n        enablePerformanceMonitoring: this.config.enablePerformanceMonitoring,\n        enableErrorRecovery: true\n      });\n    } else {\n      console.warn('RegistrationEventIntegration not available');\n    }\n  }\n\n  /**\n   * 设置事件监听器\n   */\n  setupEventListeners() {\n    if (typeof document !== 'undefined') {\n      // 监听注册相关事件\n      document.addEventListener('registration:start', this.handleRegistrationStart.bind(this));\n      document.addEventListener('registration:validate', this.handleRegistrationValidate.bind(this));\n      document.addEventListener('registration:submit', this.handleRegistrationSubmit.bind(this));\n      document.addEventListener('registration:cancel', this.handleRegistrationCancel.bind(this));\n    }\n\n    // 设置新事件系统的监听器\n    if (this.eventIntegration) {\n      this.setupAdvancedEventListeners();\n    }\n  }\n\n  /**\n   * 设置高级事件监听器\n   */\n  setupAdvancedEventListeners() {\n    const eventTypes = this.eventIntegration.getEventTypes();\n\n    // 注册成功事件监听\n    this.eventIntegration.on(eventTypes.REGISTRATION_SUCCESS, (eventData) => {\n      this.handleAdvancedRegistrationSuccess(eventData);\n    });\n\n    // 注册失败事件监听\n    this.eventIntegration.on(eventTypes.REGISTRATION_FAILED, (eventData) => {\n      this.handleAdvancedRegistrationError(eventData);\n    });\n\n    // 验证事件监听\n    this.eventIntegration.on(eventTypes.REGISTRATION_VALIDATION_FAILED, (eventData) => {\n      this.handleValidationError(eventData);\n    });\n\n    // 性能警告监听\n    this.eventIntegration.on(eventTypes.PERFORMANCE_WARNING, (eventData) => {\n      this.handlePerformanceWarning(eventData);\n    });\n  }\n\n  /**\n   * 完整注册流程\n   * @param {Object} userData - 用户注册数据\n   * @returns {Promise<Object>} 注册结果\n   */\n  async register(userData) {\n    const registrationId = this.generateRegistrationId();\n\n    // 使用容错机制包装整个注册流程\n    if (this.resilienceManager) {\n      return await this.resilienceManager.handleRegistrationWithDegradation(\n        userData,\n        async (data) => {\n          return await this.performRegistration(registrationId, data);\n        }\n      );\n    }\n    // 降级到直接执行\n    return await this.performRegistration(registrationId, userData);\n\n  }\n\n  /**\n   * 执行注册流程\n   * @param {string} registrationId - 注册ID\n   * @param {Object} userData - 用户注册数据\n   * @returns {Promise<Object>} 注册结果\n   */\n  async performRegistration(registrationId, userData) {\n    // 开始性能监控\n    const performanceSession = this.performanceMonitor ?\n      this.performanceMonitor.startSession(`registration_${registrationId}`) : null;\n\n    try {\n      // 1. 安全检查\n      if (this.config.enableSecurityProtection && this.securityManager) {\n        const securityTimer = performanceSession?.startTimer('security_check');\n        await this.performSecurityCheck(userData);\n        securityTimer?.end();\n      }\n\n      // 2. 开始注册流程\n      this.startRegistration(registrationId, userData);\n\n      // 3. 输入数据验证\n      const validationTimer = performanceSession?.startTimer('input_validation');\n      await this.validateInput(userData);\n      validationTimer?.end();\n\n      // 4. 用户唯一性检查\n      const uniquenessTimer = performanceSession?.startTimer('uniqueness_check');\n      await this.checkUniqueness(userData);\n      uniquenessTimer?.end();\n\n      // 5. 密码安全处理\n      const passwordTimer = performanceSession?.startTimer('password_security');\n      const secureData = await this.processPasswordSecurity(userData);\n      passwordTimer?.end();\n\n      // 6. 预留用户名和邮箱（可选）\n      let reservationId = null;\n      if (this.config.enableUsernameReservation) {\n        const reservationTimer = performanceSession?.startTimer('identity_reservation');\n        reservationId = await this.reserveUserIdentity(userData);\n        reservationTimer?.end();\n      }\n\n      // 7. 提交注册请求\n      const submissionTimer = performanceSession?.startTimer('registration_submission');\n      const result = await this.submitRegistration(secureData, reservationId);\n      submissionTimer?.end();\n\n      // 8. 处理注册成功\n      const successTimer = performanceSession?.startTimer('success_handling');\n      await this.handleRegistrationSuccess(registrationId, result);\n      successTimer?.end();\n\n      // 结束性能监控会话\n      performanceSession?.end({\n        success: true,\n        userId: result.user?.id,\n        registrationMethod: userData.registrationMethod || 'standard'\n      });\n\n      return {\n        success: true,\n        registrationId,\n        user: result.user,\n        message: result.message || '注册成功',\n        requiresEmailVerification: result.requiresEmailVerification || false\n      };\n\n    } catch (error) {\n      // 记录性能监控错误\n      performanceSession?.recordError({\n        error: error.message,\n        errorType: error.constructor.name,\n        registrationId,\n        timestamp: Date.now()\n      });\n\n      // 处理注册失败\n      await this.handleRegistrationError(registrationId, error);\n      throw error;\n    } finally {\n      // 结束性能监控会话（如果还未结束）\n      if (performanceSession && !performanceSession.isEnded) {\n        performanceSession.end({\n          success: false,\n          registrationId,\n          aborted: true\n        });\n      }\n\n      // 清理注册状态\n      this.cleanupRegistration(registrationId);\n    }\n  }\n\n  /**\n   * 生成注册ID\n   */\n  generateRegistrationId() {\n    return `reg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * 开始注册流程\n   */\n  startRegistration(registrationId, userData) {\n    // 检查并发限制\n    if (this.config.enableConcurrencyControl && this.activeRegistrations.size >= 10) {\n      throw new Error('系统繁忙，请稍后重试');\n    }\n\n    // 记录注册状态\n    this.registrationState.set(registrationId, {\n      startTime: Date.now(),\n      userData: { ...userData, password: '[HIDDEN]' }, // 隐藏密码\n      status: 'started',\n      steps: []\n    });\n\n    this.activeRegistrations.add(registrationId);\n\n    // 触发注册开始事件 - 使用新事件系统\n    if (this.eventIntegration) {\n      this.eventIntegration.emitRegistrationStarted({\n        registrationId,\n        username: userData.username,\n        email: userData.email\n      });\n    }\n\n    // 保持向后兼容\n    this.dispatchEvent('registration:started', {\n      registrationId,\n      timestamp: Date.now()\n    });\n  }\n\n  /**\n   * 执行安全检查\n   * @param {Object} userData - 用户数据\n   * @returns {Promise<void>}\n   */\n  async performSecurityCheck(userData) {\n    // 触发安全检查开始事件\n    if (this.eventIntegration) {\n      this.eventIntegration.emit(this.eventIntegration.getEventTypes().REGISTRATION_SECURITY_CHECK_STARTED, {\n        userData: { username: userData.username, email: userData.email }\n      });\n    }\n\n    if (!this.securityManager) {\n      console.warn('SecurityManager not available, skipping security check');\n      return;\n    }\n\n    try {\n      // 验证输入数据的安全性\n      const securityResult = this.securityManager.validateSecurityRules(userData, {\n        username: { escapeHtml: true, maxLength: 50 },\n        email: { escapeHtml: true, maxLength: 100 },\n        password: { escapeHtml: false, maxLength: 200 },\n        firstName: { escapeHtml: true, maxLength: 50 },\n        lastName: { escapeHtml: true, maxLength: 50 }\n      });\n\n      // 触发安全检查结果事件\n      if (this.eventIntegration) {\n        this.eventIntegration.emitSecurityEvent('registration', 'comprehensive', securityResult);\n      }\n\n      if (!securityResult.isValid) {\n        const violations = securityResult.violations.map(v =>\n          `${v.field}: ${v.violations.join(', ')}`\n        ).join('; ');\n        throw new Error(`Security validation failed: ${violations}`);\n      }\n\n      // 更新用户数据为清理后的数据\n      Object.assign(userData, securityResult.sanitizedData);\n\n    } catch (error) {\n      console.error('Security check failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 输入数据验证\n   */\n  async validateInput(userData) {\n    // 触发验证开始事件\n    if (this.eventIntegration) {\n      this.eventIntegration.emit(this.eventIntegration.getEventTypes().REGISTRATION_VALIDATION_STARTED, {\n        userData: { username: userData.username, email: userData.email }\n      });\n    }\n\n    if (!this.inputValidator) {\n      throw new Error('输入验证模块未初始化');\n    }\n\n    // 验证注册表单\n    const validationResult = this.inputValidator.validateRegistrationForm(userData);\n\n    // 触发验证结果事件\n    if (this.eventIntegration) {\n      this.eventIntegration.emitValidationEvent('input', 'all', userData, validationResult);\n    }\n\n    if (!validationResult.isValid) {\n      const errors = validationResult.errors.join(', ');\n      throw new Error(`输入验证失败: ${errors}`);\n    }\n\n    // 验证密码确认\n    if (userData.password !== userData.confirmPassword) {\n      throw new Error('密码和确认密码不匹配');\n    }\n\n    // 验证服务条款同意\n    if (!userData.agreeTerms) {\n      throw new Error('请同意服务条款');\n    }\n\n    return validationResult;\n  }\n\n  /**\n   * 用户唯一性检查\n   */\n  async checkUniqueness(userData) {\n    // 触发唯一性检查开始事件\n    if (this.eventIntegration) {\n      this.eventIntegration.emit(this.eventIntegration.getEventTypes().REGISTRATION_UNIQUENESS_CHECK_STARTED, {\n        userData: { username: userData.username, email: userData.email }\n      });\n    }\n\n    if (!this.uniquenessChecker) {\n      throw new Error('唯一性检查模块未初始化');\n    }\n\n    // 批量检查用户名和邮箱唯一性\n    const uniquenessResult = await this.uniquenessChecker.checkBatchUniqueness(\n      userData.username,\n      userData.email\n    );\n\n    // 触发唯一性检查结果事件\n    if (this.eventIntegration) {\n      this.eventIntegration.emitUniquenessEvent('username', userData.username, uniquenessResult);\n      this.eventIntegration.emitUniquenessEvent('email', userData.email, uniquenessResult);\n    }\n\n    if (!uniquenessResult.isValid) {\n      const errors = uniquenessResult.errors.join(', ');\n      throw new Error(`唯一性检查失败: ${errors}`);\n    }\n\n    return uniquenessResult;\n  }\n\n  /**\n   * 密码安全处理\n   */\n  async processPasswordSecurity(userData) {\n    if (!this.passwordSecurity) {\n      throw new Error('密码安全模块未初始化');\n    }\n\n    // 密码强度检查\n    const strengthResult = this.passwordSecurity.checkPasswordStrength(userData.password);\n    if (strengthResult.score < 60) {\n      throw new Error(`密码强度不足: ${strengthResult.feedback.join(', ')}`);\n    }\n\n    // 密码哈希处理\n    const passwordHash = await this.passwordSecurity.hashPassword(userData.password);\n\n    // 构建安全的用户数据\n    return {\n      username: userData.username.trim(),\n      email: userData.email.trim().toLowerCase(),\n      passwordHash,\n      agreeTerms: userData.agreeTerms,\n      createdAt: new Date().toISOString(),\n      deviceInfo: this.getDeviceInfo()\n    };\n  }\n\n  /**\n   * 预留用户身份\n   */\n  async reserveUserIdentity(userData) {\n    if (!this.uniquenessChecker || !this.uniquenessChecker.reserveUser) {\n      console.warn('用户预留功能不可用');\n      return null;\n    }\n\n    try {\n      const reservationResult = await this.uniquenessChecker.reserveUser(\n        userData.username,\n        userData.email\n      );\n\n      return reservationResult.reservationId;\n    } catch (error) {\n      console.warn('用户预留失败:', error.message);\n      return null;\n    }\n  }\n\n  /**\n   * 提交注册请求\n   */\n  async submitRegistration(secureData, reservationId = null) {\n    if (!this.apiManager) {\n      throw new Error('API管理模块未初始化');\n    }\n\n    // 准备请求数据\n    const requestData = {\n      ...secureData,\n      reservationId,\n      timestamp: Date.now()\n    };\n\n    // 发送注册请求\n    const result = await this.apiManager.register(requestData);\n\n    if (!result.success) {\n      throw new Error(result.message || '注册请求失败');\n    }\n\n    // 数据持久化处理\n    if (this.config.enableDataPersistence && this.storageManager) {\n      await this.handleDataPersistence(secureData, result);\n    }\n\n    return result;\n  }\n\n  /**\n   * 处理注册成功\n   */\n  async handleRegistrationSuccess(registrationId, result) {\n    // 更新注册状态\n    const state = this.registrationState.get(registrationId);\n    if (state) {\n      state.status = 'completed';\n      state.completedAt = Date.now();\n      state.result = result;\n    }\n\n    // 确认用户预留（如果有）\n    if (result.reservationId && this.uniquenessChecker && this.uniquenessChecker.confirmReservation) {\n      try {\n        await this.uniquenessChecker.confirmReservation(result.reservationId);\n      } catch (error) {\n        console.warn('确认用户预留失败:', error.message);\n      }\n    }\n\n    // 触发成功事件 - 使用新事件系统\n    if (this.eventIntegration) {\n      this.eventIntegration.emitRegistrationSuccess(\n        state ? state.userData : {},\n        result\n      );\n    }\n\n    // 保持向后兼容\n    this.dispatchEvent('registration:success', {\n      registrationId,\n      user: result.user,\n      timestamp: Date.now()\n    });\n  }\n\n  /**\n   * 处理注册错误\n   */\n  async handleRegistrationError(registrationId, error) {\n    // 更新注册状态\n    const state = this.registrationState.get(registrationId);\n    if (state) {\n      state.status = 'failed';\n      state.failedAt = Date.now();\n      state.error = error.message;\n    }\n\n    // 触发错误事件 - 使用新事件系统\n    if (this.eventIntegration) {\n      this.eventIntegration.emitRegistrationFailed(\n        state ? state.userData : {},\n        error\n      );\n    }\n\n    // 保持向后兼容\n    this.dispatchEvent('registration:error', {\n      registrationId,\n      error: error.message,\n      timestamp: Date.now()\n    });\n  }\n\n  /**\n   * 清理注册状态\n   */\n  cleanupRegistration(registrationId) {\n    this.activeRegistrations.delete(registrationId);\n\n    // 延迟清理注册状态（保留一段时间用于调试）\n    setTimeout(() => {\n      this.registrationState.delete(registrationId);\n    }, 300000); // 5分钟后清理\n  }\n\n  /**\n   * 数据持久化处理\n   */\n  async handleDataPersistence(userData, registrationResult) {\n    try {\n      // 触发存储开始事件\n      if (this.eventIntegration) {\n        this.eventIntegration.emit(this.eventIntegration.getEventTypes().REGISTRATION_STORAGE_STARTED, {\n          userId: registrationResult.user?.id || this.generateUserId(),\n          operation: 'store_user_data'\n        });\n      }\n\n      if (!this.storageManager) {\n        console.warn('StorageManager not available for data persistence');\n\n        // 触发存储失败事件\n        if (this.eventIntegration) {\n          this.eventIntegration.emitStorageEvent('store_user_data', {\n            success: false,\n            reason: 'StorageManager not available'\n          });\n        }\n\n        return;\n      }\n\n      console.log('开始数据持久化处理');\n\n      // 保存用户基本信息\n      const userRecord = {\n        id: registrationResult.user?.id || this.generateUserId(),\n        username: userData.username,\n        email: userData.email,\n        createdAt: new Date().toISOString(),\n        status: 'active'\n      };\n\n      await this.storageManager.store(`user_${userRecord.id}`, userRecord, {\n        persistent: true,\n        encrypted: true,\n        backup: this.config.enableDataBackup\n      });\n\n      // 触发存储成功事件\n      if (this.eventIntegration) {\n        this.eventIntegration.emitStorageEvent('store_user_data', {\n          success: true,\n          userId: userRecord.id\n        });\n      }\n\n      // 更新用户索引\n      await this.updateUserIndex(userRecord);\n\n      // 记录用户活动\n      await this.recordUserActivity(userRecord.id, 'registration');\n\n      console.log('数据持久化处理完成');\n    } catch (error) {\n      console.error('数据持久化处理失败:', error);\n\n      // 触发存储失败事件\n      if (this.eventIntegration) {\n        this.eventIntegration.emitStorageEvent('store_user_data', {\n          success: false,\n          error: error.message\n        });\n      }\n\n      // 持久化失败不应该影响注册流程\n    }\n  }\n\n  /**\n   * 更新用户索引\n   */\n  async updateUserIndex(userRecord) {\n    try {\n      const userIndex = await this.storageManager.retrieve('user_index') || {\n        byUsername: {},\n        byEmail: {},\n        byId: {},\n        count: 0\n      };\n\n      userIndex.byUsername[userRecord.username] = userRecord.id;\n      userIndex.byEmail[userRecord.email] = userRecord.id;\n      userIndex.byId[userRecord.id] = {\n        username: userRecord.username,\n        email: userRecord.email,\n        createdAt: userRecord.createdAt,\n        status: userRecord.status\n      };\n      userIndex.count++;\n\n      await this.storageManager.store('user_index', userIndex, {\n        persistent: true,\n        encrypted: false,\n        backup: true\n      });\n    } catch (error) {\n      console.error('用户索引更新失败:', error);\n    }\n  }\n\n  /**\n   * 记录用户活动\n   */\n  async recordUserActivity(userId, activity) {\n    try {\n      const activityRecord = {\n        userId,\n        activity,\n        timestamp: new Date().toISOString(),\n        deviceInfo: this.getDeviceInfo()\n      };\n\n      let activities = await this.storageManager.retrieve(`activities_${userId}`) || [];\n      activities.push(activityRecord);\n\n      // 保持最近100条记录\n      if (activities.length > 100) {\n        activities = activities.slice(-100);\n      }\n\n      await this.storageManager.store(`activities_${userId}`, activities, {\n        persistent: true,\n        encrypted: true,\n        backup: false\n      });\n    } catch (error) {\n      console.error('用户活动记录失败:', error);\n    }\n  }\n\n  /**\n   * 生成用户ID\n   */\n  generateUserId() {\n    return `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * 获取设备信息\n   */\n  getDeviceInfo() {\n    if (typeof navigator === 'undefined') {\n      return { platform: 'server', userAgent: 'node.js' };\n    }\n\n    return {\n      platform: navigator.platform,\n      userAgent: navigator.userAgent,\n      language: navigator.language,\n      timestamp: Date.now()\n    };\n  }\n\n  /**\n   * 触发事件\n   */\n  dispatchEvent(eventName, detail) {\n    if (typeof document !== 'undefined') {\n      const event = new CustomEvent(eventName, { detail });\n      document.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * 事件处理器\n   */\n  handleRegistrationStart(event) {\n    console.log('注册开始:', event.detail);\n  }\n\n  handleRegistrationValidate(event) {\n    console.log('注册验证:', event.detail);\n  }\n\n  handleRegistrationSubmit(event) {\n    console.log('注册提交:', event.detail);\n  }\n\n  handleRegistrationCancel(event) {\n    console.log('注册取消:', event.detail);\n\n    // 清理相关状态\n    const { registrationId } = event.detail;\n    if (registrationId) {\n      this.cleanupRegistration(registrationId);\n    }\n  }\n\n  /**\n   * 获取注册统计信息\n   */\n  getRegistrationStats() {\n    const stats = {\n      activeRegistrations: this.activeRegistrations.size,\n      totalRegistrations: this.registrationState.size,\n      completedRegistrations: 0,\n      failedRegistrations: 0\n    };\n\n    for (const state of this.registrationState.values()) {\n      if (state.status === 'completed') {\n        stats.completedRegistrations++;\n      } else if (state.status === 'failed') {\n        stats.failedRegistrations++;\n      }\n    }\n\n    // 添加性能监控统计信息\n    if (this.performanceMonitor) {\n      const performanceStats = this.performanceMonitor.getStats();\n      stats.performance = {\n        averageRegistrationTime: performanceStats.averageSessionDuration || 0,\n        totalSessions: performanceStats.totalSessions || 0,\n        errorRate: performanceStats.errorRate || 0,\n        slowestOperations: performanceStats.slowestOperations || [],\n        memoryUsage: performanceStats.memoryUsage || {},\n        lastReportTime: performanceStats.lastReportTime || null\n      };\n    }\n\n    return stats;\n  }\n\n  /**\n   * 重置注册管理器\n   */\n  reset() {\n    this.registrationState.clear();\n    this.activeRegistrations.clear();\n  }\n}\n\n// 导出模块\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = RegistrationManager;\n}\n\nif (typeof window !== 'undefined') {\n  window.RegistrationManager = RegistrationManager;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth\\registration-resilience.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'options' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":300,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":300,"endColumn":45}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 注册容错和降级管理器\n * 提供网络错误重试、存储失败备用方案、服务降级策略\n *\n * 功能特性：\n * - 智能重试机制（指数退避）\n * - 多级存储备用方案\n * - 服务降级策略\n * - 离线模式支持\n * - 错误恢复机制\n */\n\nclass RegistrationResilienceManager {\n  constructor(options = {}) {\n    this.config = {\n      // 重试配置\n      maxRetries: 3,\n      baseDelay: 1000, // 基础延迟 1秒\n      maxDelay: 30000, // 最大延迟 30秒\n      backoffMultiplier: 2, // 指数退避倍数\n\n      // 存储配置\n      enableLocalStorage: true,\n      enableSessionStorage: true,\n      enableIndexedDB: true,\n\n      // 降级配置\n      enableGracefulDegradation: true,\n      offlineMode: false,\n\n      // 监控配置\n      enableMetrics: true,\n      enableLogging: true,\n\n      ...options\n    };\n\n    // 重试状态管理\n    this.retryState = new Map();\n\n    // 存储适配器\n    this.storageAdapters = new Map();\n\n    // 降级策略\n    this.degradationStrategies = new Map();\n\n    // 指标收集\n    this.metrics = {\n      totalRetries: 0,\n      successfulRetries: 0,\n      failedRetries: 0,\n      storageFailovers: 0,\n      degradationActivations: 0,\n      offlineOperations: 0\n    };\n\n    // 初始化\n    this.init();\n  }\n\n  /**\n   * 初始化容错管理器\n   */\n  init() {\n    this.setupStorageAdapters();\n    this.setupDegradationStrategies();\n    this.setupNetworkMonitoring();\n\n    if (this.config.enableLogging) {\n      console.log('RegistrationResilienceManager initialized');\n    }\n  }\n\n  /**\n   * 设置存储适配器\n   */\n  setupStorageAdapters() {\n    // LocalStorage 适配器\n    if (this.config.enableLocalStorage && typeof localStorage !== 'undefined') {\n      this.storageAdapters.set('localStorage', {\n        priority: 1,\n        available: true,\n        store: (key, data) => {\n          try {\n            localStorage.setItem(key, JSON.stringify(data));\n            return true;\n          } catch (error) {\n            console.warn('LocalStorage failed:', error);\n            return false;\n          }\n        },\n        retrieve: (key) => {\n          try {\n            const data = localStorage.getItem(key);\n            return data ? JSON.parse(data) : null;\n          } catch (error) {\n            console.warn('LocalStorage retrieval failed:', error);\n            return null;\n          }\n        },\n        remove: (key) => {\n          try {\n            localStorage.removeItem(key);\n            return true;\n          } catch (error) {\n            console.warn('LocalStorage removal failed:', error);\n            return false;\n          }\n        }\n      });\n    }\n\n    // SessionStorage 适配器\n    if (this.config.enableSessionStorage && typeof sessionStorage !== 'undefined') {\n      this.storageAdapters.set('sessionStorage', {\n        priority: 2,\n        available: true,\n        store: (key, data) => {\n          try {\n            sessionStorage.setItem(key, JSON.stringify(data));\n            return true;\n          } catch (error) {\n            console.warn('SessionStorage failed:', error);\n            return false;\n          }\n        },\n        retrieve: (key) => {\n          try {\n            const data = sessionStorage.getItem(key);\n            return data ? JSON.parse(data) : null;\n          } catch (error) {\n            console.warn('SessionStorage retrieval failed:', error);\n            return null;\n          }\n        },\n        remove: (key) => {\n          try {\n            sessionStorage.removeItem(key);\n            return true;\n          } catch (error) {\n            console.warn('SessionStorage removal failed:', error);\n            return false;\n          }\n        }\n      });\n    }\n\n    // 内存存储适配器（最后备用）\n    this.memoryStorage = new Map();\n    this.storageAdapters.set('memory', {\n      priority: 3,\n      available: true,\n      store: (key, data) => {\n        try {\n          this.memoryStorage.set(key, data);\n          return true;\n        } catch (error) {\n          console.warn('Memory storage failed:', error);\n          return false;\n        }\n      },\n      retrieve: (key) => {\n        return this.memoryStorage.get(key) || null;\n      },\n      remove: (key) => {\n        return this.memoryStorage.delete(key);\n      }\n    });\n  }\n\n  /**\n   * 设置降级策略\n   */\n  setupDegradationStrategies() {\n    // 网络降级策略\n    this.degradationStrategies.set('network', {\n      condition: () => !navigator.onLine,\n      action: () => {\n        this.config.offlineMode = true;\n        this.metrics.degradationActivations++;\n        if (this.config.enableLogging) {\n          console.log('Network degradation activated - switching to offline mode');\n        }\n      },\n      recovery: () => {\n        this.config.offlineMode = false;\n        if (this.config.enableLogging) {\n          console.log('Network recovered - switching back to online mode');\n        }\n      }\n    });\n\n    // 存储降级策略\n    this.degradationStrategies.set('storage', {\n      condition: () => {\n        // 检查主要存储是否可用\n        const primaryStorage = Array.from(this.storageAdapters.values())\n          .sort((a, b) => a.priority - b.priority)[0];\n        return !primaryStorage || !primaryStorage.available;\n      },\n      action: () => {\n        this.metrics.degradationActivations++;\n        if (this.config.enableLogging) {\n          console.log('Storage degradation activated - using fallback storage');\n        }\n      }\n    });\n  }\n\n  /**\n   * 设置网络监控\n   */\n  setupNetworkMonitoring() {\n    if (typeof window !== 'undefined') {\n      window.addEventListener('online', () => {\n        const strategy = this.degradationStrategies.get('network');\n        if (strategy && strategy.recovery) {\n          strategy.recovery();\n        }\n      });\n\n      window.addEventListener('offline', () => {\n        const strategy = this.degradationStrategies.get('network');\n        if (strategy && strategy.action) {\n          strategy.action();\n        }\n      });\n    }\n  }\n\n  /**\n   * 执行带重试的操作\n   */\n  async executeWithRetry(operationId, operation, options = {}) {\n    const config = { ...this.config, ...options };\n    const retryKey = `${operationId}_${Date.now()}`;\n\n    this.retryState.set(retryKey, {\n      attempts: 0,\n      lastError: null,\n      startTime: Date.now()\n    });\n\n    for (let attempt = 0; attempt <= config.maxRetries; attempt++) {\n      try {\n        const state = this.retryState.get(retryKey);\n        state.attempts = attempt + 1;\n\n        if (this.config.enableLogging && attempt > 0) {\n          console.log(`Retry attempt ${attempt} for operation: ${operationId}`);\n        }\n\n        const result = await operation();\n\n        // 成功时清理重试状态\n        this.retryState.delete(retryKey);\n\n        if (attempt > 0) {\n          this.metrics.successfulRetries++;\n        }\n\n        return result;\n      } catch (error) {\n        const state = this.retryState.get(retryKey);\n        state.lastError = error;\n\n        if (attempt === config.maxRetries) {\n          // 最后一次尝试失败\n          this.metrics.failedRetries++;\n          this.retryState.delete(retryKey);\n\n          if (this.config.enableLogging) {\n            console.error(`Operation ${operationId} failed after ${config.maxRetries + 1} attempts:`, error);\n          }\n\n          throw error;\n        }\n\n        // 计算重试次数（不包括最后一次失败）\n        this.metrics.totalRetries++;\n\n        // 计算延迟时间（指数退避）\n        const delay = Math.min(\n          config.baseDelay * Math.pow(config.backoffMultiplier, attempt),\n          config.maxDelay\n        );\n\n        if (this.config.enableLogging) {\n          console.warn(`Operation ${operationId} failed (attempt ${attempt + 1}), retrying in ${delay}ms:`, error.message);\n        }\n\n        await this.delay(delay);\n      }\n    }\n  }\n\n  /**\n   * 容错存储操作\n   */\n  async storeWithFallback(key, data, options = {}) {\n    const adapters = Array.from(this.storageAdapters.entries())\n      .sort(([, a], [, b]) => a.priority - b.priority)\n      .filter(([, adapter]) => adapter.available);\n\n    let attemptCount = 0;\n\n    for (const [name, adapter] of adapters) {\n      try {\n        const success = await adapter.store(key, data);\n        if (success) {\n          // 只有在不是第一个适配器时才计为故障转移\n          if (attemptCount > 0) {\n            this.metrics.storageFailovers++;\n            if (this.config.enableLogging) {\n              console.log(`Data stored using fallback storage: ${name}`);\n            }\n          }\n          return { success: true, adapter: name };\n        }\n      } catch (error) {\n        console.warn(`Storage adapter ${name} failed:`, error);\n        adapter.available = false;\n      }\n      attemptCount++;\n    }\n\n    throw new Error('All storage adapters failed');\n  }\n\n  /**\n   * 容错检索操作\n   */\n  async retrieveWithFallback(key) {\n    const adapters = Array.from(this.storageAdapters.entries())\n      .sort(([, a], [, b]) => a.priority - b.priority)\n      .filter(([, adapter]) => adapter.available);\n\n    for (const [name, adapter] of adapters) {\n      try {\n        const data = await adapter.retrieve(key);\n        if (data !== null) {\n          return { data, adapter: name };\n        }\n      } catch (error) {\n        console.warn(`Retrieval from ${name} failed:`, error);\n        continue;\n      }\n    }\n\n    return { data: null, adapter: null };\n  }\n\n  /**\n   * 注册降级处理\n   */\n  async handleRegistrationWithDegradation(userData, registrationFunction) {\n    // 检查是否需要降级\n    const needsDegradation = this.checkDegradationConditions();\n\n    if (needsDegradation.network) {\n      // 网络降级：保存到本地存储，稍后同步\n      return await this.handleOfflineRegistration(userData);\n    }\n\n    if (needsDegradation.storage) {\n      // 存储降级：使用备用存储\n      return await this.handleStorageDegradedRegistration(userData, registrationFunction);\n    }\n\n    // 正常流程\n    return await this.executeWithRetry('registration', () => registrationFunction(userData));\n  }\n\n  /**\n   * 处理离线注册\n   */\n  async handleOfflineRegistration(userData) {\n    this.metrics.offlineOperations++;\n\n    const offlineData = {\n      userData,\n      timestamp: new Date().toISOString(),\n      status: 'pending_sync',\n      id: this.generateOfflineId()\n    };\n\n    await this.storeWithFallback(`offline_registration_${offlineData.id}`, offlineData);\n\n    if (this.config.enableLogging) {\n      console.log('Registration saved for offline sync:', offlineData.id);\n    }\n\n    return {\n      success: true,\n      offline: true,\n      id: offlineData.id,\n      message: '注册已保存，将在网络恢复后同步'\n    };\n  }\n\n  /**\n   * 处理存储降级注册\n   */\n  async handleStorageDegradedRegistration(userData, registrationFunction) {\n    try {\n      // 尝试正常注册\n      const result = await this.executeWithRetry('registration', () => registrationFunction(userData));\n\n      // 使用备用存储保存结果\n      await this.storeWithFallback(`registration_backup_${Date.now()}`, {\n        userData,\n        result,\n        timestamp: new Date().toISOString()\n      });\n\n      return result;\n    } catch (error) {\n      // 注册失败，保存到备用存储稍后重试\n      const backupData = {\n        userData,\n        error: error.message,\n        timestamp: new Date().toISOString(),\n        status: 'failed_retry_pending'\n      };\n\n      await this.storeWithFallback(`failed_registration_${Date.now()}`, backupData);\n\n      throw error;\n    }\n  }\n\n  /**\n   * 检查降级条件\n   */\n  checkDegradationConditions() {\n    const conditions = {};\n\n    for (const [name, strategy] of this.degradationStrategies) {\n      conditions[name] = strategy.condition();\n    }\n\n    return conditions;\n  }\n\n  /**\n   * 同步离线数据\n   */\n  async syncOfflineData(syncFunction) {\n    if (this.config.offlineMode) {\n      if (this.config.enableLogging) {\n        console.log('Still in offline mode, skipping sync');\n      }\n      return { synced: 0, failed: 0 };\n    }\n\n    const offlineKeys = [];\n\n    // 查找所有离线数据\n    for (const [name, adapter] of this.storageAdapters) {\n      if (!adapter.available) {continue;}\n\n      try {\n        // 这里需要实现存储扫描逻辑\n        // 简化实现：假设有方法获取所有键\n        if (name === 'memory') {\n          for (const key of this.memoryStorage.keys()) {\n            if (key.startsWith('offline_registration_')) {\n              offlineKeys.push({ key, adapter: name });\n            }\n          }\n        }\n      } catch (error) {\n        console.warn(`Failed to scan ${name} for offline data:`, error);\n      }\n    }\n\n    let synced = 0;\n    let failed = 0;\n\n    for (const { key, adapter } of offlineKeys) {\n      try {\n        const storageAdapter = this.storageAdapters.get(adapter);\n        const offlineData = await storageAdapter.retrieve(key);\n\n        if (offlineData && offlineData.status === 'pending_sync') {\n          await this.executeWithRetry('offline_sync', () => syncFunction(offlineData.userData));\n\n          // 同步成功，删除离线数据\n          await storageAdapter.remove(key);\n          synced++;\n\n          if (this.config.enableLogging) {\n            console.log(`Synced offline registration: ${offlineData.id}`);\n          }\n        }\n      } catch (error) {\n        failed++;\n        console.error(`Failed to sync offline data ${key}:`, error);\n      }\n    }\n\n    return { synced, failed };\n  }\n\n  /**\n   * 获取容错指标\n   */\n  getMetrics() {\n    return {\n      ...this.metrics,\n      activeRetries: this.retryState.size,\n      availableStorageAdapters: Array.from(this.storageAdapters.values())\n        .filter(adapter => adapter.available).length,\n      isOfflineMode: this.config.offlineMode\n    };\n  }\n\n  /**\n   * 重置指标\n   */\n  resetMetrics() {\n    this.metrics = {\n      totalRetries: 0,\n      successfulRetries: 0,\n      failedRetries: 0,\n      storageFailovers: 0,\n      degradationActivations: 0,\n      offlineOperations: 0\n    };\n  }\n\n  /**\n   * 工具方法\n   */\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  generateOfflineId() {\n    return `offline_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * 清理资源\n   */\n  destroy() {\n    this.retryState.clear();\n    this.storageAdapters.clear();\n    this.degradationStrategies.clear();\n    this.memoryStorage.clear();\n\n    if (this.config.enableLogging) {\n      console.log('RegistrationResilienceManager destroyed');\n    }\n  }\n}\n\n// 创建全局实例\nif (typeof window !== 'undefined') {\n  window.RegistrationResilienceManager = RegistrationResilienceManager;\n\n  // 创建默认实例\n  if (!window.registrationResilienceManager) {\n    window.registrationResilienceManager = new RegistrationResilienceManager();\n  }\n}\n\n// 导出模块\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { RegistrationResilienceManager };\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth\\security-manager.js","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\-.","line":43,"column":12,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":43,"endColumn":13,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1023,1024],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1023,1023],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\-.","line":43,"column":14,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":43,"endColumn":15,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1025,1026],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1025,1025],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":154,"column":35,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":154,"endColumn":36,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3756,3757],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3756,3756],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 32.","line":332,"column":25,"nodeType":"Literal","messageId":"noMagic","endLine":332,"endColumn":27},{"ruleId":"no-magic-numbers","severity":1,"message":"No magic number: 32.","line":430,"column":32,"nodeType":"Literal","messageId":"noMagic","endLine":430,"endColumn":34}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 安全管理器 - 提供XSS防护、输入过滤、数据加密等安全措施\n *\n * 功能包括：\n * - XSS防护和HTML转义\n * - 输入数据过滤和清理\n * - 敏感数据加密/解密\n * - CSP策略管理\n * - 安全头部设置\n *\n * @author AI Assistant\n * @version 1.0.0\n */\n\nclass SecurityManager {\n  constructor(options = {}) {\n    this.config = {\n      enableXSSProtection: true,\n      enableCSP: true,\n      enableInputSanitization: true,\n      enableDataEncryption: true,\n      encryptionKey: options.encryptionKey || this.generateEncryptionKey(),\n      allowedTags: options.allowedTags || ['b', 'i', 'em', 'strong'],\n      allowedAttributes: options.allowedAttributes || ['class', 'id'],\n      maxInputLength: options.maxInputLength || 1000,\n      ...options\n    };\n\n    this.xssPatterns = [\n      /<script[^>]*>.*?<\\/script>/gi,\n      /<iframe[^>]*>.*?<\\/iframe>/gi,\n      /<object[^>]*>.*?<\\/object>/gi,\n      /<embed[^>]*>/gi,\n      /<link[^>]*>/gi,\n      /<meta[^>]*>/gi,\n      /javascript:/gi,\n      /vbscript:/gi,\n      /data:text\\/html/gi,\n      /on\\w+\\s*=/gi\n    ];\n\n    this.sqlInjectionPatterns = [\n      /('|(\\-\\-)|(;)|(\\||\\|)|(\\*|\\*))/gi,\n      /(union|select|insert|delete|update|drop|create|alter|exec|execute)/gi,\n      /(script|javascript|vbscript|onload|onerror|onclick)/gi\n    ];\n\n    this.init();\n  }\n\n  /**\n   * 初始化安全管理器\n   */\n  init() {\n    try {\n      if (this.config.enableCSP) {\n        this.setupCSP();\n      }\n\n      if (this.config.enableXSSProtection) {\n        this.setupXSSProtection();\n      }\n\n      this.setupSecurityHeaders();\n\n      console.log('SecurityManager initialized successfully');\n    } catch (error) {\n      console.error('Failed to initialize SecurityManager:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 设置内容安全策略 (CSP)\n   */\n  setupCSP() {\n    if (typeof document !== 'undefined') {\n      const meta = document.createElement('meta');\n      meta.httpEquiv = 'Content-Security-Policy';\n      meta.content = [\n        'default-src \\'self\\'',\n        'script-src \\'self\\' \\'unsafe-inline\\' \\'unsafe-eval\\'',\n        'style-src \\'self\\' \\'unsafe-inline\\'',\n        'img-src \\'self\\' data: https:',\n        'font-src \\'self\\' https:',\n        'connect-src \\'self\\' https:',\n        'frame-src \\'none\\'',\n        'object-src \\'none\\'',\n        'base-uri \\'self\\''\n      ].join('; ');\n\n      document.head.appendChild(meta);\n    }\n  }\n\n  /**\n   * 设置XSS防护\n   */\n  setupXSSProtection() {\n    if (typeof document !== 'undefined') {\n      const meta = document.createElement('meta');\n      meta.httpEquiv = 'X-XSS-Protection';\n      meta.content = '1; mode=block';\n      document.head.appendChild(meta);\n    }\n  }\n\n  /**\n   * 设置安全头部\n   */\n  setupSecurityHeaders() {\n    if (typeof document !== 'undefined') {\n      // X-Content-Type-Options\n      const noSniff = document.createElement('meta');\n      noSniff.httpEquiv = 'X-Content-Type-Options';\n      noSniff.content = 'nosniff';\n      document.head.appendChild(noSniff);\n\n      // X-Frame-Options\n      const frameOptions = document.createElement('meta');\n      frameOptions.httpEquiv = 'X-Frame-Options';\n      frameOptions.content = 'DENY';\n      document.head.appendChild(frameOptions);\n\n      // Referrer-Policy\n      const referrerPolicy = document.createElement('meta');\n      referrerPolicy.name = 'referrer';\n      referrerPolicy.content = 'strict-origin-when-cross-origin';\n      document.head.appendChild(referrerPolicy);\n    }\n  }\n\n  /**\n   * HTML转义，防止XSS攻击\n   * @param {string} input - 需要转义的字符串\n   * @returns {string} 转义后的字符串\n   */\n  escapeHtml(input) {\n    if (typeof input !== 'string') {\n      return input;\n    }\n\n    const escapeMap = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      '\\'': '&#x27;',\n      '/': '&#x2F;',\n      '`': '&#x60;',\n      '=': '&#x3D;'\n    };\n\n    return input.replace(/[&<>\"'`=\\/]/g, (match) => escapeMap[match]);\n  }\n\n  /**\n   * 反转义HTML\n   * @param {string} input - 需要反转义的字符串\n   * @returns {string} 反转义后的字符串\n   */\n  unescapeHtml(input) {\n    if (typeof input !== 'string') {\n      return input;\n    }\n\n    const unescapeMap = {\n      '&amp;': '&',\n      '&lt;': '<',\n      '&gt;': '>',\n      '&quot;': '\"',\n      '&#x27;': '\\'',\n      '&#x2F;': '/',\n      '&#x60;': '`',\n      '&#x3D;': '='\n    };\n\n    return input.replace(/&(amp|lt|gt|quot|#x27|#x2F|#x60|#x3D);/g, (match) => unescapeMap[match]);\n  }\n\n  /**\n   * 清理和过滤输入数据\n   * @param {string} input - 输入数据\n   * @param {Object} options - 过滤选项\n   * @returns {Object} 过滤结果\n   */\n  sanitizeInput(input, options = {}) {\n    const result = {\n      original: input,\n      sanitized: input,\n      isValid: true,\n      violations: []\n    };\n\n    if (typeof input !== 'string') {\n      result.isValid = false;\n      result.violations.push('Input must be a string');\n      return result;\n    }\n\n    // 长度检查\n    if (input.length > this.config.maxInputLength) {\n      result.isValid = false;\n      result.violations.push(`Input exceeds maximum length of ${this.config.maxInputLength}`);\n      result.sanitized = input.substring(0, this.config.maxInputLength);\n    }\n\n    // XSS检查\n    if (this.config.enableXSSProtection) {\n      const xssResult = this.detectXSS(input);\n      if (!xssResult.isClean) {\n        result.violations.push(...xssResult.violations);\n        result.sanitized = this.removeXSS(result.sanitized);\n      }\n    }\n\n    // SQL注入检查\n    const sqlResult = this.detectSQLInjection(input);\n    if (!sqlResult.isClean) {\n      result.isValid = false;\n      result.violations.push(...sqlResult.violations);\n    }\n\n    // HTML转义\n    if (options.escapeHtml !== false) {\n      result.sanitized = this.escapeHtml(result.sanitized);\n    }\n\n    // 移除不允许的标签和属性\n    if (options.allowHtml) {\n      result.sanitized = this.sanitizeHtml(result.sanitized, options);\n    }\n\n    return result;\n  }\n\n  /**\n   * 检测XSS攻击\n   * @param {string} input - 输入字符串\n   * @returns {Object} 检测结果\n   */\n  detectXSS(input) {\n    const result = {\n      isClean: true,\n      violations: []\n    };\n\n    for (const pattern of this.xssPatterns) {\n      if (pattern.test(input)) {\n        result.isClean = false;\n        result.violations.push(`Potential XSS detected: ${pattern.source}`);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * 移除XSS攻击代码\n   * @param {string} input - 输入字符串\n   * @returns {string} 清理后的字符串\n   */\n  removeXSS(input) {\n    let cleaned = input;\n\n    for (const pattern of this.xssPatterns) {\n      cleaned = cleaned.replace(pattern, '');\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * 检测SQL注入攻击\n   * @param {string} input - 输入字符串\n   * @returns {Object} 检测结果\n   */\n  detectSQLInjection(input) {\n    const result = {\n      isClean: true,\n      violations: []\n    };\n\n    for (const pattern of this.sqlInjectionPatterns) {\n      if (pattern.test(input)) {\n        result.isClean = false;\n        result.violations.push(`Potential SQL injection detected: ${pattern.source}`);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * 清理HTML内容\n   * @param {string} html - HTML字符串\n   * @param {Object} options - 清理选项\n   * @returns {string} 清理后的HTML\n   */\n  sanitizeHtml(html, options = {}) {\n    const allowedTags = options.allowedTags || this.config.allowedTags;\n    const allowedAttributes = options.allowedAttributes || this.config.allowedAttributes;\n\n    // 简单的HTML清理实现\n    // 在生产环境中建议使用DOMPurify等专业库\n    let cleaned = html;\n\n    // 移除不允许的标签\n    cleaned = cleaned.replace(/<\\/?([a-zA-Z][a-zA-Z0-9]*)\\b[^>]*>/g, (match, tagName) => {\n      if (allowedTags.includes(tagName.toLowerCase())) {\n        // 清理属性\n        return match.replace(/\\s+([a-zA-Z-]+)\\s*=\\s*[\"']?[^\"'>]*[\"']?/g, (attrMatch, attrName) => {\n          if (allowedAttributes.includes(attrName.toLowerCase())) {\n            return attrMatch;\n          }\n          return '';\n        });\n      }\n      return '';\n    });\n\n    return cleaned;\n  }\n\n  /**\n   * 生成加密密钥\n   * @returns {string} 加密密钥\n   */\n  generateEncryptionKey() {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let key = '';\n    for (let i = 0; i < 32; i++) {\n      key += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return key;\n  }\n\n  /**\n   * 简单的数据加密（仅用于演示，生产环境请使用专业加密库）\n   * @param {string} data - 需要加密的数据\n   * @returns {string} 加密后的数据\n   */\n  encrypt(data) {\n    if (!this.config.enableDataEncryption) {\n      return data;\n    }\n\n    try {\n      // 简单的XOR加密（仅用于演示）\n      const key = this.config.encryptionKey;\n      let encrypted = '';\n\n      for (let i = 0; i < data.length; i++) {\n        const keyChar = key.charCodeAt(i % key.length);\n        const dataChar = data.charCodeAt(i);\n        encrypted += String.fromCharCode(dataChar ^ keyChar);\n      }\n\n      return btoa(encrypted); // Base64编码\n    } catch (error) {\n      console.error('Encryption failed:', error);\n      return data;\n    }\n  }\n\n  /**\n   * 简单的数据解密\n   * @param {string} encryptedData - 加密的数据\n   * @returns {string} 解密后的数据\n   */\n  decrypt(encryptedData) {\n    if (!this.config.enableDataEncryption) {\n      return encryptedData;\n    }\n\n    try {\n      const encrypted = atob(encryptedData); // Base64解码\n      const key = this.config.encryptionKey;\n      let decrypted = '';\n\n      for (let i = 0; i < encrypted.length; i++) {\n        const keyChar = key.charCodeAt(i % key.length);\n        const encryptedChar = encrypted.charCodeAt(i);\n        decrypted += String.fromCharCode(encryptedChar ^ keyChar);\n      }\n\n      return decrypted;\n    } catch (error) {\n      console.error('Decryption failed:', error);\n      return encryptedData;\n    }\n  }\n\n  /**\n   * 验证输入数据的安全性\n   * @param {Object} data - 输入数据对象\n   * @param {Object} rules - 验证规则\n   * @returns {Object} 验证结果\n   */\n  validateSecurityRules(data, rules = {}) {\n    const result = {\n      isValid: true,\n      violations: [],\n      sanitizedData: {}\n    };\n\n    for (const [field, value] of Object.entries(data)) {\n      const fieldRules = rules[field] || {};\n      const sanitizeResult = this.sanitizeInput(value, fieldRules);\n\n      result.sanitizedData[field] = sanitizeResult.sanitized;\n\n      if (!sanitizeResult.isValid) {\n        result.isValid = false;\n        result.violations.push({\n          field,\n          violations: sanitizeResult.violations\n        });\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * 生成安全的随机令牌\n   * @param {number} length - 令牌长度\n   * @returns {string} 随机令牌\n   */\n  generateSecureToken(length = 32) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let token = '';\n\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n      const array = new Uint8Array(length);\n      crypto.getRandomValues(array);\n      for (let i = 0; i < length; i++) {\n        token += chars[array[i] % chars.length];\n      }\n    } else {\n      // 降级到Math.random\n      for (let i = 0; i < length; i++) {\n        token += chars.charAt(Math.floor(Math.random() * chars.length));\n      }\n    }\n\n    return token;\n  }\n\n  /**\n   * 获取安全配置\n   * @returns {Object} 当前安全配置\n   */\n  getConfig() {\n    return { ...this.config };\n  }\n\n  /**\n   * 更新安全配置\n   * @param {Object} newConfig - 新的配置\n   */\n  updateConfig(newConfig) {\n    this.config = { ...this.config, ...newConfig };\n  }\n}\n\n// 导出类\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = SecurityManager;\n} else if (typeof window !== 'undefined') {\n  window.SecurityManager = SecurityManager;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth\\security\\PasswordSecurity.js","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\[.","line":65,"column":26,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":65,"endColumn":27,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1339,1340],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1339,1339],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":65,"column":43,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":65,"endColumn":44,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1356,1357],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1356,1356],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * PasswordSecurity - 密码安全专职类\n * 职责: 密码加密、强度验证\n * 符合单一职责原则(SRP)\n */\nclass PasswordSecurity {\n  constructor() {\n    this.minLength = 8;\n    this.maxLength = 128;\n    this.saltRounds = 12; // bcrypt盐轮数\n  }\n\n  /**\n   * 验证密码强度\n   * @param {string} password - 待验证的密码\n   * @returns {Object} 验证结果\n   */\n  validatePasswordStrength(password) {\n    const result = {\n      isValid: false,\n      score: 0,\n      message: '',\n      requirements: {\n        length: false,\n        uppercase: false,\n        lowercase: false,\n        number: false,\n        special: false\n      }\n    };\n\n    // 检查密码长度\n    if (!password || password.length < this.minLength) {\n      result.message = `密码长度至少需要${this.minLength}个字符`;\n      return result;\n    }\n\n    if (password.length > this.maxLength) {\n      result.message = `密码长度不能超过${this.maxLength}个字符`;\n      return result;\n    }\n\n    result.requirements.length = true;\n    result.score += 1;\n\n    // 检查是否包含大写字母\n    if (/[A-Z]/.test(password)) {\n      result.requirements.uppercase = true;\n      result.score += 1;\n    }\n\n    // 检查是否包含小写字母\n    if (/[a-z]/.test(password)) {\n      result.requirements.lowercase = true;\n      result.score += 1;\n    }\n\n    // 检查是否包含数字\n    if (/\\d/.test(password)) {\n      result.requirements.number = true;\n      result.score += 1;\n    }\n\n    // 检查是否包含特殊字符\n    if (/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password)) {\n      result.requirements.special = true;\n      result.score += 1;\n    }\n\n    // 检查常见弱密码\n    if (this.isCommonPassword(password)) {\n      result.message = '密码过于常见，请使用更复杂的密码';\n      return result;\n    }\n\n    // 检查重复字符\n    if (this.hasRepeatingCharacters(password)) {\n      result.message = '密码不能包含过多重复字符';\n      return result;\n    }\n\n    // 根据评分确定密码强度\n    if (result.score >= 4) {\n      result.isValid = true;\n      result.message = '密码强度良好';\n    } else if (result.score >= 3) {\n      result.isValid = true;\n      result.message = '密码强度中等，建议包含更多字符类型';\n    } else {\n      result.message = '密码强度不足，请包含大小写字母、数字和特殊字符';\n    }\n\n    return result;\n  }\n\n  /**\n   * 哈希密码\n   * @param {string} password - 明文密码\n   * @returns {Promise<string>} 哈希后的密码\n   */\n  async hashPassword(password) {\n    try {\n      // 在浏览器环境中使用Web Crypto API\n      if (typeof window !== 'undefined' && window.crypto && window.crypto.subtle) {\n        return await this.hashPasswordWebCrypto(password);\n      }\n\n      // 在Node.js环境中使用bcrypt\n      if (typeof require !== 'undefined') {\n        const bcrypt = require('bcrypt');\n        return await bcrypt.hash(password, this.saltRounds);\n      }\n\n      // 降级方案：使用简单的哈希(仅用于开发环境)\n      console.warn('使用降级哈希方案，不适用于生产环境');\n      return await this.simpleHash(password);\n    } catch (error) {\n      console.error('Password hashing failed:', error);\n      throw new Error('密码加密失败');\n    }\n  }\n\n  /**\n   * 使用Web Crypto API哈希密码\n   * @param {string} password - 明文密码\n   * @returns {Promise<string>} 哈希后的密码\n   */\n  async hashPasswordWebCrypto(password) {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(password + this.generateSalt());\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  }\n\n  /**\n   * 简单哈希方案(仅用于开发)\n   * @param {string} password - 明文密码\n   * @returns {Promise<string>} 哈希后的密码\n   */\n  async simpleHash(password) {\n    // 这是一个简化的哈希实现，仅用于开发环境\n    const salt = this.generateSalt();\n    let hash = 0;\n    const str = password + salt;\n\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // 转换为32位整数\n    }\n\n    return `simple_${Math.abs(hash).toString(16)}_${salt}`;\n  }\n\n  /**\n   * 验证密码\n   * @param {string} password - 明文密码\n   * @param {string} hashedPassword - 哈希密码\n   * @returns {Promise<boolean>} 验证结果\n   */\n  async verifyPassword(password, hashedPassword) {\n    try {\n      // 检查是否为bcrypt哈希\n      if (hashedPassword.startsWith('$2b$') || hashedPassword.startsWith('$2a$')) {\n        if (typeof require !== 'undefined') {\n          const bcrypt = require('bcrypt');\n          return await bcrypt.compare(password, hashedPassword);\n        }\n      }\n\n      // 检查是否为简单哈希\n      if (hashedPassword.startsWith('simple_')) {\n        const parts = hashedPassword.split('_');\n        if (parts.length === 3) {\n          const salt = parts[2];\n          const expectedHash = await this.simpleHash(password.replace(salt, ''));\n          return expectedHash === hashedPassword;\n        }\n      }\n\n      // Web Crypto API验证\n      const newHash = await this.hashPasswordWebCrypto(password);\n      return newHash === hashedPassword;\n    } catch (error) {\n      console.error('Password verification failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 生成随机盐\n   * @returns {string} 随机盐\n   */\n  generateSalt() {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let salt = '';\n    for (let i = 0; i < 16; i++) {\n      salt += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return salt;\n  }\n\n  /**\n   * 检查是否为常见弱密码\n   * @param {string} password - 密码\n   * @returns {boolean} 是否为常见密码\n   */\n  isCommonPassword(password) {\n    const commonPasswords = [\n      'password', '123456', '123456789', 'qwerty', 'abc123',\n      'password123', 'admin', 'letmein', 'welcome', 'monkey',\n      '1234567890', 'password1', '123123', 'qwerty123',\n      'iloveyou', 'princess', 'admin123', 'welcome123'\n    ];\n\n    return commonPasswords.includes(password.toLowerCase());\n  }\n\n  /**\n   * 检查是否有过多重复字符\n   * @param {string} password - 密码\n   * @returns {boolean} 是否有过多重复字符\n   */\n  hasRepeatingCharacters(password) {\n    // 检查连续重复字符(如aaa, 111)\n    for (let i = 0; i < password.length - 2; i++) {\n      if (password[i] === password[i + 1] && password[i] === password[i + 2]) {\n        return true;\n      }\n    }\n\n    // 检查字符重复率\n    const charCount = {};\n    for (const char of password) {\n      charCount[char] = (charCount[char] || 0) + 1;\n    }\n\n    const maxRepeats = Math.max(...Object.values(charCount));\n    const repeatRatio = maxRepeats / password.length;\n\n    return repeatRatio > 0.5; // 超过50%重复率\n  }\n\n  /**\n   * 生成安全的随机密码\n   * @param {number} length - 密码长度\n   * @returns {string} 随机密码\n   */\n  generateSecurePassword(length = 12) {\n    const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const lowercase = 'abcdefghijklmnopqrstuvwxyz';\n    const numbers = '0123456789';\n    const special = '!@#$%^&*()_+-=[]{}|;:,.<>?';\n\n    const allChars = uppercase + lowercase + numbers + special;\n    let password = '';\n\n    // 确保至少包含每种字符类型\n    password += uppercase[Math.floor(Math.random() * uppercase.length)];\n    password += lowercase[Math.floor(Math.random() * lowercase.length)];\n    password += numbers[Math.floor(Math.random() * numbers.length)];\n    password += special[Math.floor(Math.random() * special.length)];\n\n    // 填充剩余长度\n    for (let i = 4; i < length; i++) {\n      password += allChars[Math.floor(Math.random() * allChars.length)];\n    }\n\n    // 打乱密码字符顺序\n    return password.split('').sort(() => Math.random() - 0.5).join('');\n  }\n\n  /**\n   * 设置密码长度要求\n   * @param {number} minLength - 最小长度\n   * @param {number} maxLength - 最大长度\n   */\n  setPasswordLengthRequirements(minLength, maxLength) {\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n  }\n}\n\n// 导出供其他模块使用\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = PasswordSecurity;\n}\n\n// 浏览器环境下的全局暴露\nif (typeof window !== 'undefined') {\n  window.PasswordSecurity = PasswordSecurity;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth\\session-management.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth\\storage-manager.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'key' is defined but never used. Allowed unused args must match /^_/u.","line":715,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":715,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used. Allowed unused args must match /^_/u.","line":715,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":715,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'key' is defined but never used. Allowed unused args must match /^_/u.","line":720,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":720,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used. Allowed unused args must match /^_/u.","line":720,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":720,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'storageType' is defined but never used. Allowed unused args must match /^_/u.","line":720,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":720,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'options' is defined but never used. Allowed unused args must match /^_/u.","line":720,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":720,"endColumn":53},{"ruleId":"no-unused-vars","severity":2,"message":"'key' is defined but never used. Allowed unused args must match /^_/u.","line":721,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":721,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'storageType' is defined but never used. Allowed unused args must match /^_/u.","line":721,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":721,"endColumn":41},{"ruleId":"no-unused-vars","severity":2,"message":"'key' is defined but never used. Allowed unused args must match /^_/u.","line":722,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":722,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'storageType' is defined but never used. Allowed unused args must match /^_/u.","line":722,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":722,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'type' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":723,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":723,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'key' is defined but never used. Allowed unused args must match /^_/u.","line":725,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":725,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used. Allowed unused args must match /^_/u.","line":727,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":727,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'options' is defined but never used. Allowed unused args must match /^_/u.","line":727,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":727,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used. Allowed unused args must match /^_/u.","line":729,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":729,"endColumn":33},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used. Allowed unused args must match /^_/u.","line":730,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":730,"endColumn":32}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 数据存储和持久化管理器\n * 负责用户数据的存储、检索、持久化和数据完整性保证\n */\nclass StorageManager {\n  constructor(config = {}) {\n    this.config = {\n      // 存储配置\n      enableLocalStorage: config.enableLocalStorage !== false,\n      enableSessionStorage: config.enableSessionStorage !== false,\n      enableIndexedDB: config.enableIndexedDB !== false,\n      enableCloudSync: config.enableCloudSync || false,\n\n      // 数据完整性配置\n      enableDataValidation: config.enableDataValidation !== false,\n      enableBackup: config.enableBackup !== false,\n      enableEncryption: config.enableEncryption !== false,\n\n      // 性能配置\n      cacheSize: config.cacheSize || 100,\n      syncInterval: config.syncInterval || 30000, // 30秒\n      compressionEnabled: config.compressionEnabled || false,\n\n      // 错误处理配置\n      maxRetries: config.maxRetries || 3,\n      retryDelay: config.retryDelay || 1000,\n      fallbackStorage: config.fallbackStorage || 'memory',\n\n      ...config\n    };\n\n    this.cache = new Map();\n    this.pendingOperations = new Map();\n    this.syncQueue = [];\n    this.isInitialized = false;\n    this.storageAvailable = {};\n    this.encryptionKey = null;\n\n    // 绑定方法\n    this.init = this.init.bind(this);\n    this.store = this.store.bind(this);\n    this.retrieve = this.retrieve.bind(this);\n    this.remove = this.remove.bind(this);\n    this.clear = this.clear.bind(this);\n    this.sync = this.sync.bind(this);\n    this.backup = this.backup.bind(this);\n    this.restore = this.restore.bind(this);\n  }\n\n  /**\n     * 初始化存储管理器\n     */\n  async init() {\n    try {\n      console.log('StorageManager: 开始初始化...');\n\n      // 检查存储可用性\n      await this.checkStorageAvailability();\n\n      // 初始化加密\n      if (this.config.enableEncryption) {\n        await this.initEncryption();\n      }\n\n      // 初始化IndexedDB\n      if (this.config.enableIndexedDB && this.storageAvailable.indexedDB) {\n        await this.initIndexedDB();\n      }\n\n      // 启动同步服务\n      if (this.config.enableCloudSync) {\n        this.startSyncService();\n      }\n\n      // 恢复缓存数据\n      await this.loadCacheFromStorage();\n\n      this.isInitialized = true;\n      console.log('StorageManager: 初始化完成');\n\n      return {\n        success: true,\n        storageAvailable: this.storageAvailable,\n        config: this.config\n      };\n    } catch (error) {\n      console.error('StorageManager: 初始化失败', error);\n      throw new Error(`存储管理器初始化失败: ${error.message}`);\n    }\n  }\n\n  /**\n     * 检查存储可用性\n     */\n  async checkStorageAvailability() {\n    // 检查localStorage\n    try {\n      const testKey = '__storage_test__';\n      localStorage.setItem(testKey, 'test');\n      localStorage.removeItem(testKey);\n      this.storageAvailable.localStorage = true;\n    } catch (e) {\n      this.storageAvailable.localStorage = false;\n      console.warn('localStorage 不可用:', e.message);\n    }\n\n    // 检查sessionStorage\n    try {\n      const testKey = '__session_test__';\n      sessionStorage.setItem(testKey, 'test');\n      sessionStorage.removeItem(testKey);\n      this.storageAvailable.sessionStorage = true;\n    } catch (e) {\n      this.storageAvailable.sessionStorage = false;\n      console.warn('sessionStorage 不可用:', e.message);\n    }\n\n    // 检查IndexedDB\n    try {\n      this.storageAvailable.indexedDB = 'indexedDB' in window;\n    } catch (e) {\n      this.storageAvailable.indexedDB = false;\n      console.warn('IndexedDB 不可用:', e.message);\n    }\n  }\n\n  /**\n     * 初始化加密\n     */\n  async initEncryption() {\n    try {\n      if (window.crypto && window.crypto.subtle) {\n        // 生成或获取加密密钥\n        const keyData = localStorage.getItem('__encryption_key__');\n        if (keyData) {\n          this.encryptionKey = await window.crypto.subtle.importKey(\n            'raw',\n            new Uint8Array(JSON.parse(keyData)),\n            { name: 'AES-GCM' },\n            false,\n            ['encrypt', 'decrypt']\n          );\n        } else {\n          this.encryptionKey = await window.crypto.subtle.generateKey(\n            { name: 'AES-GCM', length: 256 },\n            true,\n            ['encrypt', 'decrypt']\n          );\n\n          // 导出并保存密钥\n          const exportedKey = await window.crypto.subtle.exportKey('raw', this.encryptionKey);\n          localStorage.setItem('__encryption_key__', JSON.stringify(Array.from(new Uint8Array(exportedKey))));\n        }\n        console.log('StorageManager: 加密初始化完成');\n      } else {\n        console.warn('StorageManager: Web Crypto API 不可用，禁用加密');\n        this.config.enableEncryption = false;\n      }\n    } catch (error) {\n      console.error('StorageManager: 加密初始化失败', error);\n      this.config.enableEncryption = false;\n    }\n  }\n\n  /**\n     * 初始化IndexedDB\n     */\n  async initIndexedDB() {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('AuthStorageDB', 1);\n\n      request.onerror = () => {\n        console.error('StorageManager: IndexedDB 打开失败');\n        this.storageAvailable.indexedDB = false;\n        reject(request.error);\n      };\n\n      request.onsuccess = () => {\n        this.indexedDB = request.result;\n        console.log('StorageManager: IndexedDB 初始化完成');\n        resolve();\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n\n        // 创建用户数据存储\n        if (!db.objectStoreNames.contains('users')) {\n          const userStore = db.createObjectStore('users', { keyPath: 'id' });\n          userStore.createIndex('username', 'username', { unique: true });\n          userStore.createIndex('email', 'email', { unique: true });\n        }\n\n        // 创建会话数据存储\n        if (!db.objectStoreNames.contains('sessions')) {\n          db.createObjectStore('sessions', { keyPath: 'id' });\n        }\n\n        // 创建备份数据存储\n        if (!db.objectStoreNames.contains('backups')) {\n          db.createObjectStore('backups', { keyPath: 'timestamp' });\n        }\n      };\n    });\n  }\n\n  /**\n     * 存储数据\n     */\n  async store(key, data, options = {}) {\n    try {\n      if (!this.isInitialized) {\n        await this.init();\n      }\n\n      const storeOptions = {\n        persistent: options.persistent !== false,\n        encrypted: options.encrypted || this.config.enableEncryption,\n        backup: options.backup !== false,\n        validate: options.validate !== false,\n        storageType: options.storageType || 'auto',\n        ...options\n      };\n\n      // 数据验证\n      if (storeOptions.validate && this.config.enableDataValidation) {\n        await this.validateData(key, data);\n      }\n\n      // 数据加密\n      let processedData = data;\n      if (storeOptions.encrypted && this.encryptionKey) {\n        processedData = await this.encryptData(data);\n      }\n\n      // 数据压缩\n      if (this.config.compressionEnabled) {\n        processedData = await this.compressData(processedData);\n      }\n\n      // 选择存储方式\n      const storageType = this.selectStorageType(storeOptions.storageType, storeOptions.persistent);\n\n      // 执行存储\n      const result = await this.executeStore(key, processedData, storageType, storeOptions);\n\n      // 更新缓存\n      this.updateCache(key, data, storeOptions);\n\n      // 创建备份\n      if (storeOptions.backup && this.config.enableBackup) {\n        await this.createBackup(key, data);\n      }\n\n      // 添加到同步队列\n      if (this.config.enableCloudSync) {\n        this.addToSyncQueue(key, data, 'store');\n      }\n\n      console.log(`StorageManager: 数据存储成功 - ${key}`);\n      return result;\n\n    } catch (error) {\n      console.error(`StorageManager: 数据存储失败 - ${key}`, error);\n      throw new Error(`数据存储失败: ${error.message}`);\n    }\n  }\n\n  /**\n     * 检索数据\n     */\n  async retrieve(key, options = {}) {\n    try {\n      if (!this.isInitialized) {\n        await this.init();\n      }\n\n      const retrieveOptions = {\n        useCache: options.useCache !== false,\n        decrypt: options.decrypt !== false,\n        fallback: options.fallback !== false,\n        storageType: options.storageType || 'auto',\n        ...options\n      };\n\n      // 检查缓存\n      if (retrieveOptions.useCache && this.cache.has(key)) {\n        const cachedData = this.cache.get(key);\n        if (this.isCacheValid(cachedData)) {\n          console.log(`StorageManager: 从缓存获取数据 - ${key}`);\n          return cachedData.data;\n        }\n      }\n\n      // 从存储中检索\n      let data = null;\n      const storageTypes = this.getStorageTypePriority(retrieveOptions.storageType);\n\n      for (const storageType of storageTypes) {\n        try {\n          data = await this.executeRetrieve(key, storageType);\n          if (data !== null) {\n            break;\n          }\n        } catch (error) {\n          console.warn(`StorageManager: 从 ${storageType} 检索失败`, error);\n          continue;\n        }\n      }\n\n      if (data === null) {\n        if (retrieveOptions.fallback) {\n          data = await this.retrieveFromBackup(key);\n        }\n\n        if (data === null) {\n          console.log(`StorageManager: 数据不存在 - ${key}`);\n          return null;\n        }\n      }\n\n      // 数据解压缩\n      if (this.config.compressionEnabled) {\n        data = await this.decompressData(data);\n      }\n\n      // 数据解密\n      if (retrieveOptions.decrypt && this.encryptionKey) {\n        data = await this.decryptData(data);\n      }\n\n      // 更新缓存\n      this.updateCache(key, data, retrieveOptions);\n\n      console.log(`StorageManager: 数据检索成功 - ${key}`);\n      return data;\n\n    } catch (error) {\n      console.error(`StorageManager: 数据检索失败 - ${key}`, error);\n      throw new Error(`数据检索失败: ${error.message}`);\n    }\n  }\n\n  /**\n     * 删除数据\n     */\n  async remove(key, options = {}) {\n    try {\n      if (!this.isInitialized) {\n        await this.init();\n      }\n\n      const removeOptions = {\n        removeFromAll: options.removeFromAll !== false,\n        createBackup: options.createBackup !== false,\n        ...options\n      };\n\n      // 创建删除前备份\n      if (removeOptions.createBackup && this.config.enableBackup) {\n        const data = await this.retrieve(key, { useCache: false });\n        if (data) {\n          await this.createBackup(key, data, 'before_delete');\n        }\n      }\n\n      // 从所有存储中删除\n      if (removeOptions.removeFromAll) {\n        const storageTypes = ['localStorage', 'sessionStorage', 'indexedDB'];\n        for (const storageType of storageTypes) {\n          try {\n            await this.executeRemove(key, storageType);\n          } catch (error) {\n            console.warn(`StorageManager: 从 ${storageType} 删除失败`, error);\n          }\n        }\n      } else {\n        await this.executeRemove(key, removeOptions.storageType || 'auto');\n      }\n\n      // 从缓存中删除\n      this.cache.delete(key);\n\n      // 添加到同步队列\n      if (this.config.enableCloudSync) {\n        this.addToSyncQueue(key, null, 'remove');\n      }\n\n      console.log(`StorageManager: 数据删除成功 - ${key}`);\n      return true;\n\n    } catch (error) {\n      console.error(`StorageManager: 数据删除失败 - ${key}`, error);\n      throw new Error(`数据删除失败: ${error.message}`);\n    }\n  }\n\n  /**\n     * 清空存储\n     */\n  async clear(options = {}) {\n    try {\n      const clearOptions = {\n        clearAll: options.clearAll !== false,\n        createBackup: options.createBackup !== false,\n        ...options\n      };\n\n      // 创建全量备份\n      if (clearOptions.createBackup && this.config.enableBackup) {\n        await this.createFullBackup();\n      }\n\n      // 清空各种存储\n      if (clearOptions.clearAll) {\n        if (this.storageAvailable.localStorage) {\n          localStorage.clear();\n        }\n\n        if (this.storageAvailable.sessionStorage) {\n          sessionStorage.clear();\n        }\n\n        if (this.storageAvailable.indexedDB && this.indexedDB) {\n          await this.clearIndexedDB();\n        }\n      }\n\n      // 清空缓存\n      this.cache.clear();\n\n      // 清空同步队列\n      this.syncQueue = [];\n\n      console.log('StorageManager: 存储清空完成');\n      return true;\n\n    } catch (error) {\n      console.error('StorageManager: 存储清空失败', error);\n      throw new Error(`存储清空失败: ${error.message}`);\n    }\n  }\n\n  /**\n     * 数据同步\n     */\n  async sync(options = {}) {\n    try {\n      if (!this.config.enableCloudSync) {\n        console.warn('StorageManager: 云同步未启用');\n        return false;\n      }\n\n      const syncOptions = {\n        force: options.force || false,\n        direction: options.direction || 'bidirectional', // 'up', 'down', 'bidirectional'\n        ...options\n      };\n\n      console.log('StorageManager: 开始数据同步...');\n\n      // 处理同步队列\n      const results = [];\n      for (const item of this.syncQueue) {\n        try {\n          const result = await this.syncItem(item, syncOptions);\n          results.push(result);\n        } catch (error) {\n          console.error('StorageManager: 同步项目失败', item, error);\n          results.push({ success: false, error: error.message, item });\n        }\n      }\n\n      // 清空已同步的项目\n      this.syncQueue = this.syncQueue.filter((_, index) => !results[index]?.success);\n\n      console.log('StorageManager: 数据同步完成', results);\n      return results;\n\n    } catch (error) {\n      console.error('StorageManager: 数据同步失败', error);\n      throw new Error(`数据同步失败: ${error.message}`);\n    }\n  }\n\n  /**\n     * 创建备份\n     */\n  async backup(options = {}) {\n    try {\n      const backupOptions = {\n        includeCache: options.includeCache || false,\n        compress: options.compress !== false,\n        encrypt: options.encrypt !== false,\n        ...options\n      };\n\n      const backupData = {\n        timestamp: Date.now(),\n        version: '1.0',\n        config: this.config,\n        data: {}\n      };\n\n      // 备份localStorage数据\n      if (this.storageAvailable.localStorage) {\n        backupData.data.localStorage = {};\n        for (let i = 0; i < localStorage.length; i++) {\n          const key = localStorage.key(i);\n          if (key && !key.startsWith('__')) {\n            backupData.data.localStorage[key] = localStorage.getItem(key);\n          }\n        }\n      }\n\n      // 备份IndexedDB数据\n      if (this.storageAvailable.indexedDB && this.indexedDB) {\n        backupData.data.indexedDB = await this.exportIndexedDBData();\n      }\n\n      // 备份缓存数据\n      if (backupOptions.includeCache) {\n        backupData.data.cache = Array.from(this.cache.entries());\n      }\n\n      // 压缩备份数据\n      let processedBackup = backupData;\n      if (backupOptions.compress) {\n        processedBackup = await this.compressData(backupData);\n      }\n\n      // 加密备份数据\n      if (backupOptions.encrypt && this.encryptionKey) {\n        processedBackup = await this.encryptData(processedBackup);\n      }\n\n      // 保存备份\n      const backupKey = `backup_${backupData.timestamp}`;\n      await this.store(backupKey, processedBackup, { persistent: true, backup: false });\n\n      console.log('StorageManager: 备份创建完成', backupKey);\n      return backupKey;\n\n    } catch (error) {\n      console.error('StorageManager: 备份创建失败', error);\n      throw new Error(`备份创建失败: ${error.message}`);\n    }\n  }\n\n  /**\n     * 恢复备份\n     */\n  async restore(backupKey, options = {}) {\n    try {\n      const restoreOptions = {\n        clearBefore: options.clearBefore || false,\n        validateBackup: options.validateBackup !== false,\n        ...options\n      };\n\n      // 获取备份数据\n      let backupData = await this.retrieve(backupKey, { useCache: false, decrypt: true });\n\n      if (!backupData) {\n        throw new Error('备份数据不存在');\n      }\n\n      // 解压缩备份数据\n      if (this.config.compressionEnabled) {\n        backupData = await this.decompressData(backupData);\n      }\n\n      // 验证备份数据\n      if (restoreOptions.validateBackup) {\n        await this.validateBackupData(backupData);\n      }\n\n      // 清空现有数据\n      if (restoreOptions.clearBefore) {\n        await this.clear({ createBackup: true });\n      }\n\n      // 恢复localStorage数据\n      if (backupData.data.localStorage && this.storageAvailable.localStorage) {\n        for (const [key, value] of Object.entries(backupData.data.localStorage)) {\n          localStorage.setItem(key, value);\n        }\n      }\n\n      // 恢复IndexedDB数据\n      if (backupData.data.indexedDB && this.storageAvailable.indexedDB) {\n        await this.importIndexedDBData(backupData.data.indexedDB);\n      }\n\n      // 恢复缓存数据\n      if (backupData.data.cache) {\n        this.cache.clear();\n        for (const [key, value] of backupData.data.cache) {\n          this.cache.set(key, value);\n        }\n      }\n\n      console.log('StorageManager: 备份恢复完成', backupKey);\n      return true;\n\n    } catch (error) {\n      console.error('StorageManager: 备份恢复失败', error);\n      throw new Error(`备份恢复失败: ${error.message}`);\n    }\n  }\n\n  /**\n     * 获取存储统计信息\n     */\n  getStorageStats() {\n    const stats = {\n      cache: {\n        size: this.cache.size,\n        maxSize: this.config.cacheSize\n      },\n      syncQueue: {\n        pending: this.syncQueue.length\n      },\n      storage: {\n        available: this.storageAvailable,\n        initialized: this.isInitialized\n      },\n      config: this.config\n    };\n\n    // 计算localStorage使用情况\n    if (this.storageAvailable.localStorage) {\n      let localStorageSize = 0;\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key) {\n          localStorageSize += key.length + (localStorage.getItem(key) || '').length;\n        }\n      }\n      stats.localStorage = {\n        used: localStorageSize,\n        items: localStorage.length\n      };\n    }\n\n    return stats;\n  }\n\n  // 辅助方法\n\n  selectStorageType(requested, persistent) {\n    if (requested !== 'auto') {\n      return requested;\n    }\n\n    if (persistent) {\n      if (this.storageAvailable.indexedDB) {return 'indexedDB';}\n      if (this.storageAvailable.localStorage) {return 'localStorage';}\n    } else {\n      if (this.storageAvailable.sessionStorage) {return 'sessionStorage';}\n      if (this.storageAvailable.localStorage) {return 'localStorage';}\n    }\n\n    return 'memory';\n  }\n\n  getStorageTypePriority(requested) {\n    if (requested !== 'auto') {\n      return [requested];\n    }\n\n    return ['indexedDB', 'localStorage', 'sessionStorage', 'memory']\n      .filter(type => this.storageAvailable[type] || type === 'memory');\n  }\n\n  updateCache(key, data, options) {\n    if (this.cache.size >= this.config.cacheSize) {\n      // 删除最旧的缓存项\n      const firstKey = this.cache.keys().next().value;\n      this.cache.delete(firstKey);\n    }\n\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now(),\n      options\n    });\n  }\n\n  isCacheValid(cachedData) {\n    const maxAge = 5 * 60 * 1000; // 5分钟\n    return Date.now() - cachedData.timestamp < maxAge;\n  }\n\n  addToSyncQueue(key, data, operation) {\n    this.syncQueue.push({\n      key,\n      data,\n      operation,\n      timestamp: Date.now()\n    });\n  }\n\n  startSyncService() {\n    setInterval(() => {\n      if (this.syncQueue.length > 0) {\n        this.sync().catch(error => {\n          console.error('StorageManager: 自动同步失败', error);\n        });\n      }\n    }, this.config.syncInterval);\n  }\n\n  // 占位方法 - 需要根据具体需求实现\n  async validateData(key, data) { return true; }\n  async encryptData(data) { return data; }\n  async decryptData(data) { return data; }\n  async compressData(data) { return data; }\n  async decompressData(data) { return data; }\n  async executeStore(key, data, storageType, options) { return true; }\n  async executeRetrieve(key, storageType) { return null; }\n  async executeRemove(key, storageType) { return true; }\n  async createBackup(key, data, type = 'normal') { return true; }\n  async createFullBackup() { return true; }\n  async retrieveFromBackup(key) { return null; }\n  async clearIndexedDB() { return true; }\n  async syncItem(item, options) { return { success: true }; }\n  async exportIndexedDBData() { return {}; }\n  async importIndexedDBData(data) { return true; }\n  async validateBackupData(data) { return true; }\n  async loadCacheFromStorage() { return true; }\n}\n\n// 导出模块\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = StorageManager;\n} else if (typeof window !== 'undefined') {\n  window.StorageManager = StorageManager;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth\\ui-interaction.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\auth\\ui\\AuthUI.js","messages":[{"ruleId":"no-undefined","severity":2,"message":"Unexpected use of undefined.","line":66,"column":35,"nodeType":"Identifier","messageId":"unexpectedUndefined","endLine":66,"endColumn":44},{"ruleId":"no-undefined","severity":2,"message":"Unexpected use of undefined.","line":256,"column":35,"nodeType":"Identifier","messageId":"unexpectedUndefined","endLine":256,"endColumn":44}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AuthUI - 认证UI交互专职类\n * 职责: 认证相关的UI状态更新、消息显示\n * 符合单一职责原则(SRP)\n */\nclass AuthUI {\n  constructor() {\n    this.loadingElements = [];\n    this.messageContainer = null;\n    this.userInfoElements = [];\n    this.loginElements = [];\n    this.logoutElements = [];\n\n    this.initializeElements();\n  }\n\n  /**\n   * 初始化UI元素引用\n   */\n  initializeElements() {\n    // 加载状态元素\n    this.loadingElements = document.querySelectorAll('.loading-spinner, .auth-loading');\n\n    // 消息容器\n    this.messageContainer = document.querySelector('#auth-messages') ||\n                           document.querySelector('.auth-messages') ||\n                           this.createMessageContainer();\n\n    // 用户信息显示元素\n    this.userInfoElements = document.querySelectorAll('.user-info, .user-display, #user-name');\n\n    // 登录相关元素\n    this.loginElements = document.querySelectorAll('.login-form, .login-button, .auth-login');\n\n    // 登出相关元素\n    this.logoutElements = document.querySelectorAll('.logout-button, .auth-logout');\n  }\n\n  /**\n   * 创建消息容器\n   * @returns {HTMLElement} 消息容器元素\n   */\n  createMessageContainer() {\n    const container = document.createElement('div');\n    container.id = 'auth-messages';\n    container.className = 'auth-messages';\n    container.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      z-index: 9999;\n      max-width: 400px;\n    `;\n    document.body.appendChild(container);\n    return container;\n  }\n\n  /**\n   * 显示加载状态\n   * @param {string} message - 加载消息\n   */\n  showLoadingState(message = '加载中...') {\n    // 显示加载动画\n    this.loadingElements.forEach(element => {\n      element.style.display = 'block';\n      if (element.textContent !== undefined) {\n        element.textContent = message;\n      }\n    });\n\n    // 禁用表单按钮\n    this.disableFormButtons(true);\n\n    // 显示全局加载遮罩\n    this.showGlobalLoading(message);\n  }\n\n  /**\n   * 隐藏加载状态\n   */\n  hideLoadingState() {\n    // 隐藏加载动画\n    this.loadingElements.forEach(element => {\n      element.style.display = 'none';\n    });\n\n    // 启用表单按钮\n    this.disableFormButtons(false);\n\n    // 隐藏全局加载遮罩\n    this.hideGlobalLoading();\n  }\n\n  /**\n   * 显示成功消息\n   * @param {string} message - 成功消息\n   */\n  showSuccessMessage(message) {\n    this.showMessage(message, 'success');\n  }\n\n  /**\n   * 显示错误消息\n   * @param {string} message - 错误消息\n   */\n  showErrorMessage(message) {\n    this.showMessage(message, 'error');\n  }\n\n  /**\n   * 显示警告消息\n   * @param {string} message - 警告消息\n   */\n  showWarningMessage(message) {\n    this.showMessage(message, 'warning');\n  }\n\n  /**\n   * 显示信息消息\n   * @param {string} message - 信息消息\n   */\n  showInfoMessage(message) {\n    this.showMessage(message, 'info');\n  }\n\n  /**\n   * 显示消息\n   * @param {string} message - 消息内容\n   * @param {string} type - 消息类型(success, error, warning, info)\n   */\n  showMessage(message, type = 'info') {\n    const messageElement = this.createMessageElement(message, type);\n    this.messageContainer.appendChild(messageElement);\n\n    // 自动移除消息\n    setTimeout(() => {\n      this.removeMessage(messageElement);\n    }, type === 'error' ? 5000 : 3000);\n  }\n\n  /**\n   * 创建消息元素\n   * @param {string} message - 消息内容\n   * @param {string} type - 消息类型\n   * @returns {HTMLElement} 消息元素\n   */\n  createMessageElement(message, type) {\n    const messageElement = document.createElement('div');\n    messageElement.className = `auth-message auth-message-${type}`;\n    messageElement.innerHTML = `\n      <div class=\"message-content\">\n        <span class=\"message-icon\">${this.getMessageIcon(type)}</span>\n        <span class=\"message-text\">${message}</span>\n        <button class=\"message-close\" onclick=\"this.parentElement.parentElement.remove()\">&times;</button>\n      </div>\n    `;\n\n    // 添加样式\n    messageElement.style.cssText = `\n      margin-bottom: 10px;\n      padding: 12px 16px;\n      border-radius: 4px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n      background: ${this.getMessageBackground(type)};\n      color: ${this.getMessageColor(type)};\n      border-left: 4px solid ${this.getMessageBorderColor(type)};\n      animation: slideInRight 0.3s ease-out;\n    `;\n\n    return messageElement;\n  }\n\n  /**\n   * 获取消息图标\n   * @param {string} type - 消息类型\n   * @returns {string} 图标HTML\n   */\n  getMessageIcon(type) {\n    const icons = {\n      success: '✓',\n      error: '✗',\n      warning: '⚠',\n      info: 'ℹ'\n    };\n    return icons[type] || icons.info;\n  }\n\n  /**\n   * 获取消息背景色\n   * @param {string} type - 消息类型\n   * @returns {string} 背景色\n   */\n  getMessageBackground(type) {\n    const backgrounds = {\n      success: '#f0f9ff',\n      error: '#fef2f2',\n      warning: '#fffbeb',\n      info: '#f0f9ff'\n    };\n    return backgrounds[type] || backgrounds.info;\n  }\n\n  /**\n   * 获取消息文字颜色\n   * @param {string} type - 消息类型\n   * @returns {string} 文字颜色\n   */\n  getMessageColor(type) {\n    const colors = {\n      success: '#065f46',\n      error: '#991b1b',\n      warning: '#92400e',\n      info: '#1e40af'\n    };\n    return colors[type] || colors.info;\n  }\n\n  /**\n   * 获取消息边框颜色\n   * @param {string} type - 消息类型\n   * @returns {string} 边框颜色\n   */\n  getMessageBorderColor(type) {\n    const borderColors = {\n      success: '#10b981',\n      error: '#ef4444',\n      warning: '#f59e0b',\n      info: '#3b82f6'\n    };\n    return borderColors[type] || borderColors.info;\n  }\n\n  /**\n   * 移除消息\n   * @param {HTMLElement} messageElement - 消息元素\n   */\n  removeMessage(messageElement) {\n    if (messageElement && messageElement.parentNode) {\n      messageElement.style.animation = 'slideOutRight 0.3s ease-in';\n      setTimeout(() => {\n        if (messageElement.parentNode) {\n          messageElement.parentNode.removeChild(messageElement);\n        }\n      }, 300);\n    }\n  }\n\n  /**\n   * 更新已登录用户的UI\n   * @param {Object} user - 用户信息\n   */\n  updateUIForLoggedInUser(user) {\n    // 显示用户信息\n    this.userInfoElements.forEach(element => {\n      element.style.display = 'block';\n      if (element.textContent !== undefined) {\n        element.textContent = user.username || user.name || '用户';\n      }\n    });\n\n    // 隐藏登录元素\n    this.loginElements.forEach(element => {\n      element.style.display = 'none';\n    });\n\n    // 显示登出元素\n    this.logoutElements.forEach(element => {\n      element.style.display = 'block';\n    });\n\n    // 更新页面标题或其他全局UI状态\n    this.updateGlobalUIState('logged-in', user);\n  }\n\n  /**\n   * 更新已登出用户的UI\n   */\n  updateUIForLoggedOutUser() {\n    // 隐藏用户信息\n    this.userInfoElements.forEach(element => {\n      element.style.display = 'none';\n    });\n\n    // 显示登录元素\n    this.loginElements.forEach(element => {\n      element.style.display = 'block';\n    });\n\n    // 隐藏登出元素\n    this.logoutElements.forEach(element => {\n      element.style.display = 'none';\n    });\n\n    // 更新页面标题或其他全局UI状态\n    this.updateGlobalUIState('logged-out');\n  }\n\n  /**\n   * 禁用/启用表单按钮\n   * @param {boolean} disabled - 是否禁用\n   */\n  disableFormButtons(disabled) {\n    const buttons = document.querySelectorAll('.auth-form button, .login-form button, .register-form button');\n    buttons.forEach(button => {\n      button.disabled = disabled;\n      if (disabled) {\n        button.classList.add('disabled');\n      } else {\n        button.classList.remove('disabled');\n      }\n    });\n  }\n\n  /**\n   * 显示全局加载遮罩\n   * @param {string} message - 加载消息\n   */\n  showGlobalLoading(message) {\n    let overlay = document.querySelector('#auth-loading-overlay');\n    if (!overlay) {\n      overlay = document.createElement('div');\n      overlay.id = 'auth-loading-overlay';\n      overlay.innerHTML = `\n        <div class=\"loading-content\">\n          <div class=\"loading-spinner\"></div>\n          <div class=\"loading-message\">${message}</div>\n        </div>\n      `;\n      overlay.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0,0,0,0.5);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 10000;\n      `;\n      document.body.appendChild(overlay);\n    } else {\n      overlay.querySelector('.loading-message').textContent = message;\n      overlay.style.display = 'flex';\n    }\n  }\n\n  /**\n   * 隐藏全局加载遮罩\n   */\n  hideGlobalLoading() {\n    const overlay = document.querySelector('#auth-loading-overlay');\n    if (overlay) {\n      overlay.style.display = 'none';\n    }\n  }\n\n  /**\n   * 更新全局UI状态\n   * @param {string} state - UI状态\n   * @param {Object} data - 相关数据\n   */\n  updateGlobalUIState(state, data = {}) {\n    // 更新body类名\n    document.body.classList.remove('auth-logged-in', 'auth-logged-out');\n    document.body.classList.add(`auth-${state}`);\n\n    // 触发自定义事件\n    const event = new CustomEvent('authUIStateChange', {\n      detail: { state, data }\n    });\n    document.dispatchEvent(event);\n  }\n\n  /**\n   * 清除所有消息\n   */\n  clearAllMessages() {\n    if (this.messageContainer) {\n      this.messageContainer.innerHTML = '';\n    }\n  }\n\n  /**\n   * 重新初始化UI元素(用于动态内容更新后)\n   */\n  reinitialize() {\n    this.initializeElements();\n  }\n\n  /**\n   * 销毁UI管理器\n   */\n  destroy() {\n    this.clearAllMessages();\n    this.hideLoadingState();\n    this.hideGlobalLoading();\n\n    // 移除创建的消息容器\n    const messageContainer = document.querySelector('#auth-messages');\n    if (messageContainer && messageContainer.parentNode) {\n      messageContainer.parentNode.removeChild(messageContainer);\n    }\n\n    console.log('AuthUI destroyed');\n  }\n}\n\n// 导出供其他模块使用\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = AuthUI;\n}\n\n// 浏览器环境下的全局暴露\nif (typeof window !== 'undefined') {\n  window.AuthUI = AuthUI;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\cart.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\click-effects.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\code-analyzer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\config\\APIConfig.js","messages":[{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":93,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":93,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[2269,2296],"text":"Object.prototype.hasOwnProperty.call(this.config, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":102,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":102,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[2452,2479],"text":"Object.prototype.hasOwnProperty.call(this.config, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":266,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":266,"endColumn":7,"fix":{"range":[5784,5790],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":267,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":267,"endColumn":9,"fix":{"range":[5820,5828],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":268,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":268,"endColumn":7,"fix":{"range":[5877,5883],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":269,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":269,"endColumn":9,"fix":{"range":[5914,5922],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":270,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":270,"endColumn":7,"fix":{"range":[5973,5979],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":271,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":271,"endColumn":9,"fix":{"range":[6007,6015],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":272,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":272,"endColumn":7,"fix":{"range":[6063,6069],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":273,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":273,"endColumn":7,"fix":{"range":[6109,6115],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":274,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":274,"endColumn":9,"fix":{"range":[6153,6161],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":275,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":275,"endColumn":7,"fix":{"range":[6206,6212],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":276,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":276,"endColumn":9,"fix":{"range":[6221,6229],"text":"      "}}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":11,"fixableWarningCount":0,"source":"/**\n * API配置管理器\n * 专门负责API相关的配置常量和设置\n */\nclass APIConfig {\n  constructor() {\n    this.config = {\n      BASE_URL: '/api',\n      TIMEOUT: 10000,\n      RETRY_ATTEMPTS: 3,\n      RETRY_DELAY: 1000,\n      RATE_LIMIT: {\n        maxRequests: 100,\n        windowMs: 60000 // 1分钟\n      },\n      ENDPOINTS: {\n        products: {\n          list: '/products',\n          detail: '/products/{id}',\n          search: '/products/search',\n          categories: '/products/categories'\n        },\n        cart: {\n          get: '/cart',\n          add: '/cart/items',\n          update: '/cart/items/{id}',\n          remove: '/cart/items/{id}',\n          clear: '/cart/clear'\n        },\n        user: {\n          profile: '/user/profile',\n          login: '/auth/login',\n          logout: '/auth/logout',\n          register: '/auth/register'\n        },\n        orders: {\n          list: '/orders',\n          detail: '/orders/{id}',\n          create: '/orders',\n          cancel: '/orders/{id}/cancel'\n        }\n      },\n      HTTP_METHODS: {\n        GET: 'GET',\n        POST: 'POST',\n        PUT: 'PUT',\n        DELETE: 'DELETE',\n        PATCH: 'PATCH'\n      },\n      STATUS_CODES: {\n        OK: 200,\n        CREATED: 201,\n        NO_CONTENT: 204,\n        BAD_REQUEST: 400,\n        UNAUTHORIZED: 401,\n        FORBIDDEN: 403,\n        NOT_FOUND: 404,\n        INTERNAL_SERVER_ERROR: 500,\n        SERVICE_UNAVAILABLE: 503\n      },\n      HEADERS: {\n        CONTENT_TYPE: 'Content-Type',\n        AUTHORIZATION: 'Authorization',\n        ACCEPT: 'Accept',\n        USER_AGENT: 'User-Agent'\n      },\n      CONTENT_TYPES: {\n        JSON: 'application/json',\n        FORM_DATA: 'multipart/form-data',\n        URL_ENCODED: 'application/x-www-form-urlencoded',\n        TEXT: 'text/plain'\n      },\n      ERROR_MESSAGES: {\n        NETWORK_ERROR: 'Network error occurred',\n        TIMEOUT_ERROR: 'Request timeout',\n        SERVER_ERROR: 'Server error occurred',\n        UNAUTHORIZED_ERROR: 'Unauthorized access',\n        NOT_FOUND_ERROR: 'Resource not found',\n        VALIDATION_ERROR: 'Validation failed'\n      }\n    };\n\n    Object.freeze(this.config);\n  }\n\n  /**\n   * 获取配置值\n   * @param {string} key - 配置键\n   * @param {*} defaultValue - 默认值\n   * @returns {*} 配置值\n   */\n  get(key, defaultValue) {\n    return this.config.hasOwnProperty(key) ? this.config[key] : defaultValue;\n  }\n\n  /**\n   * 检查配置键是否存在\n   * @param {string} key - 配置键\n   * @returns {boolean} 是否存在\n   */\n  has(key) {\n    return this.config.hasOwnProperty(key);\n  }\n\n  /**\n   * 获取所有配置\n   * @returns {object} 配置对象的深拷贝\n   */\n  getAll() {\n    return Object.freeze(JSON.parse(JSON.stringify(this.config)));\n  }\n\n  /**\n   * 获取基础URL\n   * @returns {string} 基础URL\n   */\n  getBaseUrl() {\n    return this.config.BASE_URL;\n  }\n\n  /**\n   * 获取完整的API端点URL\n   * @param {string} category - 端点分类\n   * @param {string} endpoint - 端点名称\n   * @param {object} params - URL参数\n   * @returns {string} 完整URL\n   */\n  getEndpointUrl(category, endpoint, params = {}) {\n    const categoryEndpoints = this.config.ENDPOINTS[category];\n    if (!categoryEndpoints || !categoryEndpoints[endpoint]) {\n      throw new Error(`Endpoint ${category}.${endpoint} not found`);\n    }\n\n    let url = this.config.BASE_URL + categoryEndpoints[endpoint];\n\n    // 替换URL中的参数占位符\n    Object.entries(params).forEach(([key, value]) => {\n      url = url.replace(`{${key}}`, encodeURIComponent(value));\n    });\n\n    return url;\n  }\n\n  /**\n   * 获取所有端点配置\n   * @returns {object} 端点配置\n   */\n  getAllEndpoints() {\n    return JSON.parse(JSON.stringify(this.config.ENDPOINTS));\n  }\n\n  /**\n   * 获取特定分类的端点\n   * @param {string} category - 端点分类\n   * @returns {object|null} 端点配置\n   */\n  getEndpointsByCategory(category) {\n    return this.config.ENDPOINTS[category] ?\n      JSON.parse(JSON.stringify(this.config.ENDPOINTS[category])) : null;\n  }\n\n  /**\n   * 获取超时配置\n   * @returns {number} 超时时间(ms)\n   */\n  getTimeout() {\n    return this.config.TIMEOUT;\n  }\n\n  /**\n   * 获取重试配置\n   * @returns {object} 重试配置\n   */\n  getRetryConfig() {\n    return {\n      attempts: this.config.RETRY_ATTEMPTS,\n      delay: this.config.RETRY_DELAY\n    };\n  }\n\n  /**\n   * 获取速率限制配置\n   * @returns {object} 速率限制配置\n   */\n  getRateLimitConfig() {\n    return JSON.parse(JSON.stringify(this.config.RATE_LIMIT));\n  }\n\n  /**\n   * 获取HTTP方法常量\n   * @returns {object} HTTP方法\n   */\n  getHttpMethods() {\n    return JSON.parse(JSON.stringify(this.config.HTTP_METHODS));\n  }\n\n  /**\n   * 获取状态码常量\n   * @returns {object} 状态码\n   */\n  getStatusCodes() {\n    return JSON.parse(JSON.stringify(this.config.STATUS_CODES));\n  }\n\n  /**\n   * 检查状态码是否表示成功\n   * @param {number} statusCode - 状态码\n   * @returns {boolean} 是否成功\n   */\n  isSuccessStatus(statusCode) {\n    return statusCode >= 200 && statusCode < 300;\n  }\n\n  /**\n   * 检查状态码是否表示客户端错误\n   * @param {number} statusCode - 状态码\n   * @returns {boolean} 是否客户端错误\n   */\n  isClientError(statusCode) {\n    return statusCode >= 400 && statusCode < 500;\n  }\n\n  /**\n   * 检查状态码是否表示服务器错误\n   * @param {number} statusCode - 状态码\n   * @returns {boolean} 是否服务器错误\n   */\n  isServerError(statusCode) {\n    return statusCode >= 500 && statusCode < 600;\n  }\n\n  /**\n   * 获取请求头常量\n   * @returns {object} 请求头\n   */\n  getHeaders() {\n    return JSON.parse(JSON.stringify(this.config.HEADERS));\n  }\n\n  /**\n   * 获取内容类型常量\n   * @returns {object} 内容类型\n   */\n  getContentTypes() {\n    return JSON.parse(JSON.stringify(this.config.CONTENT_TYPES));\n  }\n\n  /**\n   * 获取错误消息\n   * @param {string} errorType - 错误类型\n   * @returns {string} 错误消息\n   */\n  getErrorMessage(errorType) {\n    return this.config.ERROR_MESSAGES[errorType] || 'Unknown error occurred';\n  }\n\n  /**\n   * 根据状态码获取错误消息\n   * @param {number} statusCode - 状态码\n   * @returns {string} 错误消息\n   */\n  getErrorMessageByStatus(statusCode) {\n    const statusCodes = this.config.STATUS_CODES;\n\n    switch (statusCode) {\n      case statusCodes.BAD_REQUEST:\n        return this.getErrorMessage('VALIDATION_ERROR');\n      case statusCodes.UNAUTHORIZED:\n        return this.getErrorMessage('UNAUTHORIZED_ERROR');\n      case statusCodes.NOT_FOUND:\n        return this.getErrorMessage('NOT_FOUND_ERROR');\n      case statusCodes.INTERNAL_SERVER_ERROR:\n      case statusCodes.SERVICE_UNAVAILABLE:\n        return this.getErrorMessage('SERVER_ERROR');\n      default:\n        return this.getErrorMessage('NETWORK_ERROR');\n    }\n  }\n\n  /**\n   * 构建默认请求配置\n   * @param {object} options - 自定义选项\n   * @returns {object} 请求配置\n   */\n  buildRequestConfig(options = {}) {\n    return {\n      timeout: this.getTimeout(),\n      headers: {\n        [this.config.HEADERS.CONTENT_TYPE]: this.config.CONTENT_TYPES.JSON,\n        [this.config.HEADERS.ACCEPT]: this.config.CONTENT_TYPES.JSON\n      },\n      ...options\n    };\n  }\n}\n\n// 创建全局实例\nconst apiConfig = new APIConfig();\n\n// 导出配置管理器\nif (typeof window !== 'undefined') {\n  window.APIConfig = APIConfig;\n  window.apiConfig = apiConfig;\n}\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { APIConfig, apiConfig };\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\config\\CodeAnalysisConfig.js","messages":[{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":86,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":86,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[2098,2125],"text":"Object.prototype.hasOwnProperty.call(this.config, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":95,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":95,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[2281,2308],"text":"Object.prototype.hasOwnProperty.call(this.config, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-undefined","severity":2,"message":"Unexpected use of undefined.","line":226,"column":26,"nodeType":"Identifier","messageId":"unexpectedUndefined","endLine":226,"endColumn":35}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 代码分析配置管理器\n * 专门负责代码分析相关的配置常量和设置\n */\nclass CodeAnalysisConfig {\n  constructor() {\n    this.config = {\n      COMPLEXITY_THRESHOLDS: {\n        cyclomatic: {\n          low: 5,\n          medium: 10,\n          high: 15,\n          critical: 20\n        },\n        cognitive: {\n          low: 7,\n          medium: 15,\n          high: 25,\n          critical: 35\n        }\n      },\n      CODE_METRICS: {\n        maxFunctionLength: 50,\n        maxClassLength: 300,\n        maxParameterCount: 5,\n        maxNestingDepth: 4,\n        minTestCoverage: 80\n      },\n      ANALYSIS_RULES: {\n        detectDuplicateCode: true,\n        detectLongMethods: true,\n        detectLargeClasses: true,\n        detectDeepNesting: true,\n        detectMagicNumbers: true,\n        detectUnusedVariables: true,\n        detectComplexConditions: true\n      },\n      SEVERITY_LEVELS: {\n        INFO: 1,\n        WARNING: 2,\n        ERROR: 3,\n        CRITICAL: 4\n      },\n      ISSUE_CATEGORIES: {\n        COMPLEXITY: 'complexity',\n        MAINTAINABILITY: 'maintainability',\n        PERFORMANCE: 'performance',\n        SECURITY: 'security',\n        STYLE: 'style',\n        BUGS: 'bugs'\n      },\n      LANGUAGE_CONFIGS: {\n        javascript: {\n          fileExtensions: ['.js', '.jsx', '.mjs'],\n          commentPatterns: ['//', '/*', '*/', '/**'],\n          functionKeywords: ['function', 'async function', '=>']\n        },\n        typescript: {\n          fileExtensions: ['.ts', '.tsx'],\n          commentPatterns: ['//', '/*', '*/', '/**'],\n          functionKeywords: ['function', 'async function', '=>']\n        },\n        css: {\n          fileExtensions: ['.css', '.scss', '.sass', '.less'],\n          commentPatterns: ['/*', '*/'],\n          functionKeywords: []\n        },\n        html: {\n          fileExtensions: ['.html', '.htm'],\n          commentPatterns: ['<!--', '-->'],\n          functionKeywords: []\n        }\n      }\n    };\n\n    Object.freeze(this.config);\n  }\n\n  /**\n   * 获取配置值\n   * @param {string} key - 配置键\n   * @param {*} defaultValue - 默认值\n   * @returns {*} 配置值\n   */\n  get(key, defaultValue) {\n    return this.config.hasOwnProperty(key) ? this.config[key] : defaultValue;\n  }\n\n  /**\n   * 检查配置键是否存在\n   * @param {string} key - 配置键\n   * @returns {boolean} 是否存在\n   */\n  has(key) {\n    return this.config.hasOwnProperty(key);\n  }\n\n  /**\n   * 获取所有配置\n   * @returns {object} 配置对象的深拷贝\n   */\n  getAll() {\n    return JSON.parse(JSON.stringify(this.config));\n  }\n\n  /**\n   * 获取复杂度阈值\n   * @param {string} type - 复杂度类型 (cyclomatic, cognitive)\n   * @returns {object} 复杂度阈值配置\n   */\n  getComplexityThresholds(type = 'cyclomatic') {\n    return this.config.COMPLEXITY_THRESHOLDS[type] || this.config.COMPLEXITY_THRESHOLDS.cyclomatic;\n  }\n\n  /**\n   * 获取所有复杂度阈值\n   * @returns {object} 所有复杂度阈值配置\n   */\n  getAllComplexityThresholds() {\n    return JSON.parse(JSON.stringify(this.config.COMPLEXITY_THRESHOLDS));\n  }\n\n  /**\n   * 获取代码指标配置\n   * @returns {object} 代码指标配置\n   */\n  getCodeMetrics() {\n    return JSON.parse(JSON.stringify(this.config.CODE_METRICS));\n  }\n\n  /**\n   * 获取分析规则配置\n   * @returns {object} 分析规则配置\n   */\n  getAnalysisRules() {\n    return JSON.parse(JSON.stringify(this.config.ANALYSIS_RULES));\n  }\n\n  /**\n   * 检查分析规则是否启用\n   * @param {string} ruleName - 规则名称\n   * @returns {boolean} 是否启用\n   */\n  isRuleEnabled(ruleName) {\n    return this.config.ANALYSIS_RULES[ruleName] === true;\n  }\n\n  /**\n   * 获取严重性级别\n   * @returns {object} 严重性级别配置\n   */\n  getSeverityLevels() {\n    return JSON.parse(JSON.stringify(this.config.SEVERITY_LEVELS));\n  }\n\n  /**\n   * 获取问题分类\n   * @returns {object} 问题分类配置\n   */\n  getIssueCategories() {\n    return JSON.parse(JSON.stringify(this.config.ISSUE_CATEGORIES));\n  }\n\n  /**\n   * 根据复杂度值获取严重性级别\n   * @param {number} complexity - 复杂度值\n   * @param {string} type - 复杂度类型\n   * @returns {string} 严重性级别\n   */\n  getComplexitySeverity(complexity, type = 'cyclomatic') {\n    const thresholds = this.getComplexityThresholds(type);\n\n    if (complexity >= thresholds.critical) {\n      return 'CRITICAL';\n    } else if (complexity >= thresholds.high) {\n      return 'ERROR';\n    } else if (complexity >= thresholds.medium) {\n      return 'WARNING';\n    }\n    return 'INFO';\n\n  }\n\n  /**\n   * 获取语言配置\n   * @param {string} language - 语言名称\n   * @returns {object|null} 语言配置\n   */\n  getLanguageConfig(language) {\n    return this.config.LANGUAGE_CONFIGS[language.toLowerCase()] || null;\n  }\n\n  /**\n   * 获取所有支持的语言\n   * @returns {string[]} 支持的语言列表\n   */\n  getSupportedLanguages() {\n    return Object.keys(this.config.LANGUAGE_CONFIGS);\n  }\n\n  /**\n   * 根据文件扩展名检测语言\n   * @param {string} filename - 文件名\n   * @returns {string|null} 检测到的语言\n   */\n  detectLanguageByExtension(filename) {\n    const extension = filename.substring(filename.lastIndexOf('.'));\n\n    for (const [language, config] of Object.entries(this.config.LANGUAGE_CONFIGS)) {\n      if (config.fileExtensions.includes(extension)) {\n        return language;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * 验证代码指标是否超出阈值\n   * @param {string} metric - 指标名称\n   * @param {number} value - 指标值\n   * @returns {boolean} 是否超出阈值\n   */\n  isMetricExceeded(metric, value) {\n    const threshold = this.config.CODE_METRICS[metric];\n    return threshold !== undefined && value > threshold;\n  }\n\n  /**\n   * 获取问题严重性数值\n   * @param {string} severity - 严重性级别名称\n   * @returns {number} 严重性数值\n   */\n  getSeverityValue(severity) {\n    return this.config.SEVERITY_LEVELS[severity] || 1;\n  }\n\n  /**\n   * 比较两个严重性级别\n   * @param {string} severity1 - 严重性级别1\n   * @param {string} severity2 - 严重性级别2\n   * @returns {number} 比较结果 (-1, 0, 1)\n   */\n  compareSeverity(severity1, severity2) {\n    const value1 = this.getSeverityValue(severity1);\n    const value2 = this.getSeverityValue(severity2);\n\n    if (value1 < value2) { return -1; }\n    if (value1 > value2) { return 1; }\n    return 0;\n  }\n}\n\n// 创建全局实例\nconst codeAnalysisConfig = new CodeAnalysisConfig();\n\n// 导出配置管理器\nif (typeof window !== 'undefined') {\n  window.CodeAnalysisConfig = CodeAnalysisConfig;\n  window.codeAnalysisConfig = codeAnalysisConfig;\n}\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { CodeAnalysisConfig, codeAnalysisConfig };\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\config\\DebugConfig.js","messages":[{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":77,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":77,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[2202,2229],"text":"Object.prototype.hasOwnProperty.call(this.config, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":86,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":86,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[2385,2412],"text":"Object.prototype.hasOwnProperty.call(this.config, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 调试配置管理器\n * 专门负责调试相关的配置常量和设置\n */\nclass DebugConfig {\n  constructor() {\n    this.config = {\n      ENABLED: process?.env?.NODE_ENV === 'development' ||\n        (typeof window !== 'undefined' && window.location.hostname === 'localhost'),\n      LOG_LEVELS: {\n        ERROR: 0,\n        WARN: 1,\n        INFO: 2,\n        DEBUG: 3,\n        TRACE: 4\n      },\n      CURRENT_LOG_LEVEL: 2, // INFO level by default\n      CONSOLE_STYLES: {\n        error: 'color: #ff4444; font-weight: bold;',\n        warn: 'color: #ffaa00; font-weight: bold;',\n        info: 'color: #4444ff; font-weight: normal;',\n        debug: 'color: #888888; font-weight: normal;',\n        trace: 'color: #cccccc; font-weight: normal;',\n        success: 'color: #44ff44; font-weight: bold;'\n      },\n      PERFORMANCE_MONITORING: {\n        enabled: true,\n        trackUserTiming: true,\n        trackResourceTiming: true,\n        trackNavigationTiming: true,\n        slowThreshold: 1000 // ms\n      },\n      ERROR_REPORTING: {\n        enabled: true,\n        includeStackTrace: true,\n        includeUserAgent: true,\n        includeUrl: true,\n        maxErrorsPerSession: 50\n      },\n      FEATURE_FLAGS: {\n        enableVerboseLogging: false,\n        enablePerformanceLogging: true,\n        enableErrorBoundary: true,\n        enableDevTools: true\n      },\n      STORAGE_KEYS: {\n        debugMode: 'debug_mode_enabled',\n        logLevel: 'debug_log_level',\n        performanceData: 'debug_performance_data',\n        errorLog: 'debug_error_log'\n      }\n    };\n\n    // 检查localStorage中的调试设置\n    if (typeof window !== 'undefined' && window.localStorage) {\n      const storedDebugMode = localStorage.getItem(this.config.STORAGE_KEYS.debugMode);\n      if (storedDebugMode !== null) {\n        this.config.ENABLED = storedDebugMode === 'true';\n      }\n\n      const storedLogLevel = localStorage.getItem(this.config.STORAGE_KEYS.logLevel);\n      if (storedLogLevel !== null) {\n        this.config.CURRENT_LOG_LEVEL = parseInt(storedLogLevel, 10);\n      }\n    }\n\n    Object.freeze(this.config);\n  }\n\n  /**\n   * 获取配置值\n   * @param {string} key - 配置键\n   * @param {*} defaultValue - 默认值\n   * @returns {*} 配置值\n   */\n  get(key, defaultValue) {\n    return this.config.hasOwnProperty(key) ? this.config[key] : defaultValue;\n  }\n\n  /**\n   * 检查配置键是否存在\n   * @param {string} key - 配置键\n   * @returns {boolean} 是否存在\n   */\n  has(key) {\n    return this.config.hasOwnProperty(key);\n  }\n\n  /**\n   * 获取所有配置\n   * @returns {object} 配置对象的深拷贝\n   */\n  getAll() {\n    return JSON.parse(JSON.stringify(this.config));\n  }\n\n  /**\n   * 检查调试模式是否启用\n   * @returns {boolean} 是否启用调试模式\n   */\n  isEnabled() {\n    return this.config.ENABLED;\n  }\n\n  /**\n   * 获取当前日志级别\n   * @returns {number} 当前日志级别\n   */\n  getCurrentLogLevel() {\n    return this.config.CURRENT_LOG_LEVEL;\n  }\n\n  /**\n   * 检查指定日志级别是否应该输出\n   * @param {string|number} level - 日志级别\n   * @returns {boolean} 是否应该输出\n   */\n  shouldLog(level) {\n    if (!this.isEnabled()) { return false; }\n\n    const levelValue = typeof level === 'string' ?\n      this.config.LOG_LEVELS[level.toUpperCase()] : level;\n\n    return levelValue <= this.config.CURRENT_LOG_LEVEL;\n  }\n\n  /**\n   * 获取日志级别配置\n   * @returns {object} 日志级别配置\n   */\n  getLogLevels() {\n    return JSON.parse(JSON.stringify(this.config.LOG_LEVELS));\n  }\n\n  /**\n   * 获取控制台样式\n   * @param {string} type - 样式类型\n   * @returns {string} CSS样式字符串\n   */\n  getConsoleStyle(type) {\n    return this.config.CONSOLE_STYLES[type] || this.config.CONSOLE_STYLES.info;\n  }\n\n  /**\n   * 获取所有控制台样式\n   * @returns {object} 所有控制台样式\n   */\n  getAllConsoleStyles() {\n    return JSON.parse(JSON.stringify(this.config.CONSOLE_STYLES));\n  }\n\n  /**\n   * 获取性能监控配置\n   * @returns {object} 性能监控配置\n   */\n  getPerformanceConfig() {\n    return JSON.parse(JSON.stringify(this.config.PERFORMANCE_MONITORING));\n  }\n\n  /**\n   * 检查性能监控是否启用\n   * @returns {boolean} 是否启用性能监控\n   */\n  isPerformanceMonitoringEnabled() {\n    return this.config.PERFORMANCE_MONITORING.enabled && this.isEnabled();\n  }\n\n  /**\n   * 获取错误报告配置\n   * @returns {object} 错误报告配置\n   */\n  getErrorReportingConfig() {\n    return JSON.parse(JSON.stringify(this.config.ERROR_REPORTING));\n  }\n\n  /**\n   * 检查错误报告是否启用\n   * @returns {boolean} 是否启用错误报告\n   */\n  isErrorReportingEnabled() {\n    return this.config.ERROR_REPORTING.enabled && this.isEnabled();\n  }\n\n  /**\n   * 获取功能标志配置\n   * @returns {object} 功能标志配置\n   */\n  getFeatureFlags() {\n    return JSON.parse(JSON.stringify(this.config.FEATURE_FLAGS));\n  }\n\n  /**\n   * 检查功能标志是否启用\n   * @param {string} flagName - 功能标志名称\n   * @returns {boolean} 是否启用\n   */\n  isFeatureEnabled(flagName) {\n    return this.config.FEATURE_FLAGS[flagName] === true && this.isEnabled();\n  }\n\n  /**\n   * 获取存储键配置\n   * @returns {object} 存储键配置\n   */\n  getStorageKeys() {\n    return JSON.parse(JSON.stringify(this.config.STORAGE_KEYS));\n  }\n\n  /**\n   * 格式化日志消息\n   * @param {string} level - 日志级别\n   * @param {string} message - 消息内容\n   * @param {*} data - 附加数据\n   * @returns {object} 格式化后的日志对象\n   */\n  formatLogMessage(level, message, data = null) {\n    return {\n      timestamp: new Date().toISOString(),\n      level: level.toUpperCase(),\n      message,\n      data,\n      url: typeof window !== 'undefined' ? window.location.href : null,\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : null\n    };\n  }\n\n  /**\n   * 检查是否应该记录性能数据\n   * @param {number} duration - 执行时长\n   * @returns {boolean} 是否应该记录\n   */\n  shouldLogPerformance(duration) {\n    return this.isPerformanceMonitoringEnabled() &&\n      duration >= this.config.PERFORMANCE_MONITORING.slowThreshold;\n  }\n\n  /**\n   * 获取调试信息摘要\n   * @returns {object} 调试信息摘要\n   */\n  getDebugSummary() {\n    return {\n      enabled: this.isEnabled(),\n      logLevel: this.getCurrentLogLevel(),\n      performanceMonitoring: this.isPerformanceMonitoringEnabled(),\n      errorReporting: this.isErrorReportingEnabled(),\n      featureFlags: this.getFeatureFlags(),\n      environment: {\n        isDevelopment: process?.env?.NODE_ENV === 'development',\n        isLocalhost: typeof window !== 'undefined' && window.location.hostname === 'localhost',\n        userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : null\n      }\n    };\n  }\n}\n\n// 创建全局实例\nconst debugConfig = new DebugConfig();\n\n// 导出配置管理器\nif (typeof window !== 'undefined') {\n  window.DebugConfig = DebugConfig;\n  window.debugConfig = debugConfig;\n}\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { DebugConfig, debugConfig };\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\config\\EventDelegationConfig.js","messages":[{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":81,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":81,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[1826,1853],"text":"Object.prototype.hasOwnProperty.call(this.config, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":90,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":90,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[2009,2036],"text":"Object.prototype.hasOwnProperty.call(this.config, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":231,"column":41,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":231,"endColumn":55,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[4989,5033],"text":"Object.prototype.hasOwnProperty.call(this.config.DELEGATED_EVENTS, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 事件委托配置管理器\n * 专门负责事件委托相关的配置常量和设置\n */\nclass EventDelegationConfig {\n  constructor() {\n    this.config = {\n      THROTTLE_DELAY: 100,\n      DEBOUNCE_DELAY: 300,\n      PASSIVE_EVENTS: ['scroll', 'wheel', 'touchstart', 'touchmove'],\n      DELEGATED_EVENTS: {\n        click: {\n          selectors: [\n            '[data-action]',\n            '.btn',\n            '.button',\n            '.clickable',\n            'a[href]',\n            'button'\n          ],\n          preventDefault: false,\n          stopPropagation: false\n        },\n        submit: {\n          selectors: ['form[data-ajax]', '.ajax-form'],\n          preventDefault: true,\n          stopPropagation: false\n        },\n        change: {\n          selectors: [\n            'input[data-auto-save]',\n            'select[data-auto-save]',\n            'textarea[data-auto-save]'\n          ],\n          preventDefault: false,\n          stopPropagation: false\n        },\n        input: {\n          selectors: [\n            'input[data-live-search]',\n            'input[data-validate]'\n          ],\n          preventDefault: false,\n          stopPropagation: false\n        },\n        keydown: {\n          selectors: [\n            '[data-hotkey]',\n            'input[data-shortcut]'\n          ],\n          preventDefault: false,\n          stopPropagation: false\n        }\n      },\n      CUSTOM_EVENTS: {\n        'cart:update': {\n          bubbles: true,\n          cancelable: true\n        },\n        'product:view': {\n          bubbles: true,\n          cancelable: false\n        },\n        'user:action': {\n          bubbles: true,\n          cancelable: true\n        }\n      }\n    };\n\n    Object.freeze(this.config);\n  }\n\n  /**\n   * 获取配置值\n   * @param {string} key - 配置键\n   * @param {*} defaultValue - 默认值\n   * @returns {*} 配置值\n   */\n  get(key, defaultValue) {\n    return this.config.hasOwnProperty(key) ? this.config[key] : defaultValue;\n  }\n\n  /**\n   * 检查配置键是否存在\n   * @param {string} key - 配置键\n   * @returns {boolean} 是否存在\n   */\n  has(key) {\n    return this.config.hasOwnProperty(key);\n  }\n\n  /**\n   * 获取所有配置\n   * @returns {object} 配置对象的深拷贝\n   */\n  getAll() {\n    return JSON.parse(JSON.stringify(this.config));\n  }\n\n  /**\n   * 获取节流延迟\n   * @returns {number} 节流延迟(ms)\n   */\n  getThrottleDelay() {\n    return this.config.THROTTLE_DELAY;\n  }\n\n  /**\n   * 获取防抖延迟\n   * @returns {number} 防抖延迟(ms)\n   */\n  getDebounceDelay() {\n    return this.config.DEBOUNCE_DELAY;\n  }\n\n  /**\n   * 获取被动事件列表\n   * @returns {string[]} 被动事件数组\n   */\n  getPassiveEvents() {\n    return [...this.config.PASSIVE_EVENTS];\n  }\n\n  /**\n   * 检查事件是否为被动事件\n   * @param {string} eventType - 事件类型\n   * @returns {boolean} 是否为被动事件\n   */\n  isPassiveEvent(eventType) {\n    return this.config.PASSIVE_EVENTS.includes(eventType);\n  }\n\n  /**\n   * 获取委托事件配置\n   * @param {string} eventType - 事件类型\n   * @returns {object|null} 委托事件配置\n   */\n  getDelegatedEventConfig(eventType) {\n    return this.config.DELEGATED_EVENTS[eventType] || null;\n  }\n\n  /**\n   * 获取所有委托事件配置\n   * @returns {object} 所有委托事件配置\n   */\n  getAllDelegatedEvents() {\n    return JSON.parse(JSON.stringify(this.config.DELEGATED_EVENTS));\n  }\n\n  /**\n   * 获取事件选择器\n   * @param {string} eventType - 事件类型\n   * @returns {string[]} 选择器数组\n   */\n  getEventSelectors(eventType) {\n    const config = this.config.DELEGATED_EVENTS[eventType];\n    return config ? [...config.selectors] : [];\n  }\n\n  /**\n   * 检查元素是否匹配委托事件选择器\n   * @param {Element} element - DOM元素\n   * @param {string} eventType - 事件类型\n   * @returns {boolean} 是否匹配\n   */\n  matchesEventSelector(element, eventType) {\n    const selectors = this.getEventSelectors(eventType);\n    return selectors.some(selector => element.matches(selector));\n  }\n\n  /**\n   * 获取自定义事件配置\n   * @param {string} eventName - 事件名称\n   * @returns {object|null} 自定义事件配置\n   */\n  getCustomEventConfig(eventName) {\n    return this.config.CUSTOM_EVENTS[eventName] || null;\n  }\n\n  /**\n   * 获取所有自定义事件配置\n   * @returns {object} 所有自定义事件配置\n   */\n  getAllCustomEvents() {\n    return JSON.parse(JSON.stringify(this.config.CUSTOM_EVENTS));\n  }\n\n  /**\n   * 创建自定义事件\n   * @param {string} eventName - 事件名称\n   * @param {*} detail - 事件详情\n   * @returns {CustomEvent} 自定义事件对象\n   */\n  createCustomEvent(eventName, detail = null) {\n    const config = this.getCustomEventConfig(eventName) || {\n      bubbles: true,\n      cancelable: true\n    };\n\n    return new CustomEvent(eventName, {\n      ...config,\n      detail\n    });\n  }\n\n  /**\n   * 获取事件处理选项\n   * @param {string} eventType - 事件类型\n   * @returns {object} 事件处理选项\n   */\n  getEventOptions(eventType) {\n    const isPassive = this.isPassiveEvent(eventType);\n    const config = this.getDelegatedEventConfig(eventType);\n\n    return {\n      passive: isPassive,\n      capture: false,\n      once: false,\n      preventDefault: config ? config.preventDefault : false,\n      stopPropagation: config ? config.stopPropagation : false\n    };\n  }\n\n  /**\n   * 验证事件类型是否支持委托\n   * @param {string} eventType - 事件类型\n   * @returns {boolean} 是否支持委托\n   */\n  supportsDelegation(eventType) {\n    return this.config.DELEGATED_EVENTS.hasOwnProperty(eventType);\n  }\n}\n\n// 创建全局实例\nconst eventDelegationConfig = new EventDelegationConfig();\n\n// 导出配置管理器\nif (typeof window !== 'undefined') {\n  window.EventDelegationConfig = EventDelegationConfig;\n  window.eventDelegationConfig = eventDelegationConfig;\n}\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { EventDelegationConfig, eventDelegationConfig };\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\config\\ImageOptimizationConfig.js","messages":[{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":37,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":37,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[815,842],"text":"Object.prototype.hasOwnProperty.call(this.config, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":46,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":46,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[998,1025],"text":"Object.prototype.hasOwnProperty.call(this.config, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 图片优化配置管理器\n * 专门负责图片优化相关的配置常量和设置\n */\nclass ImageOptimizationConfig {\n  constructor() {\n    this.config = {\n      MAX_RETRIES: 3,\n      RETRY_DELAY: 1000,\n      LAZY_LOADING_CONFIGS: {\n        critical: { rootMargin: '0px', threshold: 0.1 },\n        high: { rootMargin: '50px', threshold: 0.1 },\n        normal: { rootMargin: '200px', threshold: 0.1 }\n      },\n      BREAKPOINTS: [320, 480, 768, 1024, 1200, 1440, 1920],\n      IMAGE_FORMATS: {\n        webp: ['webp'],\n        standard: ['jpg', 'jpeg', 'png', 'gif']\n      },\n      QUALITY_SETTINGS: {\n        high: 0.9,\n        medium: 0.7,\n        low: 0.5\n      }\n    };\n\n    Object.freeze(this.config);\n  }\n\n  /**\n   * 获取配置值\n   * @param {string} key - 配置键\n   * @param {*} defaultValue - 默认值\n   * @returns {*} 配置值\n   */\n  get(key, defaultValue) {\n    return this.config.hasOwnProperty(key) ? this.config[key] : defaultValue;\n  }\n\n  /**\n   * 检查配置键是否存在\n   * @param {string} key - 配置键\n   * @returns {boolean} 是否存在\n   */\n  has(key) {\n    return this.config.hasOwnProperty(key);\n  }\n\n  /**\n   * 获取所有配置\n   * @returns {object} 配置对象的深拷贝\n   */\n  getAll() {\n    return JSON.parse(JSON.stringify(this.config));\n  }\n\n  /**\n   * 获取重试配置\n   * @returns {object} 重试配置\n   */\n  getRetryConfig() {\n    return {\n      maxRetries: this.config.MAX_RETRIES,\n      retryDelay: this.config.RETRY_DELAY\n    };\n  }\n\n  /**\n   * 获取懒加载配置\n   * @param {string} priority - 优先级 (critical, high, normal)\n   * @returns {object} 懒加载配置\n   */\n  getLazyLoadingConfig(priority = 'normal') {\n    return this.config.LAZY_LOADING_CONFIGS[priority] || this.config.LAZY_LOADING_CONFIGS.normal;\n  }\n\n  /**\n   * 获取所有懒加载配置\n   * @returns {object} 所有懒加载配置\n   */\n  getAllLazyLoadingConfigs() {\n    return JSON.parse(JSON.stringify(this.config.LAZY_LOADING_CONFIGS));\n  }\n\n  /**\n   * 获取响应式断点\n   * @returns {number[]} 断点数组\n   */\n  getBreakpoints() {\n    return [...this.config.BREAKPOINTS];\n  }\n\n  /**\n   * 根据宽度获取最适合的断点\n   * @param {number} width - 图片宽度\n   * @returns {number} 最适合的断点\n   */\n  getBestBreakpoint(width) {\n    const breakpoints = this.config.BREAKPOINTS;\n    for (let i = 0; i < breakpoints.length; i++) {\n      if (width <= breakpoints[i]) {\n        return breakpoints[i];\n      }\n    }\n    return breakpoints[breakpoints.length - 1];\n  }\n\n  /**\n   * 获取图片格式配置\n   * @returns {object} 图片格式配置\n   */\n  getImageFormats() {\n    return JSON.parse(JSON.stringify(this.config.IMAGE_FORMATS));\n  }\n\n  /**\n   * 检查是否支持WebP格式\n   * @returns {boolean} 是否支持WebP\n   */\n  supportsWebP() {\n    return this.config.IMAGE_FORMATS.webp.includes('webp');\n  }\n\n  /**\n   * 获取质量设置\n   * @param {string} quality - 质量级别 (high, medium, low)\n   * @returns {number} 质量值\n   */\n  getQualitySetting(quality = 'medium') {\n    return this.config.QUALITY_SETTINGS[quality] || this.config.QUALITY_SETTINGS.medium;\n  }\n\n  /**\n   * 获取所有质量设置\n   * @returns {object} 所有质量设置\n   */\n  getAllQualitySettings() {\n    return JSON.parse(JSON.stringify(this.config.QUALITY_SETTINGS));\n  }\n\n  /**\n   * 验证图片格式是否支持\n   * @param {string} format - 图片格式\n   * @returns {boolean} 是否支持\n   */\n  isSupportedFormat(format) {\n    const allFormats = [...this.config.IMAGE_FORMATS.webp, ...this.config.IMAGE_FORMATS.standard];\n    return allFormats.includes(format.toLowerCase());\n  }\n}\n\n// 创建全局实例\nconst imageOptimizationConfig = new ImageOptimizationConfig();\n\n// 导出配置管理器\nif (typeof window !== 'undefined') {\n  window.imageOptimizationConfig = imageOptimizationConfig;\n}\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = imageOptimizationConfig;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\config\\LazyLoaderConfig.js","messages":[{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":38,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":38,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[832,859],"text":"Object.prototype.hasOwnProperty.call(this.config, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":47,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":47,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[1015,1042],"text":"Object.prototype.hasOwnProperty.call(this.config, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 懒加载配置管理器\n * 专门负责懒加载相关的配置常量和设置\n */\nclass LazyLoaderConfig {\n  constructor() {\n    this.config = {\n      RETRY_ATTEMPTS: 3,\n      RETRY_DELAY: 1000,\n      TIMEOUT_DURATION: 10000,\n      VALID_MODULE_TYPES: ['route', 'component', 'script'],\n      ROUTE_MODULES: {\n        '#home': 'home',\n        '#products': 'products',\n        '#cart': 'cart',\n        '#checkout': 'checkout',\n        '#about': 'about',\n        '#contact': 'contact'\n      },\n      COMPONENT_MODULES: {\n        'product-card': 'product-card',\n        'cart-widget': 'cart-widget',\n        'search-bar': 'search-bar',\n        'user-profile': 'user-profile'\n      }\n    };\n\n    Object.freeze(this.config);\n  }\n\n  /**\n   * 获取配置值\n   * @param {string} key - 配置键\n   * @param {*} defaultValue - 默认值\n   * @returns {*} 配置值\n   */\n  get(key, defaultValue) {\n    return this.config.hasOwnProperty(key) ? this.config[key] : defaultValue;\n  }\n\n  /**\n   * 检查配置键是否存在\n   * @param {string} key - 配置键\n   * @returns {boolean} 是否存在\n   */\n  has(key) {\n    return this.config.hasOwnProperty(key);\n  }\n\n  /**\n   * 获取所有配置\n   * @returns {object} 配置对象的深拷贝\n   */\n  getAll() {\n    return JSON.parse(JSON.stringify(this.config));\n  }\n\n  /**\n   * 获取重试配置\n   * @returns {object} 重试配置\n   */\n  getRetryConfig() {\n    return {\n      attempts: this.config.RETRY_ATTEMPTS,\n      delay: this.config.RETRY_DELAY,\n      timeout: this.config.TIMEOUT_DURATION\n    };\n  }\n\n  /**\n   * 获取路由模块映射\n   * @returns {object} 路由模块映射\n   */\n  getRouteModules() {\n    return JSON.parse(JSON.stringify(this.config.ROUTE_MODULES));\n  }\n\n  /**\n   * 获取组件模块映射\n   * @returns {object} 组件模块映射\n   */\n  getComponentModules() {\n    return JSON.parse(JSON.stringify(this.config.COMPONENT_MODULES));\n  }\n\n  /**\n   * 根据路由获取模块名\n   * @param {string} route - 路由\n   * @returns {string|null} 模块名\n   */\n  getModuleByRoute(route) {\n    return this.config.ROUTE_MODULES[route] || null;\n  }\n\n  /**\n   * 根据组件名获取模块名\n   * @param {string} component - 组件名\n   * @returns {string|null} 模块名\n   */\n  getModuleByComponent(component) {\n    return this.config.COMPONENT_MODULES[component] || null;\n  }\n\n  /**\n   * 验证模块类型是否有效\n   * @param {string} type - 模块类型\n   * @returns {boolean} 是否有效\n   */\n  isValidModuleType(type) {\n    return this.config.VALID_MODULE_TYPES.includes(type);\n  }\n\n  /**\n   * 获取所有支持的模块类型\n   * @returns {string[]} 模块类型数组\n   */\n  getValidModuleTypes() {\n    return [...this.config.VALID_MODULE_TYPES];\n  }\n}\n\n// 创建全局实例\nconst lazyLoaderConfig = new LazyLoaderConfig();\n\n// 导出配置管理器\nif (typeof window !== 'undefined') {\n  window.lazyLoaderConfig = lazyLoaderConfig;\n}\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = lazyLoaderConfig;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\config\\NotificationConfig.js","messages":[{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":56,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":56,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[1405,1432],"text":"Object.prototype.hasOwnProperty.call(this.config, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":65,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":65,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[1588,1615],"text":"Object.prototype.hasOwnProperty.call(this.config, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":132,"column":43,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":132,"endColumn":57,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[3071,3117],"text":"Object.prototype.hasOwnProperty.call(this.config.NOTIFICATION_TYPES, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":141,"column":34,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":141,"endColumn":48,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[3262,3299],"text":"Object.prototype.hasOwnProperty.call(this.config.POSITIONS, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 通知系统配置管理器\n * 专门负责通知系统相关的配置常量和设置\n */\nclass NotificationConfig {\n  constructor() {\n    this.config = {\n      DEFAULT_DURATION: 5000,\n      POSITION: 'top-right',\n      MAX_NOTIFICATIONS: 5,\n      ANIMATION_DURATION: 300,\n      AUTO_DISMISS: true,\n      SHOW_CLOSE_BUTTON: true,\n      NOTIFICATION_TYPES: {\n        success: {\n          icon: '✓',\n          className: 'notification-success',\n          duration: 3000\n        },\n        error: {\n          icon: '✗',\n          className: 'notification-error',\n          duration: 7000\n        },\n        warning: {\n          icon: '⚠',\n          className: 'notification-warning',\n          duration: 5000\n        },\n        info: {\n          icon: 'ℹ',\n          className: 'notification-info',\n          duration: 4000\n        }\n      },\n      POSITIONS: {\n        'top-left': { top: '20px', left: '20px' },\n        'top-right': { top: '20px', right: '20px' },\n        'top-center': { top: '20px', left: '50%', transform: 'translateX(-50%)' },\n        'bottom-left': { bottom: '20px', left: '20px' },\n        'bottom-right': { bottom: '20px', right: '20px' },\n        'bottom-center': { bottom: '20px', left: '50%', transform: 'translateX(-50%)' }\n      }\n    };\n\n    Object.freeze(this.config);\n  }\n\n  /**\n   * 获取配置值\n   * @param {string} key - 配置键\n   * @param {*} defaultValue - 默认值\n   * @returns {*} 配置值\n   */\n  get(key, defaultValue) {\n    return this.config.hasOwnProperty(key) ? this.config[key] : defaultValue;\n  }\n\n  /**\n   * 检查配置键是否存在\n   * @param {string} key - 配置键\n   * @returns {boolean} 是否存在\n   */\n  has(key) {\n    return this.config.hasOwnProperty(key);\n  }\n\n  /**\n   * 获取所有配置\n   * @returns {object} 配置对象的深拷贝\n   */\n  getAll() {\n    return JSON.parse(JSON.stringify(this.config));\n  }\n\n  /**\n   * 获取通知类型配置\n   * @param {string} type - 通知类型 (success, error, warning, info)\n   * @returns {object} 通知类型配置\n   */\n  getNotificationType(type) {\n    return this.config.NOTIFICATION_TYPES[type] || this.config.NOTIFICATION_TYPES.info;\n  }\n\n  /**\n   * 获取所有通知类型\n   * @returns {object} 所有通知类型配置\n   */\n  getAllNotificationTypes() {\n    return JSON.parse(JSON.stringify(this.config.NOTIFICATION_TYPES));\n  }\n\n  /**\n   * 获取位置配置\n   * @param {string} position - 位置名称\n   * @returns {object} 位置样式配置\n   */\n  getPositionStyle(position = null) {\n    const pos = position || this.config.POSITION;\n    return this.config.POSITIONS[pos] || this.config.POSITIONS['top-right'];\n  }\n\n  /**\n   * 获取所有可用位置\n   * @returns {string[]} 位置名称数组\n   */\n  getAvailablePositions() {\n    return Object.keys(this.config.POSITIONS);\n  }\n\n  /**\n   * 获取默认配置\n   * @returns {object} 默认配置\n   */\n  getDefaults() {\n    return {\n      duration: this.config.DEFAULT_DURATION,\n      position: this.config.POSITION,\n      maxNotifications: this.config.MAX_NOTIFICATIONS,\n      animationDuration: this.config.ANIMATION_DURATION,\n      autoDismiss: this.config.AUTO_DISMISS,\n      showCloseButton: this.config.SHOW_CLOSE_BUTTON\n    };\n  }\n\n  /**\n   * 验证通知类型是否有效\n   * @param {string} type - 通知类型\n   * @returns {boolean} 是否有效\n   */\n  isValidType(type) {\n    return this.config.NOTIFICATION_TYPES.hasOwnProperty(type);\n  }\n\n  /**\n   * 验证位置是否有效\n   * @param {string} position - 位置名称\n   * @returns {boolean} 是否有效\n   */\n  isValidPosition(position) {\n    return this.config.POSITIONS.hasOwnProperty(position);\n  }\n\n  /**\n   * 获取通知的完整配置\n   * @param {string} type - 通知类型\n   * @param {object} options - 自定义选项\n   * @returns {object} 完整配置\n   */\n  getNotificationConfig(type, options = {}) {\n    const typeConfig = this.getNotificationType(type);\n    const defaults = this.getDefaults();\n\n    return {\n      ...defaults,\n      ...typeConfig,\n      ...options,\n      position: this.getPositionStyle(options.position)\n    };\n  }\n}\n\n// 创建全局实例\nconst notificationConfig = new NotificationConfig();\n\n// 导出配置管理器\nif (typeof window !== 'undefined') {\n  window.NotificationConfig = NotificationConfig;\n  window.notificationConfig = notificationConfig;\n}\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { NotificationConfig, notificationConfig };\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\config\\PerformanceConfig.js","messages":[{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":40,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":40,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[994,1021],"text":"Object.prototype.hasOwnProperty.call(this.config, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":49,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":49,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[1177,1204],"text":"Object.prototype.hasOwnProperty.call(this.config, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 性能监控配置管理器\n * 专门负责性能相关的配置常量和设置\n */\nclass PerformanceConfig {\n  constructor() {\n    this.config = {\n      SLOW_RESOURCE_THRESHOLD: 1000, // 慢资源阈值(ms)\n      LARGE_RESOURCE_THRESHOLD: 1024 * 1024, // 大资源阈值(bytes)\n      MAX_SLOW_RESOURCES: 100, // 最大慢资源记录数\n      ERROR_FREQUENCY_LIMIT: 5, // 错误频率限制\n      ERROR_FREQUENCY_WINDOW: 60000, // 错误频率窗口(ms)\n      SESSION_TIMEOUT: 30 * 60 * 1000, // 会话超时(ms)\n      MEMORY_WARNING_THRESHOLD: 50 * 1024 * 1024, // 内存警告阈值(bytes)\n      PERFORMANCE_SCORE_THRESHOLDS: {\n        EXCELLENT: 90,\n        GOOD: 70,\n        NEEDS_IMPROVEMENT: 50\n      },\n      CORE_WEB_VITALS: {\n        LCP_GOOD: 2500,\n        LCP_NEEDS_IMPROVEMENT: 4000,\n        FID_GOOD: 100,\n        FID_NEEDS_IMPROVEMENT: 300,\n        CLS_GOOD: 0.1,\n        CLS_NEEDS_IMPROVEMENT: 0.25\n      }\n    };\n\n    Object.freeze(this.config);\n  }\n\n  /**\n   * 获取配置值\n   * @param {string} key - 配置键\n   * @param {*} defaultValue - 默认值\n   * @returns {*} 配置值\n   */\n  get(key, defaultValue) {\n    return this.config.hasOwnProperty(key) ? this.config[key] : defaultValue;\n  }\n\n  /**\n   * 检查配置键是否存在\n   * @param {string} key - 配置键\n   * @returns {boolean} 是否存在\n   */\n  has(key) {\n    return this.config.hasOwnProperty(key);\n  }\n\n  /**\n   * 获取所有配置\n   * @returns {object} 配置对象的深拷贝\n   */\n  getAll() {\n    return JSON.parse(JSON.stringify(this.config));\n  }\n\n  /**\n   * 获取性能阈值配置\n   * @returns {object} 性能阈值配置\n   */\n  getThresholds() {\n    return {\n      slow: this.config.SLOW_RESOURCE_THRESHOLD,\n      large: this.config.LARGE_RESOURCE_THRESHOLD,\n      memory: this.config.MEMORY_WARNING_THRESHOLD,\n      scores: this.config.PERFORMANCE_SCORE_THRESHOLDS\n    };\n  }\n\n  /**\n   * 获取Core Web Vitals配置\n   * @returns {object} Core Web Vitals配置\n   */\n  getCoreWebVitals() {\n    return JSON.parse(JSON.stringify(this.config.CORE_WEB_VITALS));\n  }\n\n  /**\n   * 验证性能指标是否在良好范围内\n   * @param {string} metric - 指标名称 (lcp, fid, cls)\n   * @param {number} value - 指标值\n   * @returns {string} 评级 (good, needs_improvement, poor)\n   */\n  evaluateMetric(metric, value) {\n    const vitals = this.config.CORE_WEB_VITALS;\n    const upperMetric = metric.toUpperCase();\n\n    if (vitals[`${upperMetric}_GOOD`] && vitals[`${upperMetric}_NEEDS_IMPROVEMENT`]) {\n      if (value <= vitals[`${upperMetric}_GOOD`]) {\n        return 'good';\n      } else if (value <= vitals[`${upperMetric}_NEEDS_IMPROVEMENT`]) {\n        return 'needs_improvement';\n      }\n      return 'poor';\n\n    }\n\n    return 'unknown';\n  }\n}\n\n// 创建全局实例\nconst performanceConfig = new PerformanceConfig();\n\n// 导出配置管理器\nif (typeof window !== 'undefined') {\n  window.performanceConfig = performanceConfig;\n}\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = performanceConfig;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\config\\ShoppingCartConfig.js","messages":[{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":51,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":51,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[1199,1226],"text":"Object.prototype.hasOwnProperty.call(this.config, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":60,"column":24,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":60,"endColumn":38,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[1382,1409],"text":"Object.prototype.hasOwnProperty.call(this.config, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 购物车配置管理器\n * 专门负责购物车相关的配置常量和设置\n */\nclass ShoppingCartConfig {\n  constructor() {\n    this.config = {\n      STORAGE_KEY: 'shopping_cart',\n      MAX_QUANTITY_PER_ITEM: 99,\n      MIN_QUANTITY_PER_ITEM: 1,\n      MAX_ITEMS_IN_CART: 50,\n      AUTO_SAVE: true,\n      SAVE_DEBOUNCE_DELAY: 500,\n      CURRENCY: {\n        symbol: '$',\n        code: 'USD',\n        position: 'before', // 'before' or 'after'\n        decimalPlaces: 2\n      },\n      VALIDATION_RULES: {\n        requirePositivePrice: true,\n        requireValidQuantity: true,\n        requireProductId: true,\n        allowZeroPrice: false\n      },\n      EVENTS: {\n        ITEM_ADDED: 'cart:item:added',\n        ITEM_REMOVED: 'cart:item:removed',\n        ITEM_UPDATED: 'cart:item:updated',\n        CART_CLEARED: 'cart:cleared',\n        CART_LOADED: 'cart:loaded',\n        CART_SAVED: 'cart:saved'\n      },\n      DISCOUNT_TYPES: {\n        PERCENTAGE: 'percentage',\n        FIXED_AMOUNT: 'fixed_amount',\n        FREE_SHIPPING: 'free_shipping'\n      }\n    };\n\n    Object.freeze(this.config);\n  }\n\n  /**\n   * 获取配置值\n   * @param {string} key - 配置键\n   * @param {*} defaultValue - 默认值\n   * @returns {*} 配置值\n   */\n  get(key, defaultValue) {\n    return this.config.hasOwnProperty(key) ? this.config[key] : defaultValue;\n  }\n\n  /**\n   * 检查配置键是否存在\n   * @param {string} key - 配置键\n   * @returns {boolean} 是否存在\n   */\n  has(key) {\n    return this.config.hasOwnProperty(key);\n  }\n\n  /**\n   * 获取所有配置\n   * @returns {object} 配置对象的深拷贝\n   */\n  getAll() {\n    return JSON.parse(JSON.stringify(this.config));\n  }\n\n  /**\n   * 获取存储键\n   * @returns {string} 存储键\n   */\n  getStorageKey() {\n    return this.config.STORAGE_KEY;\n  }\n\n  /**\n   * 获取数量限制\n   * @returns {object} 数量限制配置\n   */\n  getQuantityLimits() {\n    return {\n      max: this.config.MAX_QUANTITY_PER_ITEM,\n      min: this.config.MIN_QUANTITY_PER_ITEM,\n      maxItems: this.config.MAX_ITEMS_IN_CART\n    };\n  }\n\n  /**\n   * 获取货币配置\n   * @returns {object} 货币配置\n   */\n  getCurrencyConfig() {\n    return JSON.parse(JSON.stringify(this.config.CURRENCY));\n  }\n\n  /**\n   * 格式化价格\n   * @param {number} amount - 金额\n   * @returns {string} 格式化后的价格\n   */\n  formatPrice(amount) {\n    const currency = this.config.CURRENCY;\n    const formattedAmount = amount.toFixed(currency.decimalPlaces);\n\n    if (currency.position === 'before') {\n      return `${currency.symbol}${formattedAmount}`;\n    }\n    return `${formattedAmount}${currency.symbol}`;\n\n  }\n\n  /**\n   * 获取验证规则\n   * @returns {object} 验证规则\n   */\n  getValidationRules() {\n    return JSON.parse(JSON.stringify(this.config.VALIDATION_RULES));\n  }\n\n  /**\n   * 获取事件名称\n   * @param {string} eventType - 事件类型\n   * @returns {string} 事件名称\n   */\n  getEventName(eventType) {\n    return this.config.EVENTS[eventType] || null;\n  }\n\n  /**\n   * 获取所有事件名称\n   * @returns {object} 所有事件名称\n   */\n  getAllEvents() {\n    return JSON.parse(JSON.stringify(this.config.EVENTS));\n  }\n\n  /**\n   * 获取折扣类型\n   * @returns {object} 折扣类型\n   */\n  getDiscountTypes() {\n    return JSON.parse(JSON.stringify(this.config.DISCOUNT_TYPES));\n  }\n\n  /**\n   * 验证数量是否有效\n   * @param {number} quantity - 数量\n   * @returns {boolean} 是否有效\n   */\n  isValidQuantity(quantity) {\n    return quantity >= this.config.MIN_QUANTITY_PER_ITEM &&\n      quantity <= this.config.MAX_QUANTITY_PER_ITEM;\n  }\n\n  /**\n   * 验证购物车项目数量是否超限\n   * @param {number} currentItemCount - 当前项目数量\n   * @returns {boolean} 是否超限\n   */\n  isCartFull(currentItemCount) {\n    return currentItemCount >= this.config.MAX_ITEMS_IN_CART;\n  }\n\n  /**\n   * 获取自动保存配置\n   * @returns {object} 自动保存配置\n   */\n  getAutoSaveConfig() {\n    return {\n      enabled: this.config.AUTO_SAVE,\n      debounceDelay: this.config.SAVE_DEBOUNCE_DELAY\n    };\n  }\n\n  /**\n   * 验证折扣类型是否有效\n   * @param {string} discountType - 折扣类型\n   * @returns {boolean} 是否有效\n   */\n  isValidDiscountType(discountType) {\n    return Object.values(this.config.DISCOUNT_TYPES).includes(discountType);\n  }\n}\n\n// 创建全局实例\nconst shoppingCartConfig = new ShoppingCartConfig();\n\n// 导出配置管理器\nif (typeof window !== 'undefined') {\n  window.ShoppingCartConfig = ShoppingCartConfig;\n  window.shoppingCartConfig = shoppingCartConfig;\n}\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { ShoppingCartConfig, shoppingCartConfig };\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\constants.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\dependency-injection.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\di-container.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\error-handler.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\error-utils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\image-optimization.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\input-validator.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\lazy-loader.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\order-ui.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\order.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\password-security.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\payment-ui.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\payment.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\performance-dashboard.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\performance-monitor.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\performance-optimizer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\product-card.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\selectors-config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\uniqueness-checker.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'lockKey' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":210,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":210,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'lockKey' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":249,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":249,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'lockKey' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":296,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":296,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'lockKey' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":323,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":323,"endColumn":18}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 用户唯一性检查模块\n * 负责检查用户名和邮箱的唯一性，处理并发冲突\n */\n// 全局mockStorage用于测试模式下的数据共享\nif (typeof global !== 'undefined') {\n  global.mockStorageMap = global.mockStorageMap || new Map();\n}\n\nclass UniquenessChecker {\n  constructor(options = {}) {\n    this.storageKey = options.storageKey || 'registeredUsers';\n    this.lockTimeout = options.lockTimeout || 5000; // 5秒锁超时\n    this.retryAttempts = options.retryAttempts || 3;\n    this.retryDelay = options.retryDelay || 100; // 100ms\n    this.testMode = options.testMode || false;\n\n    // 内存中的锁机制（用于并发控制）\n    this.locks = new Map();\n\n    // 初始化mockStorage\n    this.mockStorage = [];\n\n    // 初始化存储\n    this.initializeStorage();\n  }\n\n  /**\n   * 初始化存储\n   */\n  initializeStorage() {\n    if (this.testMode) {\n      // 测试模式：使用全局mockStorage\n      if (typeof global !== 'undefined' && !global.mockStorageMap.has(this.storageKey)) {\n        global.mockStorageMap.set(this.storageKey, []);\n      }\n    } else if (typeof localStorage !== 'undefined') {\n      // 浏览器环境\n      if (!localStorage.getItem(this.storageKey)) {\n        localStorage.setItem(this.storageKey, JSON.stringify([]));\n      }\n    } else {\n      // Node.js 环境或测试环境\n      this.mockStorage = this.mockStorage || [];\n    }\n  }\n\n  /**\n   * 获取所有已注册用户\n   */\n  getRegisteredUsers() {\n    if (this.testMode && typeof global !== 'undefined') {\n      // 测试模式：使用全局mockStorage\n      return global.mockStorageMap.get(this.storageKey) || [];\n    } else if (typeof localStorage !== 'undefined') {\n      try {\n        return JSON.parse(localStorage.getItem(this.storageKey) || '[]');\n      } catch (error) {\n        console.error('解析用户数据失败:', error);\n        return [];\n      }\n    } else {\n      return this.mockStorage || [];\n    }\n  }\n\n  /**\n   * 保存用户数据\n   */\n  saveUsers(users) {\n    if (this.testMode && typeof global !== 'undefined') {\n      // 测试模式：使用全局mockStorage\n      global.mockStorageMap.set(this.storageKey, users);\n    } else if (typeof localStorage !== 'undefined') {\n      localStorage.setItem(this.storageKey, JSON.stringify(users));\n    } else {\n      this.mockStorage = users;\n    }\n  }\n\n  /**\n   * 获取分布式锁\n   */\n  async acquireLock(key) {\n    const lockKey = `lock_${key}`;\n    const now = Date.now();\n\n    // 检查是否已有锁\n    if (this.locks.has(lockKey)) {\n      const lockTime = this.locks.get(lockKey);\n      if (now - lockTime < this.lockTimeout) {\n        throw new Error(`资源 ${key} 正在被其他操作使用，请稍后重试`);\n      }\n    }\n\n    // 获取锁\n    this.locks.set(lockKey, now);\n\n    // 设置自动释放锁\n    setTimeout(() => {\n      this.releaseLock(key);\n    }, this.lockTimeout);\n\n    return lockKey;\n  }\n\n  /**\n   * 释放锁\n   */\n  releaseLock(key) {\n    const lockKey = `lock_${key}`;\n    this.locks.delete(lockKey);\n  }\n\n  /**\n   * 检查用户名是否唯一\n   */\n  async checkUsernameUniqueness(username) {\n    if (!username || typeof username !== 'string') {\n      throw new Error('用户名不能为空');\n    }\n\n    const normalizedUsername = username.toLowerCase().trim();\n\n    if (normalizedUsername.length === 0) {\n      throw new Error('用户名不能为空');\n    }\n\n    const users = this.getRegisteredUsers();\n    const exists = users.some(user =>\n      user.username && user.username.toLowerCase() === normalizedUsername\n    );\n\n    return {\n      isUnique: !exists,\n      username: normalizedUsername,\n      message: exists ? '用户名已被使用' : '用户名可用'\n    };\n  }\n\n  /**\n   * 检查邮箱是否唯一\n   */\n  async checkEmailUniqueness(email) {\n    if (!email || typeof email !== 'string') {\n      throw new Error('邮箱不能为空');\n    }\n\n    const normalizedEmail = email.toLowerCase().trim();\n\n    if (normalizedEmail.length === 0) {\n      throw new Error('邮箱不能为空');\n    }\n\n    const users = this.getRegisteredUsers();\n    const exists = users.some(user =>\n      user.email && user.email.toLowerCase() === normalizedEmail\n    );\n\n    return {\n      isUnique: !exists,\n      email: normalizedEmail,\n      message: exists ? '邮箱已被使用' : '邮箱可用'\n    };\n  }\n\n  /**\n   * 批量检查唯一性（用户名和邮箱）\n   */\n  async checkBatchUniqueness(username, email) {\n    const results = {\n      username: null,\n      email: null,\n      isValid: true,\n      errors: []\n    };\n\n    try {\n      // 并行检查用户名和邮箱\n      const [usernameResult, emailResult] = await Promise.all([\n        this.checkUsernameUniqueness(username),\n        this.checkEmailUniqueness(email)\n      ]);\n\n      results.username = usernameResult;\n      results.email = emailResult;\n\n      if (!usernameResult.isUnique) {\n        results.isValid = false;\n        results.errors.push(usernameResult.message);\n      }\n\n      if (!emailResult.isUnique) {\n        results.isValid = false;\n        results.errors.push(emailResult.message);\n      }\n\n    } catch (error) {\n      results.isValid = false;\n      results.errors.push(error.message);\n    }\n\n    return results;\n  }\n\n  /**\n   * 预留用户名和邮箱（防止并发注册）\n   */\n  async reserveUser(username, email, reservationId = null) {\n    const lockKey = await this.acquireLock('user_registration');\n\n    try {\n      // 再次检查唯一性（双重检查锁定模式）\n      const uniquenessCheck = await this.checkBatchUniqueness(username, email);\n\n      if (!uniquenessCheck.isValid) {\n        throw new Error(`注册失败: ${uniquenessCheck.errors.join(', ')}`);\n      }\n\n      const users = this.getRegisteredUsers();\n      const reservation = {\n        id: reservationId || this.generateReservationId(),\n        username: username.toLowerCase().trim(),\n        email: email.toLowerCase().trim(),\n        status: 'reserved',\n        reservedAt: new Date().toISOString(),\n        expiresAt: new Date(Date.now() + 300000).toISOString() // 5分钟过期\n      };\n\n      users.push(reservation);\n      this.saveUsers(users);\n\n      return {\n        success: true,\n        reservationId: reservation.id,\n        message: '用户名和邮箱已预留',\n        expiresAt: reservation.expiresAt\n      };\n\n    } finally {\n      this.releaseLock('user_registration');\n    }\n  }\n\n  /**\n   * 确认预留（将预留转为正式注册）\n   */\n  async confirmReservation(reservationId, userData) {\n    const lockKey = await this.acquireLock('user_registration');\n\n    try {\n      const users = this.getRegisteredUsers();\n      const reservationIndex = users.findIndex(user =>\n        user.id === reservationId && user.status === 'reserved'\n      );\n\n      if (reservationIndex === -1) {\n        throw new Error('预留记录不存在或已过期');\n      }\n\n      const reservation = users[reservationIndex];\n\n      // 检查是否过期\n      if (reservation.expiresAt && new Date() > new Date(reservation.expiresAt)) {\n        // 删除过期预留\n        users.splice(reservationIndex, 1);\n        this.saveUsers(users);\n        throw new Error('预留已过期，请重新注册');\n      }\n\n      // 更新为正式用户\n      users[reservationIndex] = {\n        ...reservation,\n        ...userData,\n        status: 'active',\n        registeredAt: new Date().toISOString()\n      };\n\n      this.saveUsers(users);\n\n      return {\n        success: true,\n        userId: reservation.id,\n        message: '注册成功'\n      };\n\n    } finally {\n      this.releaseLock('user_registration');\n    }\n  }\n\n  /**\n   * 取消预留\n   */\n  async cancelReservation(reservationId) {\n    const lockKey = await this.acquireLock('user_registration');\n\n    try {\n      const users = this.getRegisteredUsers();\n      const reservationIndex = users.findIndex(user =>\n        user.id === reservationId && user.status === 'reserved'\n      );\n\n      if (reservationIndex !== -1) {\n        users.splice(reservationIndex, 1);\n        this.saveUsers(users);\n      }\n\n      return {\n        success: true,\n        message: '预留已取消'\n      };\n\n    } finally {\n      this.releaseLock('user_registration');\n    }\n  }\n\n  /**\n   * 清理过期预留\n   */\n  async cleanupExpiredReservations() {\n    const lockKey = await this.acquireLock('cleanup');\n\n    try {\n      const users = this.getRegisteredUsers();\n      const now = new Date();\n\n      const activeUsers = users.filter(user => {\n        if (user.status === 'reserved') {\n          return new Date(user.expiresAt) > now;\n        }\n        return true; // 保留非预留用户\n      });\n\n      if (activeUsers.length !== users.length) {\n        this.saveUsers(activeUsers);\n        return {\n          success: true,\n          cleaned: users.length - activeUsers.length,\n          message: `清理了 ${users.length - activeUsers.length} 个过期预留`\n        };\n      }\n\n      return {\n        success: true,\n        cleaned: 0,\n        message: '没有过期预留需要清理'\n      };\n\n    } finally {\n      this.releaseLock('cleanup');\n    }\n  }\n\n  /**\n   * 生成预留ID\n   */\n  generateReservationId() {\n    return 'res_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  /**\n   * 获取用户统计信息\n   */\n  getStatistics() {\n    const users = this.getRegisteredUsers();\n    const now = new Date();\n\n    const stats = {\n      total: users.length,\n      active: 0,\n      reserved: 0,\n      expired: 0\n    };\n\n    users.forEach(user => {\n      if (user.status === 'active') {\n        stats.active++;\n      } else if (user.status === 'reserved') {\n        if (new Date(user.expiresAt) > now) {\n          stats.reserved++;\n        } else {\n          stats.expired++;\n        }\n      }\n    });\n\n    return stats;\n  }\n\n  /**\n   * 重置所有数据（仅用于测试）\n   */\n  reset() {\n    if (this.testMode && typeof global !== 'undefined') {\n      // 测试模式：重置全局mockStorage\n      global.mockStorageMap.set(this.storageKey, []);\n    } else if (typeof localStorage !== 'undefined') {\n      localStorage.removeItem(this.storageKey);\n    }\n    this.mockStorage = [];\n    this.locks.clear();\n    this.initializeStorage();\n  }\n}\n\n// 导出模块\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = UniquenessChecker;\n} else if (typeof window !== 'undefined') {\n  window.UniquenessChecker = UniquenessChecker;\n}\n","usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\codes\\onlinestore\\caddy-style-shopping-site\\js\\utils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"indent","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"no-trailing-spaces","replacedBy":[]},{"ruleId":"eol-last","replacedBy":[]},{"ruleId":"no-multiple-empty-lines","replacedBy":[]},{"ruleId":"arrow-spacing","replacedBy":[]},{"ruleId":"template-curly-spacing","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]